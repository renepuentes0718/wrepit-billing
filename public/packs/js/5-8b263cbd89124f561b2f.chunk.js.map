{"version":3,"file":"js/5-8b263cbd89124f561b2f.chunk.js","sources":["webpack:///./app/javascript/components/authentication/ResetPassword.tsx","webpack:///./app/javascript/components/forms/ResetPasswordForm.tsx","webpack:///./app/javascript/components/utils/passwordStrength.ts"],"sourcesContent":["import React from 'react'\nimport { Grid, Stack, Typography } from '@mui/material'\nimport AuthWrapper from '../shared/AuthWrapper'\nimport ResetPasswordForm from '../forms/ResetPasswordForm'\n\nexport default function Login(): JSX.Element {\n  return (\n    <AuthWrapper>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Stack direction='row' justifyContent='space-between' alignItems='baseline' sx={{ mb: { xs: -0.5, sm: 0.5 } }}>\n            <Typography variant='h5'>Reset Password</Typography>\n          </Stack>\n        </Grid>\n        <Grid item xs={12}>\n          <ResetPasswordForm />\n        </Grid>\n      </Grid>\n    </AuthWrapper>\n  )\n}\n","import * as React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport * as Yup from 'yup'\nimport { Formik } from 'formik'\nimport EyeOutlined from '@ant-design/icons/EyeOutlined'\nimport EyeInvisibleOutlined from '@ant-design/icons/EyeInvisibleOutlined'\nimport {\n  Button,\n  FormControl,\n  FormHelperText,\n  Grid,\n  Link,\n  InputAdornment,\n  IconButton,\n  InputLabel,\n  OutlinedInput,\n  Stack,\n  Typography,\n  Box,\n} from '@mui/material'\nimport { strengthColor, strengthIndicator } from '../utils/passwordStrength'\nexport default function AuthRegister() {\n  // const [level, setLevel] = useState()\n  const [showPassword, setShowPassword] = React.useState(false)\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword)\n  }\n\n  const handleMouseDownPassword = (event) => {\n    event.preventDefault()\n  }\n\n  const changePassword = (value) => {\n    const temp = strengthIndicator(value)\n    // setLevel(strengthColor(temp))\n  }\n  const handleSubmit = (event) => {\n\n  }\n  React.useEffect(() => {\n    changePassword('')\n  }, [])\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      initialValues={{\n        password: '',\n        submit: null\n      }}\n      validationSchema={Yup.object().shape({\n        password: Yup.string().max(255).required('Password is required')\n      })}\n    >\n      {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n        <form noValidate onSubmit={handleSubmit}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Stack spacing={1}>\n                <InputLabel htmlFor='password-signup'>Password</InputLabel>\n                <OutlinedInput\n                  fullWidth\n                  error={Boolean(touched.password && errors.password)}\n                  id='password-signup'\n                  type={showPassword ? 'text' : 'password'}\n                  value={values.password}\n                  name='password'\n                  onBlur={handleBlur}\n                  onChange={(e) => {\n                    handleChange(e)\n                    changePassword(e.target.value)\n                  }}\n                  endAdornment={\n                    <InputAdornment position='end'>\n                      <IconButton\n                        aria-label='toggle password visibility'\n                        onClick={handleClickShowPassword}\n                        onMouseDown={handleMouseDownPassword}\n                        edge='end'\n                        color='secondary'\n                      >\n                        {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                  placeholder='******'\n                  inputProps={{}}\n                />\n              </Stack>\n              {touched.password && errors.password && (\n                <FormHelperText error id='helper-text-password-signup'>\n                  {/* {errors.password} */}\n                </FormHelperText>\n              )}\n              <FormControl fullWidth sx={{ mt: 2 }}>\n                <Grid container spacing={2} alignItems='center'>\n                  <Grid item>\n                    {/* <Box sx={{ bgcolor: level?.color, width: 85, height: 8, borderRadius: '7px' }} /> */}\n                  </Grid>\n                  <Grid item>\n                    <Typography variant='subtitle1' fontSize='0.75rem'>\n                      {/* {level?.label} */}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </FormControl>\n            </Grid>\n            {errors.submit && (\n              <Grid item xs={12}>\n                <FormHelperText error>\n                  {/* {errors.submit} */}\n                </FormHelperText>\n              </Grid>\n            )}\n            <Grid item xs={12}>\n              <Button\n                disableElevation\n                disabled={isSubmitting}\n                fullWidth\n                size='large'\n                type='submit'\n                variant='contained'\n                color='primary'\n              >\n                Reset Password\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      )}\n    </Formik>\n  )\n}\n","interface Strength {\n  label: string\n  color: string\n}\n\n/**\n * Password validator for login pages\n */\n\n// has number\nconst hasNumber = (character: string): boolean => new RegExp(/[0-9]/).test(character)\n\n// has mix of small and capitals\nconst hasMixed = (character: string): boolean => new RegExp(/[a-z]/).test(character) && new RegExp(/[A-Z]/).test(character)\n\n// has special chars\nconst hasSpecial = (character: string): boolean => new RegExp(/[!#@$%^&*)(+=._-]/).test(character)\n\n// set color based on password strength\nexport const strengthColor = (count: number): Strength => {\n  if (count < 2) return { label: 'Poor', color: 'error.main' }\n  if (count < 3) return { label: 'Weak', color: 'warning.main' }\n  if (count < 4) return { label: 'Normal', color: 'warning.dark' }\n  if (count < 5) return { label: 'Good', color: 'success.main' }\n  if (count < 6) return { label: 'Strong', color: 'success.dark' }\n  return { label: 'Poor', color: 'error.main' }\n}\n\n// password strength indicator\nexport const strengthIndicator = (character: string): number => {\n  let strengths = 0\n  if (character.length > 5) strengths += 1\n  if (character.length > 7) strengths += 1\n  if (hasNumber(character)) strengths += 1\n  if (hasSpecial(character)) strengths += 1\n  if (hasMixed(character)) strengths += 1\n  return strengths\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAEA;AACA;AACA;AACA;AACA;AAcA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAIA;;;;;;;;;;;;AC/HA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}