{"ast":null,"code":"'use strict';\n\nconst _excluded = [\"phone_number\"],\n  _excluded2 = [\"password\"],\n  _excluded3 = [\"password\", \"phone_number\", \"country_code\", \"confirm_password\"],\n  _excluded4 = [\"useNextWaitConfig\"],\n  _excluded5 = [\"services\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar utils$1 = require('aws-amplify/utils');\nvar utils = require('@aws-amplify/core/internals/utils');\nvar auth = require('aws-amplify/auth');\nvar awsAmplify = require('aws-amplify');\nvar xstate = require('xstate');\nvar pickBy = require('lodash/pickBy.js');\nvar merge = require('lodash/merge.js');\nvar deepExtend = require('style-dictionary/lib/utils/deepExtend.js');\nvar flattenProperties = require('style-dictionary/lib/utils/flattenProperties.js');\nvar kebabCase = require('lodash/kebabCase.js');\nvar usesReference = require('style-dictionary/lib/utils/references/usesReference.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar pickBy__default = /*#__PURE__*/_interopDefaultLegacy(pickBy);\nvar merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);\nvar deepExtend__default = /*#__PURE__*/_interopDefaultLegacy(deepExtend);\nvar flattenProperties__default = /*#__PURE__*/_interopDefaultLegacy(flattenProperties);\nvar kebabCase__default = /*#__PURE__*/_interopDefaultLegacy(kebabCase);\nvar usesReference__default = /*#__PURE__*/_interopDefaultLegacy(usesReference);\n\n/**\n * This file contains helpers that lets you easily access current actor's state\n * and context.\n */\n/**\n * Get the state of current actor. This is useful for checking which screen\n * to render: e.g. `getActorState(state).matches('confirmSignUp.edit').\n */\nconst getActorState = state => {\n  return state.context.actorRef?.getSnapshot();\n};\n/**\n * Get the context of current actor. Useful for getting any nested context\n * like remoteError.\n */\nconst getActorContext$1 = state => {\n  return getActorState(state)?.context;\n};\nconst ACCOUNT_SETTINGS_INPUT_BASE = {\n  apis: [utils.AuthAction.DeleteUser, utils.AuthAction.UpdatePassword],\n  category: utils.Category.Auth\n};\nconst AUTHENTICATOR_INPUT_BASE = {\n  apis: [utils.AuthAction.SignUp, utils.AuthAction.ConfirmSignUp, utils.AuthAction.ResendSignUpCode, utils.AuthAction.SignIn, utils.AuthAction.ConfirmSignIn, utils.AuthAction.FetchUserAttributes, utils.AuthAction.SignOut, utils.AuthAction.ResetPassword, utils.AuthAction.ConfirmResetPassword, utils.AuthAction.SignInWithRedirect],\n  category: utils.Category.Auth\n};\nconst IN_APP_MESSAGING_INPUT_BASE = {\n  apis: [utils.InAppMessagingAction.NotifyMessageInteraction],\n  category: utils.Category.InAppMessaging\n};\nconst LOCATION_SEARCH_INPUT_BASE = {\n  category: utils.Category.Geo,\n  apis: [utils.GeoAction.SearchByText, utils.GeoAction.SearchForSuggestions, utils.GeoAction.SearchByPlaceId]\n};\nconst MAP_VIEW_INPUT_BASE = {\n  category: utils.Category.Geo,\n  apis: []\n};\nconst STORAGE_MANAGER_INPUT_BASE = {\n  apis: [utils.StorageAction.UploadData],\n  category: utils.Category.Storage\n};\n\n/**\n * Some libraries may not follow Node ES module spec and could be loaded as CommonJS modules,\n * To ensure the interoperability between ESM and CJS, modules from those libraries have to be loaded via namespace import\n * And sanitized by the function below because unlike ESM namespace, CJS namespace set `module.exports` object on the `default` key\n * https://nodejs.org/api/esm.html#interoperability-with-commonjs\n */\nconst sanitizeNamespaceImport = namespaceModule => {\n  const sanitizedNamespaceModule = _objectSpread({\n    default: undefined\n  }, namespaceModule);\n  return sanitizedNamespaceModule.default ?? sanitizedNamespaceModule;\n};\n/**\n * Checks if `value` is an Object (non-primitive, non-array, non-function)\n * Will return false for Arrays and functions\n *\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is an object, `false` otherwise\n */\nfunction isObject(value) {\n  return value != null && !Array.isArray(value) && typeof value === 'object';\n}\n/**\n * Checks if `value` is a string primitive or object\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a string, `false` otherwise\n */\nfunction isString(value) {\n  return typeof value === 'string' || typeof value === 'object' && Object.prototype.toString.call(value) === '[object String]';\n}\n/**\n * Checks if `value` is a Map\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a Map, `false` otherwise\n */\nfunction isMap(value) {\n  return isObject(value) && Object.prototype.toString.call(value) === '[object Map]';\n}\n/**\n * Checks if `value` is a Set\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a Set, `false` otherwise\n */\nfunction isSet(value) {\n  return isObject(value) && Object.prototype.toString.call(value) === '[object Set]';\n}\n/**\n * Checks if `value` is undefined\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is undefined, `false` otherwise\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n/**\n * Checks if `value` is nullish\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is nullish, `false` otherwise\n */\nfunction isNil(value) {\n  return value == null;\n}\n/**\n * Checks if `value` is empty\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is empty, `false` otherwise\n */\nfunction isEmpty(value) {\n  if (value === null || value === undefined) return true;\n  if (isObject(value) && (isMap(value) || isSet(value))) {\n    return !value.size;\n  }\n  if (isObject(value) && (isString(value) || Array.isArray(value))) {\n    return !value.length;\n  }\n  for (const key in value) {\n    if (has(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Checks if `value` is an empty array\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is a empty, `false` otherwise\n */\nfunction isEmptyArray(value) {\n  return Array.isArray(value) && isEmpty(value);\n}\n/**\n * Checks if all members of the `values` param are empty arrays\n *\n * @param {unknown} value The values to check\n * @returns {boolean} Returns `true` if all members of `values` are empty, `false` otherwise\n */\nfunction areEmptyArrays() {\n  for (var _len = arguments.length, values = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    values[_key2] = arguments[_key2];\n  }\n  return values.every(isEmptyArray);\n}\n/**\n * Checks if `value` is an empty object\n *\n * @param {unknown} value The value to check\n * @returns {boolean} Returns `true` if `value` is empty, `false` otherwise\n */\nfunction isEmptyObject(value) {\n  return isObject(value) && isEmpty(value);\n}\n/**\n * Checks if all members of the `values` param are empty objects\n *\n * @param {unknown} values The values to check\n * @returns {boolean} Returns `true` if all members of the `values` param are empty, `false` otherwise\n */\nfunction areEmptyObjects() {\n  for (var _len2 = arguments.length, values = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n    values[_key3] = arguments[_key3];\n  }\n  return values.every(isEmptyObject);\n}\n/**\n * Capitalizes `value` and its return type\n *\n * @param {string} value string to capitalize\n * @returns {string} capitalized string\n */\nfunction capitalize(value) {\n  return isString(value) ? value.charAt(0).toUpperCase() + value.slice(1) : '';\n}\n/**\n * Checks if `key` is a direct property of `value`\n *\n * @param {unknown} value `object` potentially containing property\n * @param {string} key property key\n * @returns whether `key` param is a property of the `obj` param\n */\nfunction has(value, key) {\n  return value != null && Object.prototype.hasOwnProperty.call(value, key);\n}\n/**\n * Checks if `value` is a function\n *\n * @param {unknown} value param to check\n * @returns {boolean} whether `value` is a function\n */\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n/**\n * This helper function creates modifier class names that are used for our flat BEM styling\n * it takes in a base and modifier and returns the modified class if a modifier was passed in and null otherwise\n * @param base The base class of the output\n * @param modifier The modifier to add onto the base\n * @returns the modified class name or empty string\n */\nconst classNameModifier = (base, modifier) => {\n  return modifier ? `${base}--${modifier}` : '';\n};\n/**\n * This helper function creates modified class names that are used for our flat BEM styling\n * it takes in a base, modifier, and flag and returns the modified class name if the flag is true and null if the flag is false\n * @param base\n * @param modifier\n * @param flag\n * @returns the modified class name or empty string\n */\nconst classNameModifierByFlag = (base, modifier, flag) => {\n  return flag ? `${base}--${modifier}` : '';\n};\n/**\n * `isFunction` but types the param with its function signature\n *\n * @param {unknown} value param to check\n * @returns {boolean} whether `value` is a function\n */\nfunction isTypedFunction(value) {\n  return isFunction(value);\n}\n/**\n * Similar to `Array.join`, with an optional callback/template param\n * for formatting returned string values\n *\n * @param {string[]} values string array\n * @param {(value: string) => string} template callback format param\n * @returns formatted string array\n */\nfunction templateJoin(values, template) {\n  return values.reduce((acc, curr) => `${acc}${isString(curr) ? template(curr) : ''}`, '');\n}\n/**\n * A function that does nothing\n *\n * @param {any[]} _ accepts any parameters\n * @returns nothing\n */\nfunction noop() {\n  return;\n}\n/**\n * @param {string} groupName name of group\n * @param events string values related to group\n */\nfunction groupLog(groupName) {\n  for (var _len3 = arguments.length, events = new Array(_len3 > 1 ? _len3 - 1 : 0), _key4 = 1; _key4 < _len3; _key4++) {\n    events[_key4 - 1] = arguments[_key4];\n  }\n  const hasEvents = !!events?.length;\n  if (hasEvents) {\n    // eslint-disable-next-line no-console\n    console.groupCollapsed(groupName);\n    events?.forEach(event => {\n      // eslint-disable-next-line no-console\n      console.log(event);\n    });\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(groupName);\n  }\n}\n\n/**\n * @example\n * ```ts\n * // set user agent options\n * const clear = setUserAgent(input);\n *\n * // clear user agent options\n * clear();\n * ```\n */\nconst setUserAgent = _ref => {\n  let componentName = _ref.componentName,\n    packageName = _ref.packageName,\n    version = _ref.version;\n  const packageData = [`ui-${packageName}`, version];\n  switch (componentName) {\n    case 'Authenticator':\n      {\n        utils.setCustomUserAgent(_objectSpread(_objectSpread({}, AUTHENTICATOR_INPUT_BASE), {}, {\n          additionalDetails: [[componentName], packageData]\n        }));\n        break;\n      }\n    case 'ChangePassword':\n    case 'DeleteUser':\n      {\n        utils.setCustomUserAgent(_objectSpread(_objectSpread({}, ACCOUNT_SETTINGS_INPUT_BASE), {}, {\n          additionalDetails: [['AccountSettings'], packageData]\n        }));\n        break;\n      }\n    case 'InAppMessaging':\n      {\n        utils.setCustomUserAgent(_objectSpread(_objectSpread({}, IN_APP_MESSAGING_INPUT_BASE), {}, {\n          additionalDetails: [[componentName], packageData]\n        }));\n        break;\n      }\n    case 'LocationSearch':\n      {\n        utils.setCustomUserAgent(_objectSpread(_objectSpread({}, LOCATION_SEARCH_INPUT_BASE), {}, {\n          additionalDetails: [[componentName], packageData]\n        }));\n        break;\n      }\n    case 'MapView':\n      {\n        utils.setCustomUserAgent(_objectSpread(_objectSpread({}, MAP_VIEW_INPUT_BASE), {}, {\n          additionalDetails: [[componentName], packageData]\n        }));\n        break;\n      }\n    case 'StorageManager':\n      {\n        utils.setCustomUserAgent(_objectSpread(_objectSpread({}, STORAGE_MANAGER_INPUT_BASE), {}, {\n          additionalDetails: [[componentName], packageData]\n        }));\n        break;\n      }\n  }\n  return noop;\n};\nconst classNames = function () {\n  const classes = [];\n  for (var _len4 = arguments.length, args = new Array(_len4), _key5 = 0; _key5 < _len4; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n  for (const arg of args) {\n    // skip falsey values\n    if (!arg) {\n      continue;\n    }\n    if (isString(arg)) {\n      classes.push(arg);\n      continue;\n    }\n    if (typeof arg === 'number') {\n      classes.push(arg.toString());\n      continue;\n    }\n    if (Array.isArray(arg)) {\n      classes.push(classNames(...arg));\n      continue;\n    }\n    if (isObject(arg)) {\n      // check if the object has a valid .toString() method\n      if (arg.toString !== Object.prototype.toString && arg.toString() !== '[object Object]') {\n        classes.push(arg.toString());\n        continue;\n      }\n      for (const key in arg) {\n        if (has(arg, key) && arg[key]) {\n          classes.push(key);\n        }\n      }\n    }\n  }\n  return classes.join(' ');\n};\n\n/**\n * Handles Amplify JS Auth hub events, by forwarding hub events as appropriate\n * xstate events.\n */\nconst defaultAuthHubHandler = (_ref2, service, options) => {\n  let payload = _ref2.payload;\n  const event = payload.event;\n  const send = service.send;\n  const _ref3 = options ?? {},\n    onSignIn = _ref3.onSignIn,\n    onSignOut = _ref3.onSignOut;\n  switch (event) {\n    case 'signedIn':\n      {\n        if (isFunction(onSignIn)) {\n          onSignIn(payload);\n        }\n        break;\n      }\n    case 'signInWithRedirect':\n      {\n        send('SIGN_IN_WITH_REDIRECT');\n        break;\n      }\n    case 'signedOut':\n    case 'tokenRefresh_failure':\n      {\n        if (event === 'signedOut' && isFunction(onSignOut)) {\n          onSignOut();\n        }\n        send('SIGN_OUT');\n        break;\n      }\n  }\n};\n/**\n * Listens to external auth Hub events and sends corresponding event to\n * the `service.send` of interest\n *\n * @param service - contains state machine `send` function\n * @param handler - auth event handler\n * @returns function that unsubscribes to the hub evenmt\n */\nconst listenToAuthHub = function (service) {\n  let handler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultAuthHubHandler;\n  const eventHandler = data => handler(data, service);\n  return utils$1.Hub.listen('auth', eventHandler, 'authenticator-hub-handler');\n};\nconst countryDialCodes = ['+1', '+7', '+20', '+27', '+30', '+31', '+32', '+33', '+34', '+36', '+39', '+40', '+41', '+43', '+44', '+45', '+46', '+47', '+48', '+49', '+51', '+52', '+53', '+54', '+55', '+56', '+57', '+58', '+60', '+61', '+62', '+63', '+64', '+65', '+66', '+81', '+82', '+84', '+86', '+90', '+91', '+92', '+93', '+94', '+95', '+98', '+212', '+213', '+216', '+218', '+220', '+221', '+222', '+223', '+224', '+225', '+226', '+227', '+228', '+229', '+230', '+231', '+232', '+233', '+234', '+235', '+236', '+237', '+238', '+239', '+240', '+241', '+242', '+243', '+244', '+245', '+246', '+248', '+249', '+250', '+251', '+252', '+253', '+254', '+255', '+256', '+257', '+258', '+260', '+261', '+262', '+263', '+264', '+265', '+266', '+267', '+268', '+269', '+290', '+291', '+297', '+298', '+299', '+345', '+350', '+351', '+352', '+353', '+354', '+355', '+356', '+357', '+358', '+359', '+370', '+371', '+372', '+373', '+374', '+375', '+376', '+377', '+378', '+379', '+380', '+381', '+382', '+385', '+386', '+387', '+389', '+420', '+421', '+423', '+500', '+501', '+502', '+503', '+504', '+505', '+506', '+507', '+508', '+509', '+537', '+590', '+591', '+593', '+594', '+595', '+596', '+597', '+598', '+599', '+670', '+672', '+673', '+674', '+675', '+676', '+677', '+678', '+679', '+680', '+681', '+682', '+683', '+685', '+686', '+687', '+688', '+689', '+690', '+691', '+692', '+850', '+852', '+853', '+855', '+856', '+872', '+880', '+886', '+960', '+961', '+962', '+963', '+964', '+965', '+966', '+967', '+968', '+970', '+971', '+972', '+973', '+974', '+975', '+976', '+977', '+992', '+993', '+994', '+995', '+996', '+998'];\nconst deDict$1 = {\n  'Account recovery requires verified contact information': 'Zurücksetzen des Accounts benötigt einen verifizierten Account',\n  'Add your Profile': 'Ihr Profil hinzufügen',\n  'Add your Website': 'Ihre Website hinzufügen',\n  'Back to Sign In': 'Zurück zur Anmeldung',\n  'Change Password': 'Passwort ändern',\n  Changing: 'Ändern von',\n  Code: 'Code',\n  'Confirm Password': 'Passwort bestätigen',\n  'Please confirm your Password': 'Bitte bestätigen Sie Ihr Passwort',\n  'Confirm Sign Up': 'Registrierung bestätigen',\n  'Confirm SMS Code': 'SMS-Code bestätigen',\n  'Confirm TOTP Code': 'TOTP-Code bestätigen',\n  Confirm: 'Bestätigen',\n  'Confirmation Code': 'Bestätigungs-Code',\n  Confirming: 'Wird bestätigt',\n  'Create a new account': 'Einen neuen Account erstellen',\n  'Create Account': 'Account erstellen',\n  'Creating Account': 'Account wird erstellt',\n  'Dismiss alert': 'Warnung verwerfen',\n  Email: 'Email',\n  'Enter your Birthdate': 'Geben Sie Ihr Geburtsdatum ein',\n  'Enter your code': 'Geben Sie Ihren Code ein',\n  'Enter your Confirmation Code': 'Geben Sie Ihren Bestätigungs-Code ein',\n  'Enter your Email': 'Geben Sie Ihre E-Mail ein',\n  'Enter your Family Name': 'Geben Sie Ihren Nachnamen ein',\n  'Enter your Given Name': 'Geben Sie Ihren Vornamen ein',\n  'Enter your Middle Name': 'Geben Sie Ihren zweiten Vornamen ein',\n  'Enter your Name': 'Geben Sie Ihren Namen ein',\n  'Enter your Nickname': 'Geben Sie Ihren Spitznamen ein',\n  'Enter your Password': 'Geben Sie Ihr Passwort ein',\n  'Enter your password': 'Geben Sie Ihr Passwort ein',\n  'Enter your email': 'Geben Sie Ihre e-mail ein',\n  'Enter your phone number': 'Geben Sie Ihre Telefonnummer ein',\n  'Enter your Preferred Username': 'Geben Sie Ihren bevorzugten Benutzernamen ein',\n  'Enter your username': 'Geben Sie Ihren Benutzernamen ein',\n  'Forgot password?': 'Passwort vergessen?',\n  'Forgot your password?': 'Passwort vergessen? ',\n  'Hide password': 'Passwort verbergen',\n  'It may take a minute to arrive': 'Es kann eine Minute dauern, bis er ankommt',\n  Loading: 'Wird geladen',\n  'New password': 'Neues Passwort',\n  or: 'oder',\n  Password: 'Passwort',\n  'Phone Number': 'Telefonnummer',\n  'Resend Code': 'Code erneut senden',\n  'Reset your Password': 'Zurücksetzen des Passworts',\n  'Reset your password': 'Zurücksetzen des passworts',\n  'Send code': 'Code senden',\n  'Send Code': 'Code senden',\n  Sending: 'Wird gesendet',\n  'Setup TOTP': 'TOTP einrichten',\n  'Show password': 'Passwort anzeigen',\n  'Sign in to your account': 'Melden Sie sich mit Ihrem Account an',\n  'Sign In with Amazon': 'Mit Amazon anmelden',\n  'Sign In with Apple': 'Mit Apple anmelden',\n  'Sign In with Facebook': 'Mit Facebook anmelden',\n  'Sign In with Google': 'Mit Google anmelden',\n  'Sign in': 'Anmelden',\n  'Sign In': 'Anmelden',\n  'Signing in': 'Wird angemeldet',\n  Skip: 'Überspringen',\n  Submit: 'Abschicken',\n  Submitting: 'Wird gesendet',\n  Username: 'Benutzername',\n  'Verify Contact': 'Kontakt verifizieren',\n  Verify: 'Verifizieren',\n  'We Emailed You': 'Email wurde versendet',\n  'We Sent A Code': 'Wir haben einen Code gesendet',\n  'We Texted You': 'Wir haben Ihnen eine SMS gesendet',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Ihr Bestätigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir per E-Mail verschickt haben',\n  'Your code is on the way. To log in, enter the code we sent you': 'Ihr Code ist unterwegs. Um sich anzumelden, geben Sie den Code ein, den wir Ihnen gesendet haben',\n  'Your code is on the way. To log in, enter the code we texted to': 'Ihr Bestätigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir per SMS verschickt haben',\n  // Additional translations provided by customers\n  'An account with the given email already exists.': 'Ein Account mit dieser Email existiert bereits.',\n  'Confirm a Code': 'Code bestätigen',\n  'Confirm Sign In': 'Anmeldung bestätigen',\n  'Create account': 'Hier registrieren',\n  'Sign Up with Facebook': 'Mit Facebook registrieren',\n  'Sign Up with Google': 'Mit Google registrieren',\n  'Forgot Password': 'Passwort vergessen',\n  'Have an account? ': 'Schon registriert? ',\n  'Incorrect username or password': 'Falscher Benutzername oder falsches Passwort',\n  'Invalid password format': 'Ungültiges Passwort-Format',\n  'Invalid phone number format': `Ungültiges Telefonummern-Format. Benutze eine Nummer im Format: +12345678900`,\n  'It may take a minute to arrive.': 'Es könnte eine Minute dauern, bis der Code eintrifft.',\n  'Lost your code? ': 'Code verloren? ',\n  'New Password': 'Neues Passwort',\n  'No account? ': 'Kein Account? ',\n  'Password attempts exceeded': 'Die maximale Anzahl der fehlerhaften Anmeldeversuche wurde erreicht',\n  'Reset password': 'Passwort zurücksetzen',\n  'Reset Password': 'Passwort Zurücksetzen',\n  'Sign Out': 'Abmelden',\n  'Sign Up': 'Registrieren',\n  'User already exists': 'Dieser Benutzer existiert bereits',\n  'User does not exist': 'Dieser Benutzer existiert nicht',\n  'Username cannot be empty': 'Benutzername darf nicht leer sein'\n};\nconst enDict$1 = {\n  'Account recovery requires verified contact information': 'Account recovery requires verified contact information',\n  'Add your Profile': 'Add your Profile',\n  'Add your Website': 'Add your Website',\n  'Back to Sign In': 'Back to Sign In',\n  'Change Password': 'Change Password',\n  Changing: 'Changing',\n  Code: 'Code',\n  'Confirm Password': 'Confirm Password',\n  'Confirm Sign Up': 'Confirm Sign Up',\n  'Confirm SMS Code': 'Confirm SMS Code',\n  'Confirm MFA Code': 'Confirm MFA Code',\n  'Confirm TOTP Code': 'Confirm TOTP Code',\n  Confirm: 'Confirm',\n  'Confirmation Code': 'Confirmation Code',\n  Confirming: 'Confirming',\n  'Create a new account': 'Create a new account',\n  'Create Account': 'Create Account',\n  'Creating Account': 'Creating Account',\n  'Dismiss alert': 'Dismiss alert',\n  Email: 'Email',\n  'Enter your Birthdate': 'Enter your Birthdate',\n  'Enter your code': 'Enter your code',\n  'Enter your Confirmation Code': 'Enter your Confirmation Code',\n  'Enter your Email': 'Enter your Email',\n  'Enter your Family Name': 'Enter your Family Name',\n  'Enter your Given Name': 'Enter your Given Name',\n  'Enter your Middle Name': 'Enter your Middle Name',\n  'Enter your Name': 'Enter your Name',\n  'Enter your Nickname': 'Enter your Nickname',\n  'Enter your Password': 'Enter your Password',\n  'Enter your phone number': 'Enter your phone number',\n  'Enter your Preferred Username': 'Enter your Preferred Username',\n  'Enter your username': 'Enter your username',\n  'Forgot password?': 'Forgot password?',\n  'Forgot your password?': 'Forgot your password?',\n  'Hide password': 'Hide password',\n  'It may take a minute to arrive': 'It may take a minute to arrive',\n  Loading: 'Loading',\n  'New password': 'New password',\n  or: 'or',\n  Password: 'Password',\n  'Phone Number': 'Phone Number',\n  'Please confirm your Password': 'Please confirm your Password',\n  'Resend Code': 'Resend Code',\n  'Reset your password': 'Reset your password',\n  'Reset your Password': 'Reset your Password',\n  'Send code': 'Send code',\n  'Send Code': 'Send Code',\n  Sending: 'Sending',\n  'Setup TOTP': 'Setup TOTP',\n  'Show password': 'Show password',\n  'Sign in to your account': 'Sign in to your account',\n  'Sign In with Amazon': 'Sign In with Amazon',\n  'Sign In with Apple': 'Sign In with Apple',\n  'Sign In with Facebook': 'Sign In with Facebook',\n  'Sign In with Google': 'Sign In with Google',\n  'Sign in': 'Sign in',\n  'Sign In': 'Sign In',\n  'Signing in': 'Signing in',\n  Skip: 'Skip',\n  Submit: 'Submit',\n  Submitting: 'Submitting',\n  Username: 'Username',\n  'Verify Contact': 'Verify Contact',\n  Verify: 'Verify',\n  'We Emailed You': 'We Emailed You',\n  'We Sent A Code': 'We Sent A Code',\n  'We Texted You': 'We Texted You',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Your code is on the way. To log in, enter the code we emailed to',\n  'Your code is on the way. To log in, enter the code we sent you': 'Your code is on the way. To log in, enter the code we sent you',\n  'Your code is on the way. To log in, enter the code we texted to': 'Your code is on the way. To log in, enter the code we texted to'\n};\nconst esDict$1 = {\n  'Account recovery requires verified contact information': 'La recuperación de la cuenta requiere información de contacto verificada',\n  'Back to Sign In': 'Volver a inicio de sesión',\n  'Change Password': 'Cambiar contraseña',\n  Changing: 'Cambiando',\n  Code: 'Código',\n  'Confirm Password': 'Confirmar contraseña',\n  'Confirm Sign Up': 'Confirmar registro',\n  'Confirm SMS Code': 'Confirmar el código de SMS',\n  'Confirm TOTP Code': 'Confirmar código TOTP',\n  Confirm: 'Confirmar',\n  'Confirmation Code': 'Código de confirmación',\n  Confirming: 'Confirmando',\n  'Create a new account': 'Crear una cuenta nueva',\n  'Create Account': 'Crear cuenta',\n  'Creating Account': 'Creando cuenta',\n  'Dismiss alert': 'Descartar alerta',\n  Email: 'Email',\n  'Enter your code': 'Ingrese el código',\n  'Enter your Email': 'Escriba su Email',\n  'Enter your Password': 'Escriba su Contraseña',\n  'Enter your phone number': 'Ingrese el número de teléfono',\n  'Enter your username': 'Ingrese el nombre de usuario',\n  'Forgot your password?': '¿Olvidó su contraseña?',\n  'Hide password': 'Ocultar contraseña',\n  'It may take a minute to arrive': 'Es posible que tarde un minuto en llegar',\n  Loading: 'Cargando',\n  'New password': 'Nueva contraseña',\n  or: 'o',\n  Password: 'Contraseña',\n  'Phone Number': 'Número de teléfono',\n  'Resend Code': 'Reenviar código',\n  'Reset your password': 'Restablecer su contraseña',\n  'Reset your Password': 'Restablecer su Contraseña',\n  'Send code': 'Enviar código',\n  'Send Code': 'Enviar código',\n  Sending: 'Enviando',\n  'Setup TOTP': 'Configurar TOTP',\n  'Show password': 'Mostrar contraseña',\n  'Sign in to your account': 'Iniciar sesión en tu cuenta',\n  'Sign In with Amazon': 'Iniciar Sesión con Amazon',\n  'Sign In with Apple': 'Iniciar Sesión con Apple',\n  'Sign In with Facebook': 'Iniciar Sesión con Facebook',\n  'Sign In with Google': 'Iniciar Sesión con Google',\n  'Sign in': 'Iniciar sesión',\n  'Sign In': 'Iniciar Sesión',\n  'Signing in': 'Iniciando sesión',\n  Skip: 'Omitir',\n  Submit: 'Enviar',\n  Submitting: 'Enviando',\n  Username: 'Nombre de usuario',\n  'Verify Contact': 'Verificar contacto',\n  Verify: 'Verificar',\n  'We Emailed You': 'Le hemos enviado un correo electrónico',\n  'We Sent A Code': 'Hemos enviado un código',\n  'We Texted You': 'Le hemos enviado un mensaje de texto',\n  'Your code is on the way. To log in, enter the code we emailed to': 'El código está en camino. Para iniciar sesión, escriba el código que hemos enviado por correo electrónico a',\n  'Your code is on the way. To log in, enter the code we sent you': 'El código está en camino. Para iniciar sesión, escriba el código que le hemos enviado',\n  'Your code is on the way. To log in, enter the code we texted to': 'El código está en camino. Para iniciar sesión, escriba el código que hemos enviado por mensaje de texto a',\n  // Additional translations provided by customers\n  'An account with the given email already exists.': 'Ya existe una cuenta con el correo ingresado.',\n  'Confirm a Code': 'Confirmar un código',\n  'Confirm Sign In': 'Confirmar inicio de sesión',\n  'Forgot Password': 'Olvidé mi contraseña',\n  'Incorrect username or password.': 'Nombre de usuario o contraseña incorrecta',\n  'Invalid password format': 'Formato de contraseña inválido',\n  'Invalid phone number format': 'Formato de número de teléfono inválido',\n  'Loading...': 'Cargando...',\n  'New Password': 'Nueva contraseña',\n  'Resend a Code': 'Reenviar un código',\n  'Sign Out': 'Cerrar sesión',\n  'Sign Up with Amazon': 'Crear cuenta con Amazon',\n  'Sign Up with Apple': 'Crear cuenta con Apple',\n  'Sign Up with Facebook': 'Crear cuenta con Facebook',\n  'Sign Up with Google': 'Crear cuenta con Google',\n  'Sign Up': 'Crear cuenta',\n  'User already exists': 'El usuario ya existe',\n  'User does not exist': 'El usuario no existe',\n  'Username cannot be empty': 'El nombre de usuario no puede estar vacío',\n  'Your passwords must match': 'Las contraseñas deben coincidir'\n};\nconst frDict$1 = {\n  'Account recovery requires verified contact information': 'La récupération du compte nécessite des informations de contact vérifiées',\n  'Back to Sign In': 'Retour à la connexion',\n  'Change Password': 'Modifier le mot de passe',\n  Changing: 'Modification en cours',\n  Code: 'Code',\n  'Confirm Password': 'Confirmez le mot de passe',\n  'Confirm Sign Up': \"Confirmer l'inscription\",\n  'Confirm SMS Code': 'Confirmer le code SMS',\n  'Confirm TOTP Code': 'Confirmer le code TOTP',\n  Confirm: 'Confirmer',\n  'Confirmation Code': 'Code de confirmation',\n  Confirming: 'Confirmation',\n  'Create a new account': 'Créer un nouveau compte',\n  'Create Account': 'Créer un compte',\n  'Creating Account': `Création d'un compte`,\n  'Dismiss alert': `Supprimer l'alerte`,\n  Email: 'Email',\n  'Enter your code': 'Saisissez cotre code de confirmation',\n  'Enter your Email': 'Saisissez votre adresse email',\n  'Enter your phone number': 'Saisissez votre numéro de téléphone',\n  'Enter your username': \"Saisissez votre nom d'utilisateur\",\n  'Forgot your password?': 'Mot de passe oublié ? ',\n  'Hide password': 'Masquer le mot de passe',\n  'It may take a minute to arrive': 'Cela peut prendre une minute',\n  Loading: 'Chargement en cours',\n  'New password': 'Nouveau mot de passe',\n  or: 'ou',\n  Password: 'Mot de passe',\n  'Phone Number': 'Numéro de téléphone',\n  'Resend Code': 'Renvoyer le code',\n  'Reset your Password': 'Réinitialiser votre mot de passe',\n  'Reset your password': 'Réinitialisez votre mot de passe',\n  'Send code': 'Envoyer le code',\n  'Send Code': \"M'envoyer un code\",\n  Sending: 'Envoi en cours',\n  'Setup TOTP': 'Configuration de TOTP',\n  'Show password': 'Afficher le mot de passe',\n  'Sign in to your account': 'Connexion à votre compte',\n  'Sign In with Amazon': 'Se connecter avec Amazon',\n  'Sign In with Apple': 'Se connecter avec Apple',\n  'Sign In with Facebook': 'Se connecter avec Facebook',\n  'Sign In with Google': 'Se connecter avec Google',\n  'Sign in': 'Se connecter',\n  'Sign In': 'Se connecter',\n  'Signing in': 'Connexion en cours',\n  Skip: 'Passer',\n  Submit: 'Soumettre',\n  Submitting: 'Envoi en cours',\n  Username: \"Nom d'utilisateur\",\n  'Verify Contact': 'Vérifier le contact',\n  Verify: 'Vérifier',\n  'We Sent A Code': 'Nous avons envoyé un code',\n  'We Texted You': 'Nous vous avons envoyé un SMS',\n  'Your code is on the way. To log in, enter the code we sent you': `Votre code est en cours d'envoi. Pour vous connecter, saisissez le code que nous vous avons envoyé`,\n  // Additional translations provided by customers\n  'Add your Profile': 'Ajoutez votre profil',\n  'Add your Website': 'Ajoutez votre site web',\n  'An account with the given email already exists.': 'Un utilisateur avec cette adresse email existe déjà.',\n  'Birthdate': 'Date de naissance',\n  Change: 'Modifier',\n  'Confirm a Code': 'Confirmer un code',\n  'Confirm Sign In': 'Confirmer la connexion',\n  'Create account': 'Créer un compte',\n  'Enter your Birthdate': 'Saisissez votre date de naissance',\n  'Enter your Confirmation Code': 'Saisissez votre code de confirmation',\n  'Enter your Family Name': 'Saisissez votre nom de famille',\n  'Enter your Given Name': 'Saisissez votre prénom',\n  'Enter your Middle Name': 'Saisissez votre deuxième prénom',\n  'Enter your Name': 'Saisissez votre nom',\n  'Enter your Nickname': 'Saisissez votre surnom',\n  'Enter your Password': 'Saisissez votre mot de passe',\n  'Enter your Phone Number': 'Saisissez votre numéro de téléphone',\n  'Enter your Preferred Username': \"Saisissez votre nom d'utilisateur\",\n  'Enter your password': 'Saisissez votre mot de passe',\n  'Family Name': 'Nom de famille',\n  'Forgot Password': 'Mot de passe oublié',\n  'Forgot Password?': 'Mot de passe oublié ?',\n  'Have an account? ': 'Déjà un compte ? ',\n  Hello: 'Bonjour',\n  'Incorrect username or password': 'Identifiant ou mot de passe incorrect',\n  'Invalid password format': 'Format de mot de passe invalide',\n  'Invalid phone number format': `Format de numéro de téléphone invalide. Veuillez utiliser un format +12345678900`,\n  'Loading...': 'Chargement...',\n  'Lost your code? ': 'Vous avez perdu votre code ? ',\n  'Network error': 'Erreur réseau',\n  'New Password': 'Nouveau mot de passe',\n  'Name': 'Nom',\n  'No account? ': 'Pas de compte ? ',\n  'Please confirm your Password': 'Confirmez votre mot de passe',\n  'Preferred Username': \"Nom d'utilisateur préféré\",\n  'Profile': 'Profil',\n  'Resend a Code': 'Renvoyer un code',\n  'Reset password': 'Réinitialisez votre mot de passe',\n  'Reset Password': 'Réinitialisez votre mot de passe',\n  Send: 'Envoyer',\n  'Sign In with AWS': 'Se connecter avec AWS',\n  'Sign Out': 'Déconnexion',\n  'Sign Up': \"S'inscrire\",\n  SMS: 'SMS',\n  'User already exists': \"L'utilisateur existe déjà\",\n  'User does not exist': \"L'utilisateur n'existe pas\",\n  'Username cannot be empty': \"Le nom d'utilisateur doit être renseigné\",\n  'Username/client id combination not found.': \"L'utilisateur n'existe pas\",\n  'We Emailed You': 'Nous vous avons envoyé un code',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Votre code est en route. Pour vous connecter entrez le code reçu sur cette adresse email',\n  'Your code is on the way. To log in, enter the code we texted to': 'Votre code est en route. Pour vous connecter entrez le code reçu sur ce numéro de téléphone',\n  'Your passwords must match': 'Vos mots de passe doivent être identiques',\n  'It may take a minute to arrive.': 'Cela peut prendre quelques minutes.',\n  'Website': 'Site web'\n};\nconst itDict$1 = {\n  'Account recovery requires verified contact information': \"Il ripristino dell'account richiede informazioni di contatto verificate\",\n  'Back to Sign In': 'Torna alla schermata di accesso',\n  'Change Password': 'Cambia la password',\n  Changing: 'Modifica in corso',\n  Code: 'Codice',\n  'Confirm Password': 'Conferma la password',\n  'Confirm Sign Up': 'Conferma registrazione',\n  'Confirm SMS Code': 'Conferma codice SMS',\n  'Confirm TOTP Code': 'Conferma codice TOTP',\n  Confirm: 'Conferma',\n  'Confirmation Code': 'Codice di verifica',\n  Confirming: 'Conferma in corso',\n  'Create a new account': 'Crea un nuovo account',\n  'Create Account': 'Crea Account',\n  'Creating Account': 'Creazione account in corso',\n  'Dismiss alert': `Ignora l'avviso`,\n  Email: 'Email',\n  'Enter your code': 'Inserisci il tuo codice',\n  'Enter your Email': 'Inserisci la tua e-mail',\n  'Enter your phone number': 'Inserisci il tuo numero di telefono\"',\n  'Enter your username': 'Inserisci il tuo nome utente',\n  'Forgot your password?': 'Password dimenticata?',\n  'Hide password': 'Nascondi password',\n  'It may take a minute to arrive': \"L'arrivo potrebbe richiedere qualche minuto\",\n  Loading: 'Caricamento in corso',\n  'New password': 'Nuova password',\n  or: 'oppure',\n  Password: 'Password',\n  'Phone Number': 'Numero di telefono',\n  'Resend Code': 'Invia nuovamente il codice',\n  'Reset your Password': 'Reimposta la tua Password',\n  'Reset your password': 'Reimposta la tua password',\n  'Send code': 'Invia codice',\n  'Send Code': 'Invia codice',\n  Sending: 'Invio in corso',\n  'Setup TOTP': 'Configura TOTP',\n  'Show password': 'Mostra password',\n  'Sign in to your account': 'Accedi al tuo account',\n  'Sign In with Amazon': 'Accedi con Amazon',\n  'Sign In with Apple': 'Accedi con Apple',\n  'Sign In with Facebook': 'Accedi con Facebook',\n  'Sign In with Google': 'Accedi con Google',\n  'Sign in': 'Accedi',\n  'Sign In': 'Accedi',\n  'Signing in': 'Accesso in corso',\n  Skip: 'Salta',\n  Submit: 'Invia',\n  Submitting: 'Invio in corso',\n  Username: 'Nome utente',\n  'Verify Contact': 'Verifica contatto',\n  Verify: 'Verifica',\n  'We Emailed You': \"Ti abbiamo inviato un'e-mail\",\n  'We Sent A Code': 'Ti abbiamo inviato un codice',\n  'We Texted You': 'Ti abbiamo inviato un SMS',\n  'Your code is on the way. To log in, enter the code we emailed to': \"Il codice è in arrivo. Per effettuare l'accesso, immetti il codice che ti abbiamo inviato via e-mail\",\n  'Your code is on the way. To log in, enter the code we sent you': 'Il codice è in arrivo. Per accedere, immetti il codice che ti abbiamo inviato',\n  'Your code is on the way. To log in, enter the code we texted to': 'Il codice è in arrivo. Per accedere, immetti il codice che abbiamo inviato tramite SMS',\n  // Additional translations provided by customers\n  'An account with the given email already exists.': 'Questa email è già utilizzata da un altro account.',\n  'Confirm a Code': 'Conferma un codice',\n  'Confirm Sign In': \"Conferma l'accesso\",\n  'Create account': 'Crea account',\n  'Enter your password': 'Inserisci la tua password',\n  'Forgot Password?': 'Password dimenticata?',\n  'Have an account? ': 'Già registrato?',\n  'Incorrect username or password': 'Nome utente o password errati',\n  'Invalid password format': 'Formato della password non valido',\n  'Invalid phone number format': 'Formato del numero di telefono non valido',\n  'Lost your code?': 'Codice smarrito?',\n  'New Password': 'Nuova password',\n  'No account? ': 'Non hai un account?',\n  'Password attempts exceeded': 'Il numero massimo di tentativi di accesso falliti è stato raggiunto',\n  'Reset password': 'Reimposta password',\n  'Sign Out': 'Esci',\n  'Sign Up': 'Registrati',\n  'User already exists': 'Utente già esistente',\n  'User does not exist': 'Utente inesistente',\n  'Username cannot be empty': 'Il nome utente non può essere vuoto'\n};\nconst jaDict$1 = {\n  'Account recovery requires verified contact information': 'アカウントの復旧には確認済みの連絡先が必要です',\n  'Back to Sign In': 'サインインに戻る',\n  'Change Password': 'パスワードを変える ',\n  Changing: '変更中',\n  Code: 'コード',\n  'Confirm Password': 'パスワードの確認',\n  'Confirm Sign Up': '登録する',\n  'Confirm SMS Code': 'SMS コードを確認',\n  'Confirm TOTP Code': 'TOTP コードを確認',\n  Confirm: '確定',\n  'Confirmation Code': '確認コード',\n  Confirming: '確認中',\n  'Create a new account': '新しいアカウントを作る',\n  'Create Account': 'アカウントを作る',\n  'Creating Account': 'アカウントの作成中',\n  'Dismiss alert': 'アラートを閉じる',\n  Email: 'メールアドレス',\n  'Enter your code': 'コードを入力',\n  'Enter your Email': 'メールアドレスを入力',\n  'Enter your phone number': '電話番号を入力',\n  'Enter your username': 'ユーザー名を入力 ',\n  'Enter your Username': 'ユーザー名を入力 ',\n  'Forgot your password?': 'パスワードを忘れましたか？ ',\n  'Hide password': 'パスワードを非表示',\n  'It may take a minute to arrive': '到着するまでに 1 分かかることがあります。',\n  Loading: 'ロード中',\n  'New password': '新しいパスワード',\n  or: '又は',\n  Password: 'パスワード ',\n  'Phone Number': '電話番号',\n  'Resend Code': 'コードを再送信',\n  'Reset your Password': 'パスワードをリセット',\n  'Reset your password': 'パスワードをリセットする',\n  'Send code': 'コードを送信',\n  'Send Code': 'コードを送信',\n  Sending: '送信中',\n  'Setup TOTP': 'TOTP をセットアップ',\n  'Show password': 'パスワードを表示',\n  'Sign in to your account': 'アカウントにサインイン ',\n  'Sign In with Amazon': 'Amazonでサインイン',\n  'Sign In with Apple': 'Apple でサインイン',\n  'Sign In with Facebook': 'Facebookでサインイン',\n  'Sign In with Google': 'Googleでサインイン',\n  'Sign In': 'サインイン ',\n  'Sign in': 'サインイン',\n  'Signing in': 'サインイン中',\n  Skip: 'スキップ',\n  Submit: '送信',\n  Submitting: '送信中',\n  Username: 'ユーザー名 ',\n  'Verify Contact': '連絡先を確認',\n  Verify: '確認',\n  'We Sent A Code': 'コードが送信されました',\n  'We Texted You': 'テキストが送信されました',\n  'Your code is on the way. To log in, enter the code we sent you': 'コードが途中です。ログインするには、送信したコードを入力してください。',\n  // Additional translations provided by customers\n  'An account with the given email already exists.': '入力されたメールアドレスのアカウントが既に存在します',\n  'Confirm a Code': 'コードを確認',\n  'Confirm Sign In': 'サインインする',\n  'Create account': 'アカウントを作る ',\n  'Enter your password': 'パスワードを入力 ',\n  'Enter your Password': 'パスワードを入力',\n  'Please confirm your Password': 'パスワードを入力',\n  'Forgot Password': 'パスワードを忘れた ',\n  'Have an account? ': 'アカウントを持っていますか？',\n  'Incorrect username or password': 'ユーザー名かパスワードが異なります ',\n  'Invalid password format': 'パスワードの形式が無効です ',\n  'Invalid phone number format': '不正な電話番号の形式です。\\n+12345678900 の形式で入力してください',\n  'It may take a minute to arrive.': 'コードを受信するまで数分かかる場合があります。',\n  'Lost your code? ': 'コードを失くしましたか？',\n  'New Password': '新しいパスワード',\n  'No account? ': 'アカウントが無いとき ',\n  'Password attempts exceeded': 'サインインの試行回数が上限に達しました',\n  'Reset password': 'パスワードをリセット ',\n  'Reset Password': 'パスワードをリセット',\n  'Sign Out': 'サインアウト ',\n  'Sign Up': '登録 ',\n  'User already exists': '既にユーザーが存在しています ',\n  'User does not exist': 'ユーザーが存在しません ',\n  'Username cannot be empty': 'ユーザー名は入力必須です',\n  'We Emailed You': 'コードを送信しました',\n  'Your code is on the way. To log in, enter the code we emailed to': 'ログインするには、メールに記載されたコードを入力してください。送信先:',\n  'Your code is on the way. To log in, enter the code we texted to': 'ログインするには、テキストメッセージに記載されたコードを入力してください。送信先:'\n};\nconst krDict$1 = {\n  'Account recovery requires verified contact information': '계정 복구를 위해 연락처 확인이 필요합니다',\n  'Back to Sign In': '로그인으로 돌아가기',\n  'Change Password': '비밀번호 변경하기',\n  Changing: '변경중',\n  Code: '코드',\n  'Confirm Password': '비밀번호 재확인',\n  'Confirm Sign Up': '회원가입 확인',\n  'Confirm SMS Code': '휴대폰 본인 확인',\n  'Confirm TOTP Code': 'TOTP 인증번호 확인',\n  Confirm: '확인',\n  'Confirmation Code': '인증번호',\n  Confirming: '확인중',\n  'Create a new account': '회원가입',\n  'Create Account': '회원가입',\n  'Creating Account': '회원가입중',\n  'Dismiss alert': '알림 무시',\n  Email: '이메일',\n  'Enter your code': '인증번호를 입력해주세요',\n  'Enter your Email': '이메일 입력',\n  'Enter your phone number': '전화번호 입력',\n  'Enter your username': '아이디를 입력해주세요',\n  'Hide password': '비밀번호 숨기기',\n  'It may take a minute to arrive': '도착하는 데 1분 정도 걸릴 수 있습니다',\n  Loading: '로딩중',\n  'New password': '새 비밀번호',\n  or: '또는',\n  Password: '비밀번호',\n  'Phone Number': '전화번호',\n  'Resend Code': '인증번호 재전송',\n  'Reset your password': '비밀번호 재설정',\n  'Reset your Password': '비밀번호 재설정',\n  'Send code': '인증코드 보내기',\n  'Send Code': '코드 전송',\n  Sending: '전송중',\n  'Setup TOTP': 'TOTP 설정하기',\n  'Show password': '비밀번호 보이기',\n  'Sign in to your account': '로그인',\n  'Sign In with Amazon': 'Amazon 로그인',\n  'Sign In with Apple': 'Apple 로그인',\n  'Sign In with Facebook': 'Facebook 로그인',\n  'Sign In with Google': 'Google 로그인',\n  'Sign in': '로그인',\n  'Sign In': '로그인',\n  'Signing in': '로그인중',\n  Skip: '다음에 하기',\n  Submit: '확인',\n  Submitting: '확인중',\n  Username: '아이디',\n  'Verify Contact': '연락처 확인',\n  Verify: '인증',\n  'We Emailed You': '이메일을 보냄',\n  'We Sent A Code': '코드를 보냄',\n  'We Texted You': '문자 메시지를 보냄',\n  'Your code is on the way. To log in, enter the code we emailed to': '코드가 전송 중입니다. 로그인하려면 이메일로 전송한 코드를 입력하세요',\n  'Your code is on the way. To log in, enter the code we sent you': '코드가 전송 중입니다. 로그인하려면 전송한 코드를 입력하세요',\n  'Your code is on the way. To log in, enter the code we texted to': '코드가 전송 중입니다. 로그인하려면 문자 메시지로 전송한 코드를 입력하세요',\n  // Additional translations provided by customers\n  Birthdate: '생년월일',\n  'Family Name': '성',\n  'Forgot your password?': '비밀번호를 잊으셨나요?',\n  'Given Name': '이름',\n  Name: '성함',\n  Nickname: '닉네임',\n  'Preferred Username': '닉네임',\n  Profile: '프로필',\n  'Reset Password': '비밀번호 재설정',\n  Website: '웹사이트'\n};\nconst nbDict$1 = {\n  'Account recovery requires verified contact information': 'Gjenoppretting av konto krever verifisert kontaktinformajson',\n  'Add your Profile': 'Legg til profilen din',\n  'Add your Website': 'Legg til nettsiden din',\n  'Back to Sign In': 'Tilbake til innlogging',\n  'Change Password': 'Bytt passord',\n  Changing: 'Endre',\n  Code: 'Kode',\n  'Confirm Password': 'Bekreft passordet',\n  'Confirm Sign Up': 'Bekreft registrering',\n  'Confirm SMS Code': 'Bekreft SMS-kode',\n  'Confirm TOTP Code': 'Bekreft TOTP-kode',\n  Confirm: 'Bekreft',\n  'Confirmation Code': 'Bekreftelseskode',\n  Confirming: 'Bekrefter',\n  'Create a new account': 'Opprett en ny konto',\n  'Create Account': 'Opprett konto',\n  'Creating Account': 'Oppretter konto',\n  'Dismiss alert': 'Avvis varsel',\n  Email: 'E-post',\n  'Enter your Birthdate': 'Skriv inn fødselsdatoen din',\n  'Enter your code': 'Skriv inn koden din',\n  'Enter your Confirmation Code': 'Skriv inn bekreftelseskoden din',\n  'Enter your Email': 'Skriv inn e-postadressen din',\n  'Enter your Family Name': 'Skriv inn etternavnet ditt',\n  'Enter your Given Name': 'Skriv inn fornavnet ditt',\n  'Enter your Middle Name': 'Skriv inn mellomnavnet ditt',\n  'Enter your Name': 'Skriv inn navnet ditt',\n  'Enter your Nickname': 'Skriv inn kallenavnet ditt',\n  'Enter your Password': 'Skriv inn passordet ditt',\n  'Enter your phone number': 'Skriv inn telefonnummeret ditt',\n  'Enter your Preferred Username': 'Skriv inn det foretrukne brukernavnet ditt',\n  'Enter your username': 'Skriv inn brukernavnet ditt',\n  'Forgot password?': 'Glemt passord?',\n  'Forgot your password?': 'Glemt passordet ditt?',\n  'Hide password': 'Skjul passordet',\n  'It may take a minute to arrive': 'Det kan ta et minutt for å komme frem',\n  Loading: 'Laster inn',\n  'New password': 'Nytt passord',\n  or: 'eller',\n  Password: 'Passord',\n  'Phone Number': 'Telefonnummer',\n  'Please confirm your Password': 'Vennligst bekreft passordet ditt',\n  'Resend Code': 'Send koden på nytt',\n  'Reset your password': 'Nullstill passordet ditt',\n  'Reset your Password': 'Nullstill passordet ditt',\n  'Send code': 'Send kode',\n  'Send Code': 'Send kode',\n  Sending: 'Sender',\n  'Setup TOTP': 'Konfigurer TOTP',\n  'Show password': 'Vis passordet',\n  'Sign in to your account': 'Logg inn på kontoen din',\n  'Sign In with Amazon': 'Logg inn med Amazon',\n  'Sign In with Apple': 'Logg inn med Apple',\n  'Sign In with Facebook': 'Logg inn med Facebook',\n  'Sign In with Google': 'Logg inn med Google',\n  'Sign in': 'Logg inn',\n  'Sign In': 'Logg inn',\n  'Signing in': 'Logger inn',\n  Skip: 'Hopp over',\n  Submit: 'Send inn',\n  Submitting: 'Sender inn',\n  Username: 'Brukernavn',\n  'Verify Contact': 'Bekreft kontakt',\n  Verify: 'Bekreft',\n  'We Emailed You': 'Vi sendte deg en e-post',\n  'We Sent A Code': 'Vi sendte en kode',\n  'We Texted You': 'Vi sendte deg en tekstmelding',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Koden din er på vei. For å logge inn, skriv inn koden vi sendte e-post til',\n  'Your code is on the way. To log in, enter the code we sent you': 'Koden din er på vei. For å logge inn, skriv inn koden vi sendte deg',\n  'Your code is on the way. To log in, enter the code we texted to': 'Koden din er på vei. For å logge inn, skriv inn koden vi sendte tekstmelding til',\n  // Additional translations provided by customers\n  'An account with the given email already exists.': 'Det finnes allerede en konto med denne e-postadressen',\n  'Confirm a Code': 'Bekreft koden',\n  'Confirm Sign In': 'Bekreft innlogging',\n  'Create account': 'Opprett konto',\n  'Enter your password': 'Skriv inn passordet ditt',\n  'Forgot Password': 'Glemt passordet',\n  'Have an account? ': 'Har en konto allerede? ',\n  'Incorrect username or password': 'Feil brukernavn eller passord',\n  'Invalid password format': 'Ugyldig passordformat',\n  'Invalid phone number format': 'Ugyldig telefonnummerformat',\n  'Lost your code? ': 'Mistet koden? ',\n  'New Password': 'Nytt passord',\n  'No account? ': 'Ingen konto? ',\n  'Password attempts exceeded': 'For mange mislykkede passordforsøk',\n  'Reset password': 'Nullstill passord',\n  'Sign Out': 'Logg ut',\n  'Sign Up': 'Registrering',\n  'User already exists': 'Brukeren finnes allerede',\n  'User does not exist': 'Brukeren finnes ikke',\n  'Username cannot be empty': 'Brukernavnet kan ikke være tomt'\n};\nconst nlDict$1 = {\n  'Account recovery requires verified contact information': 'Accountherstel vereist geverifieerde contactgegevens',\n  'Back to Sign In': 'Terug naar inloggen',\n  'Change Password': 'Wachtwoord wijzigen',\n  Changing: 'Wordt aangepast',\n  Code: 'Code',\n  'Confirm Password': 'Bevestig Wachtwoord',\n  'Confirm Sign Up': 'Bevestig inschrijving',\n  'Confirm SMS Code': 'Bevestig SMS Code',\n  'Confirm TOTP Code': 'Bevestig TOTP Code',\n  Confirm: 'Bevestig',\n  'Confirmation Code': 'Bevestigingscode',\n  Confirming: 'Bevestigen',\n  'Create a new account': 'Nieuw account aanmaken',\n  'Create Account': 'Account aanmaken',\n  'Creating Account': 'Account wordt aangemaakt',\n  'Dismiss alert': 'Waarschuwing sluiten',\n  Email: 'E-mail',\n  'Enter your code': 'Vul je code in',\n  'Enter your Email': 'Vul je e-mail in',\n  'Enter your Password': 'Vul je wachtwoord in',\n  'Enter your phone number': 'Vul je telefoonnummer in',\n  'Enter your username': 'Vul je gebruikersnaam in',\n  'Enter your Username': 'Vul je gebruikersnaam in',\n  'Forgot your password?': 'Wachtwoord vergeten? ',\n  'Hide password': 'Verberg wachtwoord',\n  'It may take a minute to arrive': 'Het kan even duren voordat deze aankomt',\n  Loading: 'Laden',\n  'New password': 'Nieuw wachtwoord',\n  'New Password': 'Nieuw Wachtwoord',\n  or: 'of',\n  Password: 'Wachtwoord',\n  'Phone Number': 'Telefoonnummer',\n  'Please confirm your Password': 'Bevestig je wachtwoord',\n  'Resend Code': 'Verstuur code nogmaals',\n  'Reset Password': 'Wachtwoord resetten',\n  'Reset your password': 'Reset je wachtwoord',\n  'Reset your Password': 'Wachtwoord resetten',\n  'Send code': 'Verstuur code',\n  'Send Code': 'Verstuur Code',\n  Sending: 'Versturen',\n  'Setup TOTP': 'TOTP Instellingen',\n  'Show password': 'Toon wachtwoord',\n  'Sign in to your account': 'Inloggen op je account',\n  'Sign In with Amazon': 'Inloggen met Amazon',\n  'Sign In with Apple': 'Inloggen met Apple',\n  'Sign In with Facebook': 'Inloggen met Facebook',\n  'Sign In with Google': 'Inloggen met Google',\n  'Sign in': 'Inloggen',\n  'Sign In': 'Inloggen',\n  'Signing in': 'Inloggen',\n  Skip: 'Overslaan',\n  Submit: 'Versturen',\n  Submitting: 'Wordt verstuurd',\n  Username: 'Gebruikersnaam',\n  'Verify Contact': 'Verifieer Contact',\n  Verify: 'Verifieer',\n  'We Emailed You': 'We hebben u een e-mail gestuurd',\n  'We Sent A Code': 'We hebben een code gestuurd',\n  'We Texted You': 'We hebben u een sms gestuurd',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Uw code is onderweg. Om in te loggen, voer de code in die we gemaild hebben naar',\n  'Your code is on the way. To log in, enter the code we sent you': 'Uw code is onderweg. Om in te loggen, voer de code in die we u hebben gestuurd',\n  'Your code is on the way. To log in, enter the code we texted to': 'Uw code is onderweg. Om in te loggen, voer de code in die we hebben gestuurd naar',\n  'Your passwords must match': 'Je wachtwoorden moeten overeenkomen'\n};\nconst plDict$1 = {\n  'Account recovery requires verified contact information': 'Odzyskanie konta wymaga zweryfikowanych danych kontaktowych',\n  'Back to Sign In': 'Powrót do logowania',\n  'Change Password': 'Zmień hasło',\n  Changing: 'Zmienianie',\n  Code: 'Kod',\n  'Confirm Password': 'Potwierdź Hasło',\n  'Confirm Sign Up': 'Potwierdź rejestrację',\n  'Confirm SMS Code': 'Potwierdź kod SMS',\n  'Confirm TOTP Code': 'Potwierdź hasło jednorazowe',\n  Confirm: 'Potwierdź',\n  'Confirmation Code': 'Kod potwierdzenia',\n  Confirming: 'Potwierdzanie',\n  'Create a new account': 'Utwórz nowe konto',\n  'Create Account': 'Utwórz konto',\n  'Creating Account': 'Tworzenie konta',\n  'Dismiss alert': 'Odrzuć alert',\n  Email: 'E-mail',\n  'Enter your code': 'Wprowadź swój kod',\n  'Enter your Email': 'Wpisz swój adres e-mail',\n  'Enter your phone number': 'Wpisz swój numer telefonu',\n  'Enter your username': 'Wprowadź swoją nazwę użytkownika',\n  'Forgot your password?': 'Zapomniałeś hasła? ',\n  'Hide password': 'Ukryj hasło',\n  'It may take a minute to arrive': 'Może to chwilę potrwać',\n  Loading: 'Ładowanie',\n  'New password': 'Nowe hasło',\n  or: 'albo',\n  Password: 'Hasło',\n  'Phone Number': 'Numer telefonu',\n  'Resend Code': 'Wyślij kod ponownie',\n  'Reset your password': 'Zresetuj swoje hasło',\n  'Reset your Password': 'Zresetuj swoje hasło',\n  'Send code': 'Wyślij kod',\n  'Send Code': 'Zresetuj hasło',\n  Sending: 'Wysyłanie',\n  'Setup TOTP': 'Konfiguruj TOTP',\n  'Show password': 'Pokaż hasło',\n  'Sign in to your account': 'Zaloguj się na swoje konto',\n  'Sign In with Amazon': 'Zaloguj z Amazon',\n  'Sign In with Apple': 'Zaloguj z Apple',\n  'Sign In with Facebook': 'Zaloguj z Facebook',\n  'Sign In with Google': 'Zaloguj z Google',\n  'Sign In': 'Logowanie',\n  'Sign in': 'Zaloguj',\n  'Signing in': 'Logowanie',\n  Skip: 'Pomiń',\n  Submit: 'Wyślij',\n  Submitting: 'Wysyłanie',\n  Username: 'Nazwa użytkownika',\n  'Verify Contact': 'Weryfikacja danych kontaktowych',\n  Verify: 'Zweryfikuj',\n  // Additional translations provided by customers\n  Birthdate: 'Data urodzenia',\n  'Family Name': 'Nazwisko',\n  'Given Name': 'Pierwsze imię',\n  'Middle Name': 'Drugie imię',\n  Name: 'Imię i nazwisko',\n  Nickname: 'Pseudonim',\n  'Preferred Username': 'Preferowana nazwa użytkownika',\n  Profile: 'Profil',\n  Website: 'Strona internetowa',\n  'We Emailed You': 'Wysłaliśmy Ci wiadomość e-mail',\n  'We Sent A Code': 'Wysłaliśmy kod',\n  'We Texted You': 'Wysłaliśmy Ci wiadomość SMS',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Twój kod został wysłany. Aby się zalogować, wprowadź kod wysłany na adres e-mail',\n  'Your code is on the way. To log in, enter the code we sent you': 'Twój kod został wysłany. Aby się zalogować, wprowadź wysłany do Ciebie kod',\n  'Your code is on the way. To log in, enter the code we texted to': 'Twój kod został wysłany. Aby się zalogować, wprowadź kod wysłany do Ciebie w wiadomości SMS pod numer'\n};\nconst ptDict$1 = {\n  'Account recovery requires verified contact information': 'A recuperação da conta requer informações de contato verificadas',\n  'Add your Profile': 'Adicione seu Perfil',\n  'Add your Website': 'Adicione seu Website',\n  'Back to Sign In': 'Voltar para Entrar',\n  'Change Password': 'Mudar senha',\n  Changing: 'Mudando',\n  Code: 'Código',\n  'Confirm Password': 'Confirme a Senha',\n  'Confirm Sign Up': 'Confirmar inscrição',\n  'Confirm SMS Code': 'Confirme o código SMS',\n  'Confirm MFA Code': 'Confirme o código MFA',\n  'Confirm TOTP Code': 'Confirme o código TOTP',\n  Confirm: 'confirme',\n  'Confirmation Code': 'Código de confirmação',\n  Confirming: 'Confirmando',\n  'Create a new account': 'Criar uma nova conta',\n  'Create Account': 'Criar Conta',\n  'Creating Account': 'Criando conta',\n  'Dismiss alert': 'Descartar alerta',\n  Email: 'O email',\n  'Enter your Birthdate': 'Digite sua Data de Nascimento',\n  'Enter your code': 'Insira seu código',\n  'Enter your Confirmation Code': 'Digite seu código de confirmação',\n  'Enter your Email': 'Digite seu e-mail',\n  'Enter your Family Name': 'Digite seu Sobrenome',\n  'Enter your Given Name': 'Digite seu Primeiro Nome',\n  'Enter your Middle Name': 'Digite seu Nome do Meio',\n  'Enter your Name': 'Digite seu Nome',\n  'Enter your Nickname': 'Digite seu Apelido',\n  'Enter your Password': 'Digite sua senha',\n  'Enter your phone number': 'Digite seu número de telefone',\n  'Enter your Preferred Username': 'Digite seu nome de usuário preferido',\n  'Enter your username': 'Digite seu nome de usuário',\n  'Forgot password?': 'Esqueceu a senha?',\n  'Forgot your password?': 'Esqueceu sua senha?',\n  'Hide password': 'Esconder a senha',\n  'It may take a minute to arrive': 'Pode levar um minuto para chegar',\n  Loading: 'Carregando',\n  'New password': 'Nova Senha',\n  or: 'ou',\n  Password: 'Senha',\n  'Phone Number': 'Número de telefone',\n  'Please confirm your Password': 'Por favor confirme sua Senha',\n  'Resend Code': 'Reenviar código',\n  'Reset your password': 'Redefina sua senha',\n  'Reset your Password': 'Redefina sua senha',\n  'Send code': 'Enviar código',\n  'Send Code': 'Enviar código',\n  Sending: 'Enviando',\n  'Setup TOTP': 'Configurar TOTP',\n  'Show password': 'Mostrar senha',\n  'Sign in to your account': 'Faça login em sua conta',\n  'Sign In with Amazon': 'Entrar com a Amazon',\n  'Sign In with Apple': 'Entrar com a Apple',\n  'Sign In with Facebook': 'Entrar com o Facebook',\n  'Sign In with Google': 'Faça login no Google',\n  'Sign in': 'Entrar',\n  'Sign In': 'Entrar',\n  'Signing in': 'Entrando',\n  Skip: 'Pular',\n  Submit: 'Enviar',\n  Submitting: 'Enviando',\n  Username: 'Nome do usuário',\n  'Verify Contact': 'Verificar contato',\n  Verify: 'Verificar',\n  'We Emailed You': 'Enviamos um e-mail para você',\n  'We Sent A Code': 'Enviamos um código',\n  'We Texted You': 'Enviamos um SMS para você',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Seu código está a caminho. Para fazer login, insira o código para o qual enviamos um e-mail',\n  'Your code is on the way. To log in, enter the code we sent you': 'Seu código está a caminho. Para fazer login, insira o código que enviamos para você',\n  'Your code is on the way. To log in, enter the code we texted to': 'Seu código está a caminho. Para fazer login, insira o código para o qual enviamos uma mensagem de texto',\n  // Additional translations provided by customers\n  'An account with the given email already exists.': 'Já existe uma conta com o email utilizado.',\n  'Confirm a Code': 'Confirmar um Código',\n  'Confirm Sign In': 'Confirmar Início de Sessão',\n  'Forgot Password': 'Esqueci Minha Senha',\n  'Incorrect username or password.': 'Nome de usuário ou senha incorreta',\n  'Invalid password format': 'Formato de senha inválido',\n  'Invalid phone number format': 'Formato de número de telefone inválido',\n  'Loading...': 'Carregando...',\n  'New Password': 'Nova Senha',\n  'Resend a Code': 'Reenviar um Código',\n  'Sign Out': 'Sair',\n  'Sign Up with Amazon': 'Criar Conta com a Amazon',\n  'Sign Up with Apple': 'Criar Conta com a Apple',\n  'Sign Up with Facebook': 'Criar Conta com o Facebook',\n  'Sign Up with Google': 'Criar Conta com o Google',\n  'Sign Up': 'Criar Conta',\n  'User already exists': 'Usuário já existe',\n  'User does not exist': 'Usuário não existe',\n  'Username cannot be empty': 'Nome de usuário não pode estar vazio',\n  'Your passwords must match': 'Suas senhas devem ser iguais'\n};\nconst zhDict$1 = {\n  'Account recovery requires verified contact information': '账户恢复需要验证过的联系方式',\n  'Back to Sign In': '回到登录',\n  'Change Password': '更改密码',\n  Changing: '正在修改',\n  Code: '确认码',\n  'Confirm Password': '确认密码',\n  'Confirm Sign Up': '确认注册',\n  'Confirm SMS Code': '确认短信验证码',\n  'Confirm TOTP Code': '确认 TOTP 代码',\n  Confirm: '确认',\n  'Confirmation Code': '确认码',\n  Confirming: '正在确认',\n  'Create a new account': '创建新账户',\n  'Create Account': '创建账户',\n  'Creating Account': '正在创建账户',\n  'Dismiss alert': '关闭警报',\n  Email: '邮箱',\n  'Enter your code': '输入验证码',\n  'Enter your Email': '输入电子邮件',\n  'Enter your phone number': '输入电话号码',\n  'Enter your username': '输入用户名',\n  'Forgot your password?': '忘记密码了？',\n  'Hide password': '隐藏密码',\n  'It may take a minute to arrive': '可能需要一分钟才能到达',\n  Loading: '正在加载',\n  'New password': '新密码',\n  or: '或者',\n  Password: '密码',\n  'Phone Number': '电话',\n  'Resend Code': '重发验证码',\n  'Reset your password': '重置密码',\n  'Reset your Password': '重置密码',\n  'Send Code': '发送确认码',\n  'Send code': '发送验证码',\n  Sending: '正在发送',\n  'Setup TOTP': '设置 TOTP',\n  'Show password': '显示密码',\n  'Sign in to your account': '登录账户',\n  'Sign In with Amazon': '通过 Amazon 登录',\n  'Sign In with Apple': '通过 Apple 登录',\n  'Sign In with Facebook': '通过 Facebook 登录',\n  'Sign In with Google': '通过 Google 登录',\n  'Sign in': '登录',\n  'Sign In': '登录',\n  'Signing in': '正在登录',\n  Skip: '跳过',\n  Submit: '提交',\n  Submitting: '正在提交',\n  Username: '用户名',\n  'Verify Contact': '验证联系方式',\n  Verify: '验证',\n  'We Emailed You': '我们给您发送了电子邮件',\n  'We Sent A Code': '我们发送了代码',\n  'We Texted You': '我们给您发送了短信',\n  'Your code is on the way. To log in, enter the code we emailed to': '您的代码正在发送中。要登录，请输入我们通过电子邮件发送给以下人员的代码：',\n  'Your code is on the way. To log in, enter the code we sent you': '您的代码正在发送中。要登录，请输入我们发送给您的代码',\n  'Your code is on the way. To log in, enter the code we texted to': '您的代码正在发送中。要登录，请输入我们通过短信发送给以下人员的代码：',\n  // Additional translations provided by customers\n  'Confirm a Code': '确认码',\n  'Confirm Sign In': '确认登录',\n  'Forgot Password': '忘记密码',\n  'Incorrect username or password': '用户名或密码错误',\n  'Invalid password format': '密码格式错误',\n  'Invalid phone number format': '电话格式错误，请使用格式 +12345678900',\n  'New Password': '新密码',\n  'Resend a Code': '重发确认码',\n  'Sign Out': '退出',\n  'Sign Up': '注册',\n  'User already exists': '用户已经存在',\n  'User does not exist': '用户不存在'\n};\nconst svDict$1 = {\n  'Account recovery requires verified contact information': 'För att återställa kontot behöver du ett verifierat konto',\n  'Back to Sign In': 'Tillbaka till inloggningen',\n  'Change Password': 'Byt lösenord',\n  Changing: 'Ändra',\n  Code: 'Kod',\n  'Confirm Password': 'Bekräfta lösenord',\n  'Confirm Sign Up': 'Bekräfta registrering',\n  'Confirm SMS Code': 'Bekräfta SMS-kod',\n  'Confirm TOTP Code': 'Bekräfta TOTP-kod',\n  Confirm: 'Bekräfta',\n  'Confirmation Code': 'Verifikationskod',\n  Confirming: 'Bekräftar',\n  'Create a new account': 'Skapa ett nytt konto',\n  'Create Account': 'Skapa konto',\n  'Creating Account': 'Skapar konto',\n  'Dismiss alert': 'Avvisa varning',\n  Email: 'E-post',\n  'Enter your code': 'Skriv din kod',\n  'Enter your Email': 'Fyll i din e-post',\n  'Enter your phone number': 'Ange ditt telefonnummer',\n  'Enter your username': 'Ange ditt användarnamn',\n  'Forgot your password?': 'Glömt ditt lösenord? ',\n  'Hide password': 'Dölj lösenord',\n  'It may take a minute to arrive': 'Det kan ta en minut att komma fram',\n  Loading: 'Laddar',\n  'New password': 'Nytt lösenord',\n  or: 'eller',\n  Password: 'Lösenord',\n  'Phone Number': 'Telefonnummer',\n  'Resend Code': 'Skicka koden igen',\n  'Reset your password': 'Återställ ditt lösenord',\n  'Reset your Password': 'Återställ ditt lösenord',\n  'Send code': 'Skicka kod',\n  'Send Code': 'Skicka kod',\n  Sending: 'Skickar',\n  'Setup TOTP': 'Konfigurera TOTP',\n  'Show password': 'Visa lösenord',\n  'Sign in to your account': 'Logga in till ditt konto',\n  'Sign In with Amazon': 'Logga in med Amazon',\n  'Sign In with Apple': 'Logga in med Apple',\n  'Sign In with Facebook': 'Logga in med Facebook',\n  'Sign In with Google': 'Logga in med Google',\n  'Sign in': 'Logga in',\n  'Sign In': 'Logga in',\n  'Signing in': 'Loggar in',\n  Skip: 'Hoppa över',\n  Submit: 'Skicka',\n  Submitting: 'Skickar in',\n  Username: 'Användarnamn',\n  'Verify Contact': 'Verifiera kontakt',\n  Verify: 'Verifiera',\n  'We Sent A Code': 'Vi skickade en kod',\n  'We Texted You': 'Vi sms:ade dig',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Din kod är på väg. För att logga in, ange koden vi mejlade till',\n  'Your code is on the way. To log in, enter the code we sent you': 'Din kod är på väg. För att logga in, ange koden vi skickade till dig',\n  'Your code is on the way. To log in, enter the code we texted to': 'Din kod är på väg. För att logga in, ange koden vi sms:ade till',\n  // Additional translations provided by customers\n  'An account with the given email already exists.': 'Det finns redan ett konto med denna e-postadress',\n  'Confirm a Code': 'Bekräfta koden',\n  'Confirm Sign In': 'Bekräfta inloggning',\n  'Create account': 'Skapa konto',\n  'Enter your password': 'Ange ditt lösenord',\n  'Forgot Password': 'Glömt lösenordet',\n  'Have an account? ': 'Redan registrerad? ',\n  'Incorrect username or password': 'Felaktigt användarnamn eller lösenord',\n  'Invalid password format': 'Ogiltigt lösenordsformat',\n  'Invalid phone number format': `Ogiltigt format för telefonnummer`,\n  'Lost your code? ': 'Förlorat koden? ',\n  'New Password': 'Nytt lösenord',\n  'No account? ': 'Inget konto? ',\n  'Password attempts exceeded': 'Maximalt antal felaktiga inloggningsförsök har uppnåtts',\n  'Reset password': 'Återställ lösenord',\n  'Sign Out': 'Logga ut',\n  'Sign Up': 'Registrering',\n  'User already exists': 'Användaren finns redan',\n  'User does not exist': 'Användaren finns inte',\n  'Username cannot be empty': 'Användarnamnet kan inte vara tomt',\n  'We Emailed You': 'Vi har skickat e-post till dig'\n};\nconst idDict$1 = {\n  'Account recovery requires verified contact information': 'Pemulihan akun memerlukan informasi kontak terverifikasi',\n  'Back to Sign In': 'Kembali ke Masuk',\n  'Change Password': 'Ubah kata sandi',\n  Changing: 'Mengubah',\n  Code: 'Kode',\n  'Confirm Password': 'Konfirmasi kata sandi',\n  'Confirm Sign Up': 'Konfirmasi Pendaftaran',\n  'Confirm SMS Code': 'Konfirmasi Kode SMS',\n  'Confirm TOTP Code': 'Konfirmasi Kode TOTP',\n  Confirm: 'Konfirmasi',\n  'Confirmation Code': 'Kode Konfirmasi',\n  Confirming: 'Mengkonfirmasi',\n  'Create a new account': 'Buat akun baru',\n  'Create Account': 'Buat Akun',\n  'Creating Account': 'Membuat Akun',\n  'Dismiss alert': 'Hentikan pemberitahuan',\n  Email: 'Email',\n  'Enter your code': 'Masukkan kode anda',\n  'Enter your Email': 'Masukkan email anda',\n  'Enter your phone number': 'Masukkan nomor telepon anda',\n  'Enter your username': 'Masukkan nama akun anda',\n  'Forgot your password?': 'Lupa kata sandi? ',\n  'Hide password': 'Sembunyikan kata sandi',\n  'It may take a minute to arrive': 'Mungkin perlu waktu satu menit untuk tiba',\n  Loading: 'Memuat',\n  'New password': 'Kata sandi baru',\n  or: 'atau',\n  Password: 'Kata sandi',\n  'Phone Number': 'Nomor telepon',\n  'Resend Code': 'Kirim ulang kodenya',\n  'Reset your Password': 'Reset Kata Sandi',\n  'Reset your password': 'Ubah kata sandi anda',\n  'Send code': 'Kirim kode',\n  'Send Code': 'Kirim Kode',\n  Sending: 'Mengirim',\n  'Setup TOTP': 'Siapkan TOTP',\n  'Show password': 'Tampilkan kata sandi',\n  'Sign in to your account': 'Masuk akun anda',\n  'Sign In with Amazon': 'Masuk dengan Amazon',\n  'Sign In with Apple': 'Masuk dengan Apple',\n  'Sign In with Facebook': 'Masuk dengan Facebook',\n  'Sign In with Google': 'Masuk dengan Google',\n  'Sign in': 'Masuk',\n  'Sign In': 'Masuk',\n  'Signing in': 'Memasuki',\n  Skip: 'Lewati',\n  Submit: 'Ajukan',\n  Submitting: 'Mengajukan',\n  Username: 'Nama akun',\n  'Verify Contact': 'Verifikasi Kontak',\n  Verify: 'Verifikasi',\n  'We Sent A Code': 'Kami Mengirim Kode',\n  'We Texted You': 'Kami mengirim SMS kepada Anda',\n  'Your code is on the way. To log in, enter the code we sent you': 'Kode Anda segera hadir. Untuk masuk, masukkan kode yang kami kirimkan kepada Anda',\n  // Additional translations provided by customers\n  'An account with the given email already exists.': 'Akun dengan email tersebut sudah terdaftar.',\n  'Attempt limit exceeded, please try after some time.': 'Batas percobaan terlampaui, mohon coba lagi setelah beberapa waktu.',\n  'Cannot reset password for the user as there is no registered/verified email or phone_number': 'Tidak dapat mengatur ulang kata sandi karena tidak ada email terdaftar / terverifikasi atau nomor telepon',\n  Change: 'Ubah',\n  'Confirm a Code': 'Konfirmasi kode',\n  'Create account': 'Buat akun',\n  'Enter your password': 'Masukkan kata sandi anda',\n  'Forgot Password': 'Lupa kata sandi',\n  'Have an account? ': 'Sudah punya akun? ',\n  Hello: 'Halo',\n  'Incorrect username or password.': 'Nama akun atau kata sandi salah.',\n  'Invalid phone number format': 'Nomor telepon tidak sesuai dengan format.',\n  'Invalid verification code provided, please try again.': 'Kode verifikasi tidak sesuai, mohon coba lagi.',\n  'It may take a minute to arrive.': 'Mungkin perlu beberapa waktu untuk tiba.',\n  'Lost your code? ': 'Kode anda hilang?',\n  Name: 'Nama',\n  'Network error': 'Galat jaringan',\n  'No account? ': 'Tidak ada akun?',\n  'Password did not conform with policy: Password not long enough': 'Kata sandi tidak sesuai dengan aturan: Kata sandi kurang panjang',\n  'Resend a Code': 'Renvoyer un code',\n  'Reset password': 'Ubah kata sandi anda',\n  Send: 'Kirim',\n  'Sign In with AWS': 'Masuk dengan AWS',\n  'Sign Up with Amazon': 'Daftar dengan Amazon',\n  'Sign Up with AWS': 'Daftar dengan AWS',\n  'Sign Up with Facebook': 'Daftar dengan Facebook',\n  'Sign Up with Google': 'Daftar dengan Google',\n  SMS: 'SMS',\n  'User already exists': 'Akun sudah terdaftar',\n  'User does not exist.': 'Akun tidak terdaftar.',\n  'User is disabled.': 'Akun dinonaktifkan.',\n  'Username cannot be empty': 'Nama akun tidak boleh kosong',\n  'Username/client id combination not found.': 'Nama akun atau id tidak ditemukan.',\n  'We Emailed You': 'Kami mengirimkanmu email',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami emailkan ke',\n  'Your code is on the way. To log in, enter the code we texted to': 'Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami tuliskan ke',\n  'Your passwords must match': 'Kata sandi harus sama'\n};\nconst trDict$1 = {\n  'Account recovery requires verified contact information': 'Hesap kurtarma, doğrulanmış iletişim bilgilerini gerektirir',\n  'Add your Profile': 'Profilinizi ekleyin',\n  'Add your Website': 'Web sitenizi ekleyin',\n  'Back to Sign In': 'Oturum Açmaya Geri Dön',\n  'Change Password': 'Şifreyi Değiştir',\n  Changing: 'Değiştiriliyor',\n  Code: 'Kod',\n  'Confirm Password': 'Şifreyi Doğrula',\n  'Confirm Sign Up': 'Kayıt İşlemini Doğrula',\n  'Confirm SMS Code': 'SMS Kodunu Doğrula',\n  'Confirm MFA Code': 'Çoklu Faktörlü Doğrulama Kodunu Doğrula',\n  'Confirm TOTP Code': 'Tek Kullanımlık Şifreyi Doğrula',\n  Confirm: 'Doğrula',\n  'Confirmation Code': 'Doğrulama Kodu',\n  Confirming: 'Doğrulanıyor',\n  'Create a new account': 'Yeni bir hesap oluştur',\n  'Create Account': 'Hesap Oluştur',\n  'Creating Account': 'Hesap Oluşturuluyor',\n  'Dismiss alert': 'Uyarıyı reddet',\n  Email: 'E-posta',\n  'Enter your Birthdate': 'Doğum gününüzü girin',\n  'Enter your code': 'Kodu girin',\n  'Enter your Confirmation Code': 'Doğrulama Kodunuzu Girin',\n  'Enter your Email': 'E-posta adresinizi girin',\n  'Enter your email': 'E-posta adresinizi girin',\n  'Enter your Family Name': 'Ad Soyadınızı girin',\n  'Enter your Given Name': 'Adınızı girin',\n  'Enter your Middle Name': 'Soyadınızı girin',\n  'Enter your Name': 'Adınızı girin',\n  'Enter your Nickname': 'Takma adınızı girin',\n  'Enter your Password': 'Şifrenizi girin',\n  'Enter your phone number': 'Telefon numaranızı girin',\n  'Enter your Preferred Username': 'Tercih ettiğiniz kullanıcı adınızı girin',\n  'Enter your username': 'Kullanıcı adınızı girin',\n  'Forgot Password?': 'Şifrenizi Mi Unuttunuz?',\n  'Forgot password?': 'Şifrenizi mi unuttunuz?',\n  'Forgot your password?': 'Şifrenizi mi unuttunuz?',\n  'Hide password': 'Şifreyi gizle',\n  'It may take a minute to arrive': 'Kodun gelmesi bir dakika sürebilir',\n  Loading: 'Yükleniyor',\n  'New password': 'Yeni şifre',\n  or: 'veya',\n  Password: 'Şifre',\n  'Phone Number': 'Telefon Numarası',\n  'Please confirm your Password': 'Lütfen şifrenizi doğrulayın',\n  'Resend Code': 'Kodu Yeniden Gönder',\n  'Reset your password': 'Şifrenizi sıfırlayın',\n  'Reset your Password': 'Şifrenizi Sıfırlayın',\n  'Reset Password': 'Şifreyi Sıfırla',\n  'Send code': 'Kod gönder',\n  'Send Code': 'Kod Gönder',\n  Sending: 'Gönderiliyor',\n  'Setup TOTP': 'Tek kullanımlık şifre kurulumu yap',\n  'Show password': 'Şifreyi göster',\n  'Sign in to your account': 'Hesabınızda oturum açın',\n  'Sign In with Amazon': 'Amazon ile Oturum Aç',\n  'Sign In with Apple': 'Apple ile Oturum Aç',\n  'Sign In with Facebook': 'Facebook ile Oturum Aç',\n  'Sign In with Google': 'Google ile Oturum Aç',\n  'Sign in': 'Oturum aç',\n  'Sign In': 'Oturum Aç',\n  'Sign Up with Facebook': 'Facebook ile Kayıt Ol',\n  'Sign Up with Google': 'Google ile Kayıt Ol',\n  'Signing in': 'Oturum açılıyor',\n  Skip: 'Atla',\n  Submit: 'Gönder',\n  Submitting: 'Gönderiliyor',\n  Username: 'Kullanıcı adı',\n  'Verify Contact': 'Kişiyi Doğrula',\n  Verify: 'Doğrula',\n  'We Emailed You': 'Size E-posta Gönderdik',\n  'We Sent A Code': 'Bir Kod Gönderdik',\n  'We Texted You': 'Size Mesaj Gönderdik',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Kodunuz yolda. Oturum açmak için, gönderdiğimiz e-postadaki kodu girin',\n  'Your code is on the way. To log in, enter the code we sent you': 'Kodunuz yolda. Oturum açmak için, size gönderdiğimiz kodu girin',\n  'Your code is on the way. To log in, enter the code we texted to': 'Kodunuz yolda. Oturum açmak için, gönderdiğimiz mesajdaki kodu girin',\n  // Additional translations provided by customers\n  'An account with the given email already exists.': 'Bu e-postaya ait zaten bir hesap var.',\n  'Confirm Sign In': 'Oturum Açmayı Doğrula',\n  'Have an account? ': 'Hesabınız var mı? ',\n  'Incorrect username or password': 'Yanlış kullanıcı adı ya da şifre',\n  'Invalid password format': 'Geçersiz parola formatı',\n  'Invalid phone number format': 'Geçersiz telefon numarası formatı',\n  'Lost your code? ': 'Kodu mu kaybettiniz? ',\n  'No account? ': 'Hesabınız yok mu? ',\n  'Password attempts exceeded': 'Maksimum oturum açma girişimi aşıldı',\n  'Sign Out': 'Çıkış yap',\n  'Sign Up': 'Kayıt Ol',\n  'User already exists': 'Bu kullanıcı zaten var',\n  'User does not exist': 'Böyle bir kullanıcı mevcut değil',\n  'Username cannot be empty': 'Kullanıcı adı boş olamaz'\n};\nconst ruDict$1 = {\n  'Account recovery requires verified contact information': 'Восстановление учетной записи требует проверки контактной информации',\n  'Back to Sign In': 'Назад, чтобы войти',\n  'Change Password': 'изменять пароль',\n  Changing: 'Изменение',\n  Code: 'Код',\n  'Confirm Password': 'Подтверждение пароля',\n  'Confirm Sign Up': 'Подтверждение зарегистрироваться',\n  'Confirm SMS Code': 'Подтверждение CMC-Код',\n  'Confirm TOTP Code': 'Подтверждение TOTP-Код',\n  Confirm: 'Подтверждать',\n  'Confirmation Code': 'код подтверждения',\n  Confirming: 'подтверждение',\n  'Create a new account': 'Создавать новую учетную запись',\n  'Create Account': 'Создать учетную запись',\n  'Creating Account': 'создание учетная запись',\n  'Dismiss alert': 'Закрыть оповещение',\n  Email: 'электронная почта',\n  'Enter your code': 'ввести ваш Код',\n  'Enter your Email': 'ввести ваш электронная почта',\n  'Enter your phone number': 'ввести ваш номер телефона',\n  'Enter your username': 'ввести ваш имя пользователя',\n  'Forgot your password?': 'Забыли ваш пароль?',\n  'Hide password': 'Скрывать пароль',\n  'It may take a minute to arrive': 'Доставка может занять некоторое время',\n  Loading: 'Загрузка',\n  'New password': 'Новый пароль',\n  or: 'или',\n  Password: 'Пароль',\n  'Phone Number': 'Номер телефона',\n  'Resend Code': 'Отправь еще раз Код',\n  'Reset your password': 'сброс ваш пароль',\n  'Reset your Password': 'сброс ваш Пароль',\n  'Send code': 'Отправлять Код',\n  'Send Code': 'Отправлять Код',\n  Sending: 'отправка',\n  'Setup TOTP': 'Настраивать TOTP',\n  'Show password': 'Показывать пароль',\n  'Sign in to your account': 'знак в свой аккаунт',\n  'Sign In with Amazon': 'знак в с Amazon',\n  'Sign In with Apple': 'знак в с Apple',\n  'Sign In with Facebook': 'знак в с Facebook',\n  'Sign In with Google': 'знак в с Google',\n  'Sign in': 'знак в',\n  'Sign In': 'знак в',\n  'Signing in': 'подписание в',\n  Skip: 'Пропускать',\n  Submit: 'Представлять на рассмотрение',\n  Submitting: 'Представив',\n  Username: 'Имя пользователя',\n  'Verify Contact': 'Проверить контакт',\n  Verify: 'Проверить',\n  'We Emailed You': 'Мы отправили вам электронное письмо',\n  'We Sent A Code': 'Мы отправили код',\n  'We Texted You': 'Мы отправили вам текстовое сообщение',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Ваш код отправлен. Чтобы войти в систему, введите код, который мы отправили по электронной почте',\n  'Your code is on the way. To log in, enter the code we sent you': 'Ваш код отправлен. Чтобы войти в систему, введите код, который мы послали вам',\n  'Your code is on the way. To log in, enter the code we texted to': 'Ваш код отправлен. Чтобы войти в систему, введите код, который мы отправили текстовым сообщением'\n};\nconst heDict$1 = {\n  'Account recovery requires verified contact information': 'שחזור לקוח דורש עוד מידע',\n  'Back to Sign In': 'חזור להרשמה',\n  'Change Password': 'עדכון סיסמא',\n  Changing: 'מעדכן',\n  Code: 'קוד',\n  'Confirm Password': 'אשר סיסמא',\n  'Confirm Sign Up': 'אשר הרשמה',\n  'Confirm SMS Code': 'אשר sms קוד',\n  'Confirm TOTP Code': 'אשר totp קוד',\n  Confirm: 'אישור',\n  'Confirmation Code': 'אישור קוד',\n  Confirming: 'מאשר',\n  'Create a new account': 'צור משתמש חדש',\n  'Create Account': 'צור משתמש',\n  'Creating Account': 'יצירת משתמש',\n  'Dismiss alert': 'הסר התראה',\n  Email: 'אימייל',\n  'Enter your code': 'הכנס את הקוד',\n  'Enter your Email': 'הכנס את המייל שלך',\n  'Enter your phone number': 'הכנס את מספר הטלפון שלך',\n  'Enter your username': 'הכנס את שם המתמש שלך',\n  'Forgot your password?': 'שכחת סיסמא ?',\n  'Hide password': 'הסתר סיסמא',\n  Loading: 'טוען',\n  'New password': 'סיסמא חדשה',\n  or: 'אוֹ',\n  Password: 'סיסמא',\n  'Phone Number': 'מספר טלפון',\n  'Resend Code': 'שלח קוד שוב',\n  'Reset your password': 'אפס סיסמא',\n  'Reset your Password': 'אפס סיסמא',\n  'Send code': 'שלח קוד',\n  'Send Code': 'שלח קוד',\n  Sending: 'שולח',\n  'Setup TOTP': 'Setup TOTP',\n  'Show password': 'הצג סיסמא',\n  'Sign in to your account': 'התחבר לחשבון שלך',\n  'Sign In with Amazon': 'Sign In with Amazon',\n  'Sign In with Apple': 'Sign In with Apple',\n  'Sign In with Facebook': 'Sign In with Facebook',\n  'Sign In with Google': 'Sign In with Google',\n  'Sign in': 'התחבר',\n  'Sign In': 'התחבר',\n  'Signing in': 'מתחבר',\n  Skip: 'דלג',\n  Submit: 'שלח',\n  Submitting: 'שולח',\n  Username: 'שם משתמש',\n  'Verify Contact': 'אמת איש קשר',\n  Verify: 'אמת'\n};\nconst uaDict$1 = {\n  'Account recovery requires verified contact information': 'Відновлення облікового запису потребує контактної інформації',\n  'Back to Sign In': 'Назад на сторінку входу',\n  'Change Password': 'Змінити пароль',\n  Changing: 'Змінюємо',\n  Code: 'Код',\n  'Confirm Password': 'Підтвердіть пароль',\n  'Confirm Sign Up': 'Підтвердіть реєстрацію',\n  'Confirm SMS Code': 'Підтвердіть SMS код',\n  'Confirm TOTP Code': 'Підтвердіть TOTP код',\n  Confirm: 'Підтвердити',\n  'Confirmation Code': 'Код підтвердження',\n  Confirming: 'Підтверджуємо',\n  'Create a new account': 'Зареєструватися',\n  'Create Account': 'Зареєструватися',\n  'Creating Account': 'Реєструємо',\n  'Dismiss alert': 'Відхилити сповіщення',\n  Email: 'Email',\n  'Enter your code': 'Введіть код',\n  'Enter your Email': 'Введіть ваш email',\n  'Enter your phone number': 'Введіть ваш номер телефону',\n  'Enter your username': 'Введіть ваше імʼя користувача',\n  'Forgot password?': 'Забули пароль?',\n  'Forgot your password?': 'Забули ваш пароль?',\n  'Hide password': 'Сховати пароль',\n  'It may take a minute to arrive': 'Доставка може тривати хвилину',\n  Loading: 'Загружаємо',\n  'New password': 'Новий пароль',\n  or: 'або',\n  Password: 'Пароль',\n  'Phone Number': 'Номер Телефону',\n  'Resend Code': 'Відправити код повторно',\n  'Reset your password': 'Скинути пароль',\n  'Reset your Password': 'Скинути пароль',\n  'Send code': 'Відправити код',\n  'Send Code': 'Відправити код',\n  Sending: 'Відправляємо',\n  'Setup TOTP': 'Налаштувати TOTP',\n  'Show password': 'Показати пароль',\n  'Sign in to your account': 'Увійти у ваш обліковий запис',\n  'Sign In with Amazon': 'Увійти з Amazon',\n  'Sign In with Apple': 'Увійти з Apple',\n  'Sign In with Facebook': 'Увійти з Facebook',\n  'Sign In with Google': 'Увійти з Google',\n  'Sign in': 'Увійти',\n  'Sign In': 'Увійти',\n  'Signing in': 'Входимо',\n  Skip: 'Пропустити',\n  Submit: 'Відправити',\n  Submitting: 'Відправляємо',\n  Username: 'Імʼя користувача',\n  'Verify Contact': 'Підтвердити Контакт',\n  Verify: 'Підтвердити',\n  'We Emailed You': 'Ми відправили вам Email',\n  'We Sent A Code': 'Ми відправили код',\n  'We Texted You': 'Ми відправили вам текстове повідомлення',\n  'Your code is on the way. To log in, enter the code we emailed to': 'Ваш код вже в дорозі. Щоб увійти, введіть код, що ми відправили вам на Email',\n  'Your code is on the way. To log in, enter the code we sent you': 'Ваш код вже в дорозі. Щоб увійти, введіть код, що ми вам відправили',\n  'Your code is on the way. To log in, enter the code we texted to': 'Ваш код вже в дорозі. Щоб увійти, введіть код, що ми відправили вам текстовим повідомленням',\n  // Additional translations\n  'An account with the given email already exists.': 'Обліковий запис з цим Email вже існує.',\n  'Confirm a Code': 'Підтвердіть код',\n  'Confirm Sign In': 'Підтвердіть вхід',\n  'Forgot Password': 'Забули пароль',\n  'Incorrect username or password.': 'Невірне імʼя користувача або пароль',\n  'Invalid password format': 'Невірний формат паролю',\n  'Invalid phone number format': 'Невірний формат номеру телефону',\n  'Loading...': 'Загружаємо...',\n  'New Password': 'Новий пароль',\n  'Resend a Code': 'Відправити код повторно',\n  'Reset Password': 'Скинути пароль',\n  'Sign Out': 'Вийти',\n  'Sign Up with Amazon': 'Зареєструватися з Amazon',\n  'Sign Up with Apple': 'Зареєструватися з Apple',\n  'Sign Up with Facebook': 'Зареєструватися з Facebook',\n  'Sign Up with Google': 'Зареєструватися з Google',\n  'Sign Up': 'Зареєструватися',\n  'User already exists': 'Користувач вже існує',\n  'User does not exist': 'Такий користувач не існує',\n  'Username cannot be empty': 'Імʼя користувача не може бути пустим',\n  'Your passwords must match': 'Паролі мають збігатися'\n};\nconst defaultTexts$1 = {\n  ADD_PROFILE: 'Add your Profile',\n  ADD_WEBSITE: 'Add your Website',\n  BACK_SIGN_IN: 'Back to Sign In',\n  BIRTHDATE: 'Birthdate',\n  CHANGE_PASSWORD: 'Change Password',\n  CHANGING_PASSWORD: 'Changing',\n  CODE: 'Code',\n  CODE_ARRIVAL: 'It may take a minute to arrive',\n  CODE_EMAILED: 'Your code is on the way. To log in, enter the code we emailed to',\n  CODE_SENT: 'Your code is on the way. To log in, enter the code we sent you',\n  CODE_TEXTED: 'Your code is on the way. To log in, enter the code we texted to',\n  CONFIRM_PASSWORD: 'Confirm Password',\n  CONFIRM_PASSWORD_PLACEHOLDER: 'Please confirm your Password',\n  CONFIRM_RESET_PASSWORD_HEADING: 'Reset your Password',\n  CONFIRM_SIGNUP_HEADING: 'Confirm Sign Up',\n  CONFIRM_SMS: 'Confirm SMS Code',\n  // If challenge name is not returned\n  CONFIRM_MFA_DEFAULT: 'Confirm MFA Code',\n  CONFIRM_TOTP: 'Confirm TOTP Code',\n  CONFIRM: 'Confirm',\n  CONFIRMATION_CODE: 'Confirmation Code',\n  CONFIRMING: 'Confirming',\n  CREATE_ACCOUNT: 'Create Account',\n  CREATING_ACCOUNT: 'Creating Account',\n  EMAIL_ADDRESS: 'Email',\n  ENTER_BIRTHDATE: 'Enter your Birthdate',\n  ENTER_CODE: 'Enter your code',\n  ENTER_CONFIRMATION_CODE: 'Enter your Confirmation Code',\n  ENTER_EMAIL: 'Enter your Email',\n  ENTER_FAMILY_NAME: 'Enter your Family Name',\n  ENTER_GIVEN_NAME: 'Enter your Given Name',\n  ENTER_MIDDLE_NAME: 'Enter your Middle Name',\n  ENTER_NAME: 'Enter your Name',\n  ENTER_NICK_NAME: 'Enter your Nickname',\n  ENTER_PASSWORD: 'Enter your Password',\n  ENTER_PHONE_NUMBER: 'Enter your Phone Number',\n  ENTER_PREFERRED_USERNAME: 'Enter your Preferred Username',\n  ENTER_USERNAME: 'Enter your username',\n  FAMILY_NAME: 'Family Name',\n  GIVEN_NAME: 'Given Name',\n  FORGOT_PASSWORD: 'Forgot Password?',\n  FORGOT_YOUR_PASSWORD: 'Forgot your password?',\n  HIDE_PASSWORD: 'Hide password',\n  LOADING: 'Loading',\n  LOGIN_NAME: 'Username',\n  MIDDLE_NAME: 'Middle Name',\n  NAME: 'Name',\n  NICKNAME: 'Nickname',\n  NEW_PASSWORD: 'New password',\n  OR: 'or',\n  PASSWORD: 'Password',\n  PHONE_NUMBER: 'Phone Number',\n  PREFERRED_USERNAME: 'Preferred Username',\n  PROFILE: 'Profile',\n  RESEND_CODE: 'Resend Code',\n  RESET_PASSWORD_HEADING: 'Reset your password',\n  RESET_PASSWORD: 'Reset Password',\n  SEND_CODE: 'Send code',\n  SENDING: 'Sending',\n  SETUP_TOTP: 'Setup TOTP',\n  SHOW_PASSWORD: 'Show password',\n  SIGN_IN_BUTTON: 'Sign in',\n  SIGN_IN_TAB: 'Sign In',\n  SIGN_IN_WITH_AMAZON: 'Sign In with Amazon',\n  SIGN_IN_WITH_APPLE: 'Sign In with Apple',\n  SIGN_IN_WITH_FACEBOOK: 'Sign In with Facebook',\n  SIGN_IN_WITH_GOOGLE: 'Sign In with Google',\n  SIGN_IN: 'Sign in to your account',\n  SIGN_UP_BUTTON: 'Create a new account',\n  SIGNING_IN_BUTTON: 'Signing in',\n  SKIP: 'Skip',\n  SUBMIT: 'Submit',\n  SUBMITTING: 'Submitting',\n  UPPERCASE_COPY: 'COPY',\n  VERIFY_CONTACT: 'Verify Contact',\n  VERIFY_HEADING: 'Account recovery requires verified contact information',\n  VERIFY: 'Verify',\n  WE_EMAILED: 'We Emailed You',\n  WE_SENT_CODE: 'We Sent A Code',\n  WE_TEXTED: 'We Texted You',\n  WEBSITE: 'Website'\n};\n\n//merge all the new module translations in respective locale constants\nconst deDict = _objectSpread({}, deDict$1);\nconst enDict = _objectSpread({}, enDict$1);\nconst esDict = _objectSpread({}, esDict$1);\nconst frDict = _objectSpread({}, frDict$1);\nconst itDict = _objectSpread({}, itDict$1);\nconst jaDict = _objectSpread({}, jaDict$1);\nconst krDict = _objectSpread({}, krDict$1);\nconst nbDict = _objectSpread({}, nbDict$1);\nconst nlDict = _objectSpread({}, nlDict$1);\nconst plDict = _objectSpread({}, plDict$1);\nconst ptDict = _objectSpread({}, ptDict$1);\nconst zhDict = _objectSpread({}, zhDict$1);\nconst svDict = _objectSpread({}, svDict$1);\nconst idDict = _objectSpread({}, idDict$1);\nconst trDict = _objectSpread({}, trDict$1);\nconst ruDict = _objectSpread({}, ruDict$1);\nconst heDict = _objectSpread({}, heDict$1);\nconst uaDict = _objectSpread({}, uaDict$1);\nconst defaultTexts = _objectSpread({}, defaultTexts$1);\n\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n/**\n * Contains translatable strings that authenticator provides by default. Customers\n * can use this to add custom vocabularies:\n *\n * ```\n * I18n.putVocabulariesForLanguage(\"en\", {\n *  [DefaultTexts.SIGN_IN]: \"Custom Sign In Text\",\n *  [DefaultTexts.SIGN_IN_BUTTON]: \"Custom Click Here to Sign In\"\n * });\n * ```\n */\nconst DefaultTexts = _objectSpread({}, defaultTexts);\n/**\n * This helper type checks that given phrase is one of the texts @aws-amplify/ui\n * provides by default. This enables vscode autocompletion to help catch typos\n * during development.\n *\n * You can also use translate<string> to handle custom strings or dynamic content.\n */\nfunction translate(phrase) {\n  return utils$1.I18n.get(phrase);\n}\n/**\n * Whether I18n has a translation entry for given phrase\n */\nfunction hasTranslation(phrase) {\n  return utils$1.I18n.get(phrase) !== phrase;\n}\nconst translations = {\n  de: deDict,\n  en: enDict,\n  es: esDict,\n  fr: frDict,\n  id: idDict,\n  it: itDict,\n  ja: jaDict,\n  // TODO: remove kr in next major release\n  kr: krDict,\n  ko: krDict,\n  nb: nbDict,\n  nl: nlDict,\n  pl: plDict,\n  pt: ptDict,\n  zh: zhDict,\n  sv: svDict,\n  tr: trDict,\n  ru: ruDict,\n  he: heDict,\n  ua: uaDict\n};\n\n/**\n * This file contains helpers related to forms and input attributes.\n */\nconst defaultFormFieldOptions = {\n  birthdate: {\n    label: 'Birthdate',\n    placeholder: 'Enter your Birthdate',\n    type: 'date',\n    autocomplete: 'bday',\n    isRequired: true\n  },\n  confirmation_code: {\n    label: 'Confirmation Code',\n    placeholder: 'Enter your Confirmation Code',\n    type: 'text',\n    autocomplete: 'one-time-code',\n    isRequired: true\n  },\n  confirm_password: {\n    label: 'Confirm Password',\n    placeholder: 'Please confirm your Password',\n    type: 'password',\n    autocomplete: 'new-password',\n    isRequired: true\n  },\n  email: {\n    label: 'Email',\n    placeholder: 'Enter your Email',\n    type: 'email',\n    autocomplete: 'username',\n    isRequired: true\n  },\n  family_name: {\n    label: 'Family Name',\n    placeholder: 'Enter your Family Name',\n    type: 'text',\n    autocomplete: 'family-name',\n    isRequired: true\n  },\n  given_name: {\n    label: 'Given Name',\n    placeholder: 'Enter your Given Name',\n    type: 'text',\n    autocomplete: 'given-name',\n    isRequired: true\n  },\n  middle_name: {\n    label: 'Middle Name',\n    placeholder: 'Enter your Middle Name',\n    type: 'text',\n    autocomplete: 'additional-name',\n    isRequired: true\n  },\n  name: {\n    label: 'Name',\n    placeholder: 'Enter your Name',\n    type: 'text',\n    autocomplete: 'name',\n    isRequired: true\n  },\n  nickname: {\n    label: 'Nickname',\n    placeholder: 'Enter your Nickname',\n    type: 'text',\n    autocomplete: 'tel',\n    isRequired: true\n  },\n  password: {\n    label: 'Password',\n    placeholder: 'Enter your Password',\n    type: 'password',\n    autocomplete: 'new-password',\n    isRequired: true\n  },\n  phone_number: {\n    label: 'Phone Number',\n    placeholder: 'Enter your Phone Number',\n    type: 'tel',\n    autocomplete: 'tel',\n    dialCode: '+1',\n    dialCodeList: countryDialCodes,\n    isRequired: true\n  },\n  preferred_username: {\n    label: 'Preferred Username',\n    placeholder: 'Enter your Preferred Username',\n    type: 'text',\n    isRequired: true\n  },\n  profile: {\n    label: 'Profile',\n    placeholder: 'Add your Profile',\n    type: 'url',\n    autocomplete: 'url',\n    isRequired: true\n  },\n  website: {\n    label: 'Website',\n    placeholder: 'Add your Website',\n    type: 'url',\n    autocomplete: 'url',\n    isRequired: true\n  },\n  username: {\n    label: 'Username',\n    placeholder: 'Enter your Username',\n    type: 'text',\n    autocomplete: 'username',\n    isRequired: true\n  }\n};\n/**\n * List of special characters that Cognito allows.\n *\n * Adapted from https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-policies.html\n */\n// prettier-ignore\nconst ALLOWED_SPECIAL_CHARACTERS = ['^', '$', '*', '.', '[', ']', '{', '}', '(', ')', '?', '\"', '!', '@', '#', '%', '&', '/', '\\\\', ',', '>', '<', \"'\", ':', ';', '|', '_', '~', '`', '=', '+', '-', ' '];\n/**\n * Email validation regex\n *\n * source: HTML5 spec https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\n */\nconst emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/**\n+ * map navigable route keys to auth event names\n+ */\nconst NAVIGABLE_ROUTE_EVENT = {\n  forgotPassword: 'FORGOT_PASSWORD',\n  signIn: 'SIGN_IN',\n  signUp: 'SIGN_UP'\n};\nconst getRoute = (state, actorState) => {\n  // 'federatedSignIn' exists as a state on both the 'signInActor' and 'signUpActor',\n  // match against the `actorState` initially to determine if the federated sign in flow\n  // has begun, then which actor has begun the flow and return the corresponding `route`\n  if (actorState?.matches('federatedSignIn')) {\n    if (state.matches('signUpActor')) {\n      return 'signUp';\n    }\n    if (state.matches('signInActor')) {\n      return 'signIn';\n    }\n  }\n  switch (true) {\n    case state.matches('idle'):\n      return 'idle';\n    case state.matches('setup'):\n      return 'setup';\n    case state.matches('signOut'):\n      return 'signOut';\n    case state.matches('authenticated'):\n      return 'authenticated';\n    case actorState?.matches('confirmSignUp'):\n    case actorState?.matches('resendSignUpCode'):\n      return 'confirmSignUp';\n    case actorState?.matches('confirmSignIn'):\n      return 'confirmSignIn';\n    case actorState?.matches('setupTotp.edit'):\n    case actorState?.matches('setupTotp.submit'):\n      return 'setupTotp';\n    case actorState?.matches('signIn'):\n      return 'signIn';\n    case actorState?.matches('signUp'):\n    case actorState?.matches('autoSignIn'):\n      return 'signUp';\n    case actorState?.matches('forceChangePassword'):\n      return 'forceNewPassword';\n    case actorState?.matches('forgotPassword'):\n      return 'forgotPassword';\n    case actorState?.matches('confirmResetPassword'):\n      return 'confirmResetPassword';\n    case actorState?.matches('selectUserAttributes'):\n      return 'verifyUser';\n    case actorState?.matches('confirmVerifyUserAttribute'):\n      return 'confirmVerifyUser';\n    case state.matches('getCurrentUser'):\n    case actorState?.matches('fetchUserAttributes'):\n      /**\n       * This route is needed for autoSignIn to capture both the\n       * autoSignIn.pending and the resolved states when the\n       * signIn actor is running.\n       */\n      return 'transition';\n    default:\n      return null;\n  }\n};\n\n/**\n * This file contains helpers that translates xstate internals to more\n * understandable authenticator contexts. We provide these contexts with\n * `useAuthenticator` hook/composable/service.\n */\n/**\n * Creates public facing auth helpers that abstracts out xstate implementation\n * detail. Each framework implementation can export these helpers so that\n * developers can send events without having to learn internals.\n *\n * ```\n * const [state, send] = useActor(...);\n * const { submit } = getSendEventAliases(send);\n * submit({ username, password})\n * ```\n */\nconst getSendEventAliases = send => {\n  const sendToMachine = type => {\n    // TODO If these were created during the creation of the machine & provider,\n    // then invalid transitions could be caught via https://xstate.js.org/docs/guides/states.html#state-can-event\n    return data => send({\n      type,\n      data\n    });\n  };\n  return {\n    initializeMachine: sendToMachine('INIT'),\n    resendCode: sendToMachine('RESEND'),\n    signOut: sendToMachine('SIGN_OUT'),\n    submitForm: sendToMachine('SUBMIT'),\n    updateForm: sendToMachine('CHANGE'),\n    updateBlur: sendToMachine('BLUR'),\n    // Actions that don't immediately invoke a service but instead transition to a screen\n    // are prefixed with `to*`\n    toFederatedSignIn: sendToMachine('FEDERATED_SIGN_IN'),\n    toForgotPassword: sendToMachine('FORGOT_PASSWORD'),\n    toSignIn: sendToMachine('SIGN_IN'),\n    toSignUp: sendToMachine('SIGN_UP'),\n    skipVerification: sendToMachine('SKIP')\n  };\n};\nconst getNextSendEventAliases = send => {\n  const _getSendEventAliases = getSendEventAliases(send),\n    toFederatedSignIn = _getSendEventAliases.toFederatedSignIn,\n    submitForm = _getSendEventAliases.submitForm,\n    resendCode = _getSendEventAliases.resendCode,\n    skipVerification = _getSendEventAliases.skipVerification;\n  return {\n    handleSubmit: submitForm,\n    resendConfirmationCode: resendCode,\n    // manual \"route\" navigation\n    setRoute: route => send({\n      type: NAVIGABLE_ROUTE_EVENT[route]\n    }),\n    skipAttributeVerification: skipVerification,\n    toFederatedSignIn\n  };\n};\nconst getServiceContextFacade = state => {\n  const actorContext = getActorContext$1(state) ?? {};\n  const challengeName = actorContext.challengeName,\n    codeDeliveryDetails = actorContext.codeDeliveryDetails,\n    error = actorContext.remoteError,\n    validationErrors = actorContext.validationError,\n    _actorContext$totpSec = actorContext.totpSecretCode,\n    totpSecretCode = _actorContext$totpSec === void 0 ? null : _actorContext$totpSec,\n    unverifiedUserAttributes = actorContext.unverifiedUserAttributes,\n    username = actorContext.username;\n  const _ref4 = state.context?.config ?? {},\n    _ref4$socialProviders = _ref4.socialProviders,\n    socialProviders = _ref4$socialProviders === void 0 ? [] : _ref4$socialProviders;\n  // check for user in actorContext prior to state context. actorContext is more \"up to date\",\n  // but is not available on all states\n  const user = actorContext?.user ?? state.context?.user;\n  const hasValidationErrors = !!(validationErrors && Object.keys(validationErrors).length > 0);\n  const actorState = getActorState(state);\n  const isPending = state.hasTag('pending') || actorState?.hasTag('pending');\n  const route = getRoute(state, actorState);\n  // Auth status represents the current state of the auth flow\n  // The `configuring` state is used to indicate when the xState machine is loading\n  const authStatus = (route => {\n    switch (route) {\n      case 'idle':\n      case 'setup':\n        return 'configuring';\n      case 'authenticated':\n        return 'authenticated';\n      default:\n        return 'unauthenticated';\n    }\n  })(route);\n  const facade = {\n    authStatus,\n    challengeName,\n    codeDeliveryDetails,\n    error,\n    hasValidationErrors,\n    isPending,\n    route,\n    socialProviders,\n    totpSecretCode,\n    unverifiedUserAttributes,\n    user,\n    username,\n    validationErrors\n    // @v6-migration-note\n    // While most of the properties\n    // on `AuthenticatorServiceContextFacade` can resolve to `undefined`, updating\n    // the interface requires material changes in consumers (namely `useAuthenticator`)\n    // which will have implications on the UI layer as typeguards and non-null checks\n    // are required to pass type checking. As the `Authenticator` is behaving as expected\n    // with the `AuthenticatorServiceContextFacade` interface, prefer to cast\n  };\n  return facade;\n};\nconst getNextServiceContextFacade = state => {\n  const actorContext = getActorContext$1(state) ?? {};\n  const challengeName = actorContext.challengeName,\n    codeDeliveryDetails = actorContext.codeDeliveryDetails,\n    errorMessage = actorContext.remoteError,\n    totpSecretCode = actorContext.totpSecretCode,\n    unverifiedUserAttributes = actorContext.unverifiedUserAttributes,\n    username = actorContext.username;\n  const _ref5 = state.context?.config ?? {},\n    federatedProviders = _ref5.socialProviders,\n    loginMechanisms = _ref5.loginMechanisms;\n  const loginMechanism = loginMechanisms?.[0];\n  const actorState = getActorState(state);\n  const isPending = state.hasTag('pending') || actorState?.hasTag('pending');\n  // @todo-migration remove this cast for Authenticator.Next\n  const route = getRoute(state, actorState);\n  return {\n    challengeName,\n    codeDeliveryDetails,\n    errorMessage,\n    federatedProviders,\n    isPending,\n    loginMechanism,\n    route,\n    totpSecretCode,\n    unverifiedUserAttributes,\n    username\n  };\n};\nconst getServiceFacade = _ref6 => {\n  let send = _ref6.send,\n    state = _ref6.state;\n  const sendEventAliases = getSendEventAliases(send);\n  const serviceContext = getServiceContextFacade(state);\n  return _objectSpread(_objectSpread({}, sendEventAliases), serviceContext);\n};\nconst getNextServiceFacade = _ref7 => {\n  let send = _ref7.send,\n    state = _ref7.state;\n  return _objectSpread(_objectSpread({}, getNextSendEventAliases(send)), getNextServiceContextFacade(state));\n};\n\n/** Federated IDPs that Authenticator supports */\nexports.FederatedIdentityProviders = void 0;\n(function (FederatedIdentityProviders) {\n  FederatedIdentityProviders[\"Apple\"] = \"Apple\";\n  FederatedIdentityProviders[\"Amazon\"] = \"Amazon\";\n  FederatedIdentityProviders[\"Facebook\"] = \"Facebook\";\n  FederatedIdentityProviders[\"Google\"] = \"Google\";\n})(exports.FederatedIdentityProviders || (exports.FederatedIdentityProviders = {}));\n/**\n * Cognito user contact method types that have not been verified as valid\n */\nexports.UnverifiedContactMethodType = void 0;\n(function (UnverifiedContactMethodType) {\n  UnverifiedContactMethodType[\"Email\"] = \"email\";\n  UnverifiedContactMethodType[\"PhoneNumber\"] = \"phone_number\";\n})(exports.UnverifiedContactMethodType || (exports.UnverifiedContactMethodType = {}));\nconst isUnverifiedContactMethodType = value => Object.values(exports.UnverifiedContactMethodType).findIndex(val => val === value) >= 0;\n\n/** Array of auth fields that we supply defaults with */\nconst signUpFieldsWithDefault = ['birthdate', 'email', 'family_name', 'given_name', 'middle_name', 'name', 'nickname', 'phone_number', 'preferred_username', 'profile', 'website'];\n/** Array of auth fields that we do not supply defaults with */\nconst signUpFieldsWithoutDefault = ['address', 'gender', 'locale', 'picture', 'updated_at', 'zoneinfo'];\n/** Array of known login mechanisms */\nconst LoginMechanismArray = ['username', 'email', 'phone_number'];\nconst authFieldsWithDefaults = [...LoginMechanismArray, ...signUpFieldsWithDefault, 'confirmation_code', 'password', 'confirm_password'];\nconst isAuthFieldsWithDefaults = field => {\n  return authFieldsWithDefaults.includes(field);\n};\nconst ComponentClassName = {\n  Accordion: 'amplify-accordion',\n  AccordionItem: 'amplify-accordion__item',\n  AccordionItemTrigger: 'amplify-accordion__item__trigger',\n  AccordionItemContent: 'amplify-accordion__item__content',\n  AccordionItemIcon: 'amplify-accordion__item__icon',\n  Alert: 'amplify-alert',\n  AlertIcon: 'amplify-alert__icon',\n  AlertHeading: 'amplify-alert__heading',\n  AlertBody: 'amplify-alert__body',\n  AlertDismiss: 'amplify-alert__dismiss',\n  Autocomplete: 'amplify-autocomplete',\n  AutocompleteMenu: 'amplify-autocomplete__menu',\n  AutocompleteMenuEmpty: 'amplify-autocomplete__menu--empty',\n  AutocompleteMenuFooter: 'amplify-autocomplete__menu__footer',\n  AutocompleteMenuHeader: 'amplify-autocomplete__menu__header',\n  AutocompleteMenuLoading: 'amplify-autocomplete__menu--loading',\n  AutocompleteMenuOption: 'amplify-autocomplete__menu__option',\n  AutocompleteMenuOptions: 'amplify-autocomplete__menu__options',\n  Badge: 'amplify-badge',\n  Breadcrumbs: 'amplify-breadcrumbs',\n  BreadcrumbsList: 'amplify-breadcrumbs__list',\n  BreadcrumbsItem: 'amplify-breadcrumbs__item',\n  BreadcrumbsSeparator: 'amplify-breadcrumbs__separator',\n  BreadcrumbsLink: 'amplify-breadcrumbs__link',\n  Button: 'amplify-button',\n  ButtonGroup: 'amplify-buttongroup',\n  ButtonLoaderWrapper: 'amplify-button__loader-wrapper',\n  Card: 'amplify-card',\n  Checkbox: 'amplify-checkbox',\n  CheckboxButton: 'amplify-checkbox__button',\n  CheckboxIcon: 'amplify-checkbox__icon',\n  CheckboxInput: 'amplify-checkbox__input',\n  CheckboxLabel: 'amplify-checkbox__label',\n  CheckboxField: 'amplify-checkboxfield',\n  Collection: 'amplify-collection',\n  CollectionItems: 'amplify-collection-items',\n  CollectionSearch: 'amplify-collection-search',\n  CollectionPagination: 'amplify-collection-pagination',\n  CountryCodeSelect: 'amplify-countrycodeselect',\n  DialCodeSelect: 'amplify-dialcodeselect',\n  Divider: 'amplify-divider',\n  DividerLabel: 'amplify-divider--label',\n  DropZone: 'amplify-dropzone',\n  Field: 'amplify-field',\n  FieldDescription: 'amplify-field__description',\n  FieldErrorMessage: 'amplify-field__error-message',\n  FieldGroup: 'amplify-field-group',\n  FieldGroupControl: 'amplify-field-group__control',\n  FieldGroupOuterEnd: 'amplify-field-group__outer-end',\n  FieldGroupOuterStart: 'amplify-field-group__outer-start',\n  FieldGroupInnerEnd: 'amplify-field-group__inner-end',\n  FieldGroupInnerStart: 'amplify-field-group__inner-start',\n  FieldGroupIcon: 'amplify-field-group__icon',\n  FieldGroupIconButton: 'amplify-field-group__icon-button',\n  FieldGroupHasInnerEnd: 'amplify-field-group--has-inner-end',\n  FieldGroupHasInnerStart: 'amplify-field-group--has-inner-start',\n  FieldShowPassword: 'amplify-field__show-password',\n  FieldGroupFieldWrapper: 'amplify-field-group__field-wrapper',\n  Fieldset: 'amplify-fieldset',\n  FieldsetLegend: 'amplify-fieldset__legend',\n  Flex: 'amplify-flex',\n  Grid: 'amplify-grid',\n  Heading: 'amplify-heading',\n  HighlightMatch: 'amplify-highlightmatch',\n  HighlightMatchHighlighted: 'amplify-highlightmatch__highlighted',\n  Icon: 'amplify-icon',\n  Image: 'amplify-image',\n  Input: 'amplify-input',\n  Label: 'amplify-label',\n  Link: 'amplify-link',\n  Loader: 'amplify-loader',\n  LoaderLabel: 'amplify-loader__label',\n  MenuContent: 'amplify-menu__content',\n  MenuItem: 'amplify-menu__content__item',\n  MenuTrigger: 'amplify-menu__trigger',\n  MenuWrapper: 'amplify-menu__wrapper',\n  Message: 'amplify-message',\n  MessageIcon: 'amplify-message__icon',\n  MessageHeading: 'amplify-message__heading',\n  MessageBody: 'amplify-message__body',\n  MessageContent: 'amplify-message__content',\n  MessageDismiss: 'amplify-message__dismiss',\n  Pagination: 'amplify-pagination',\n  PaginationItem: 'amplify-pagination__item',\n  PasswordField: 'amplify-passwordfield',\n  PhoneNumberField: 'amplify-phonenumberfield',\n  Placeholder: 'amplify-placeholder',\n  Radio: 'amplify-radio',\n  RadioButton: 'amplify-radio__button',\n  RadioInput: 'amplify-radio__input',\n  RadioLabel: 'amplify-radio__label',\n  RadioGroupField: 'amplify-radiogroupfield',\n  RadioGroup: 'amplify-radiogroup',\n  Rating: 'amplify-rating',\n  RatingItem: 'amplify-rating__item',\n  RatingIcon: 'amplify-rating__icon',\n  RatingLabel: 'amplify-rating__label',\n  ScrollView: 'amplify-scrollview',\n  SearchField: 'amplify-searchfield',\n  SearchFieldClear: 'amplify-searchfield__clear',\n  SearchFieldSearch: 'amplify-searchfield__search',\n  Select: 'amplify-select',\n  SelectField: 'amplify-selectfield',\n  SelectWrapper: 'amplify-select__wrapper',\n  SelectIcon: 'amplify-select__icon',\n  SliderField: 'amplify-sliderfield',\n  SliderFieldGroup: 'amplify-sliderfield__group',\n  SliderFieldLabel: 'amplify-sliderfield__label',\n  SliderFieldRange: 'amplify-sliderfield__range',\n  SliderFieldRoot: 'amplify-sliderfield__root',\n  SliderFieldThumb: 'amplify-sliderfield__thumb',\n  SliderFieldTrack: 'amplify-sliderfield__track',\n  StepperField: 'amplify-stepperfield',\n  StepperFieldButtonDecrease: 'amplify-stepperfield__button--decrease',\n  StepperFieldButtonIncrease: 'amplify-stepperfield__button--increase',\n  StepperFieldInput: 'amplify-stepperfield__input',\n  StorageImage: 'amplify-storageimage',\n  StorageManager: 'amplify-storagemanager',\n  StorageManagerDropZone: 'amplify-storagemanager__dropzone',\n  StorageManagerDropZoneIcon: 'amplify-storagemanager__dropzone__icon',\n  StorageManagerDropZoneText: 'amplify-storagemanager__dropzone__text',\n  StorageManagerFilePicker: 'amplify-storagemanager__file__picker',\n  StorageManagerFile: 'amplify-storagemanager__file',\n  StorageManagerFileWrapper: 'amplify-storagemanager__file__wrapper',\n  StorageManagerFileList: 'amplify-storagemanager__file__list',\n  StorageManagerFileName: 'amplify-storagemanager__file__name',\n  StorageManagerFileSize: 'amplify-storagemanager__file__size',\n  StorageManagerFileInfo: 'amplify-storagemanager__file__info',\n  StorageManagerFileImage: 'amplify-storagemanager__file__image',\n  StorageManagerFileMain: 'amplify-storagemanager__file__main',\n  StorageManagerFileStatus: 'amplify-storagemanager__file__status',\n  StorageManagerLoader: 'amplify-storagemanager__loader',\n  StorageManagerPreviewer: 'amplify-storagemanager__previewer',\n  StorageManagerPreviewerText: 'amplify-storagemanager__previewer__text',\n  StorageManagerPreviewerActions: 'amplify-storagemanager__previewer__actions',\n  StorageManagerPreviewerFooter: 'amplify-storagemanager__previewer__footer',\n  SwitchField: 'amplify-switchfield',\n  SwitchLabel: 'amplify-switch__label',\n  SwitchThumb: 'amplify-switch__thumb',\n  SwitchTrack: 'amplify-switch__track',\n  SwitchWrapper: 'amplify-switch__wrapper',\n  Table: 'amplify-table',\n  TableCaption: 'amplify-table__caption',\n  TableBody: 'amplify-table__body',\n  TableTd: 'amplify-table__td',\n  TableTh: 'amplify-table__th',\n  TableFoot: 'amplify-table__foot',\n  TableHead: 'amplify-table__head',\n  TableRow: 'amplify-table__row',\n  Tabs: 'amplify-tabs',\n  TabsList: 'amplify-tabs__list',\n  TabsItem: 'amplify-tabs__item',\n  TabsPanel: 'amplify-tabs__panel',\n  Text: 'amplify-text',\n  Textarea: 'amplify-textarea',\n  TextAreaField: 'amplify-textareafield',\n  TextField: 'amplify-textfield',\n  ToggleButton: 'amplify-togglebutton',\n  ToggleButtonGroup: 'amplify-togglebuttongroup',\n  VisuallyHidden: 'amplify-visually-hidden'\n};\nconst getFormDataFromEvent = event => {\n  const formData = new FormData(event.target);\n  return Object.fromEntries(formData);\n};\nconst setFormOrder = (formOverrides, fieldNames) => {\n  let orderedKeys = [];\n  if (formOverrides) {\n    orderedKeys = Object.keys(formOverrides).reduce((prev, key) => {\n      // reduce to array that can be sorted\n      prev.push([key, formOverrides[key]?.order]);\n      return prev;\n    }, []).sort((a, b) =>\n    //sort them based on order\n    a[1] - b[1]) // returned just key\n    .filter(a => a[1] !== undefined).map(a => a[0]);\n  }\n  // remove duplicates\n  return Array.from(new Set([...orderedKeys, ...fieldNames]));\n};\nconst isAuthFieldWithDefaults = field => {\n  return authFieldsWithDefaults.includes(field);\n};\nconst isArray = val => {\n  return Array.isArray(val);\n};\nconst getErrors = errors => {\n  if (!errors) return null;\n  if (isArray(errors)) {\n    return errors;\n  } else {\n    return [errors];\n  }\n};\n\n// replaces all characters in a string with '*', except for the first and last char\nconst censorAllButFirstAndLast = value => {\n  const split = value.trim().split('');\n  for (let i = 0; i < split.length; i++) {\n    if (i > 0 && i < split.length - 1) {\n      split[i] = '*';\n    }\n  }\n  return split.join('');\n};\n// censors all but the last four characters of a phone number\nconst censorPhoneNumber = val => {\n  if (val.length < 4) {\n    return val;\n  }\n  const split = val.split('');\n  for (let i = 0; i < split.length - 4; i++) {\n    split[i] = '*';\n  }\n  return split.join('');\n};\n// censors all but the first and last of the name of an email and keeps domain\nconst censorEmail = val => {\n  const splitEmail = val.split('@');\n  const censoredName = censorAllButFirstAndLast(splitEmail[0]);\n  return `${censoredName}@${splitEmail[1]}`;\n};\n// based on the ContactMethod type, returns a censored contact value\nconst censorContactMethod = (type, value) => {\n  return type === 'Phone Number' ? censorPhoneNumber(value) : censorEmail(value);\n};\nconst hasSpecialChars = password => ALLOWED_SPECIAL_CHARACTERS.some(char => password.includes(char));\nconst getTotpCodeURL = (issuer, username, secret) => encodeURI(`otpauth://totp/${issuer}:${username}?secret=${secret}&issuer=${issuer}`);\nfunction trimValues(values) {\n  for (var _len5 = arguments.length, ignored = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n    ignored[_key6 - 1] = arguments[_key6];\n  }\n  return Object.entries(values).reduce((acc, _ref8) => {\n    let _ref9 = _slicedToArray(_ref8, 2),\n      name = _ref9[0],\n      value = _ref9[1];\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [name]: ignored.includes(name) ? value : value?.trim()\n    });\n  }, {});\n}\nconst isValidEmail = value => {\n  if (!value) return false;\n  return emailRegex.test(value);\n};\nconst getPrimaryAlias = state => {\n  const loginMechanisms = state?.context.config?.loginMechanisms;\n  /**\n   * @migration this is where we grab only the first index of `aws_cognito_username_attributes`\n   */\n  const _ref10 = loginMechanisms ?? ['username'],\n    _ref11 = _slicedToArray(_ref10, 1),\n    primaryAlias = _ref11[0];\n  return primaryAlias;\n};\n/** Applies translations to label and placeholder */\nconst applyTranslation = formFields => {\n  const newFormFields = _objectSpread({}, formFields);\n  for (const _ref12 of Object.entries(formFields)) {\n    var _ref13 = _slicedToArray(_ref12, 2);\n    const name = _ref13[0];\n    const options = _ref13[1];\n    {\n      const label = options.label,\n        placeholder = options.placeholder;\n      newFormFields[name] = _objectSpread(_objectSpread({}, options), {}, {\n        label: label ? translate(label) : undefined,\n        placeholder: placeholder ? translate(placeholder) : undefined\n      });\n    }\n  }\n  return newFormFields;\n};\n/** Sorts formFields according to their `order`.  */\nconst sortFormFields = formFields => {\n  return Object.entries(formFields).sort((a, b) => {\n    const orderA = a[1].order || Number.MAX_VALUE;\n    const orderB = b[1].order || Number.MAX_VALUE;\n    return orderA - orderB;\n  }).filter(formFieldEntry => formFieldEntry[1] !== undefined);\n};\n\n/**\n * This file contains helpers that generate default formFields for each screen\n */\nconst DEFAULT_COUNTRY_CODE = '+1';\n/** Helper function that gets the default formField for given field name */\nconst getDefaultFormField = fieldName => {\n  let options = defaultFormFieldOptions[fieldName];\n  const _options = options,\n    type = _options.type;\n  if (type === 'tel') {\n    options = _objectSpread(_objectSpread({}, options), {}, {\n      dialCode: DEFAULT_COUNTRY_CODE\n    });\n  }\n  return options;\n};\n// Helper function that returns default form field for configured primary alias\nconst getAliasDefaultFormField = state => {\n  const primaryAlias = getPrimaryAlias(state);\n  return _objectSpread(_objectSpread({}, getDefaultFormField(primaryAlias)), {}, {\n    autocomplete: 'username'\n  });\n};\n/** Reusable confirmation code form fields. */\nconst getConfirmationCodeFormFields = state => ({\n  confirmation_code: _objectSpread(_objectSpread({}, getDefaultFormField('confirmation_code')), {}, {\n    label: 'Code *',\n    placeholder: 'Code'\n  })\n});\nconst getSignInFormFields = state => ({\n  username: _objectSpread({}, getAliasDefaultFormField(state)),\n  password: _objectSpread(_objectSpread({}, getDefaultFormField('password')), {}, {\n    autocomplete: 'current-password'\n  })\n});\nconst getSignUpFormFields = state => {\n  const _state$context$config = state.context.config,\n    loginMechanisms = _state$context$config.loginMechanisms,\n    signUpAttributes = _state$context$config.signUpAttributes;\n  const primaryAlias = getPrimaryAlias(state);\n  /**\n   * @migration signUp Fields created here\n   */\n  const fieldNames = Array.from(new Set([...loginMechanisms, 'password', 'confirm_password', ...signUpAttributes]));\n  const formField = {};\n  for (const fieldName of fieldNames) {\n    if (isAuthFieldWithDefaults(fieldName)) {\n      const fieldAttrs = fieldName === primaryAlias ? getAliasDefaultFormField(state) : getDefaultFormField(fieldName);\n      formField[fieldName] = _objectSpread({}, fieldAttrs);\n    } else {\n      // There's a `custom:*` attribute or one we don't already have an implementation for\n      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize SignUp FormFields to add your own.`);\n    }\n  }\n  return formField;\n};\nconst getConfirmSignUpFormFields = state => ({\n  confirmation_code: _objectSpread(_objectSpread({}, getDefaultFormField('confirmation_code')), {}, {\n    placeholder: 'Enter your code'\n  })\n});\nconst getForgotPasswordFormFields = state => {\n  const primaryAlias = getPrimaryAlias(state);\n  const label = defaultFormFieldOptions[primaryAlias].label;\n  return {\n    username: _objectSpread(_objectSpread({}, getAliasDefaultFormField(state)), {}, {\n      label: `Enter your ${label.toLowerCase()}`,\n      placeholder: `Enter your ${label.toLowerCase()}`\n    })\n  };\n};\nconst getConfirmResetPasswordFormFields = state => _objectSpread(_objectSpread({}, getConfirmationCodeFormFields()), {}, {\n  password: _objectSpread(_objectSpread({}, getDefaultFormField('password')), {}, {\n    label: 'New Password',\n    placeholder: 'New Password'\n  }),\n  confirm_password: _objectSpread(_objectSpread({}, getDefaultFormField('confirm_password')), {}, {\n    label: 'Confirm Password',\n    placeholder: 'Confirm Password'\n  })\n});\nconst getForceNewPasswordFormFields = state => {\n  const actorState = getActorState(state);\n  const missingAttributes = actorState.context.missingAttributes;\n  const fieldNames = Array.from(new Set(['password', 'confirm_password', ...(missingAttributes ?? [])]));\n  const formField = {};\n  for (const fieldName of fieldNames) {\n    if (isAuthFieldWithDefaults(fieldName)) {\n      formField[fieldName] = _objectSpread({}, getDefaultFormField(fieldName));\n    } else {\n      // There's a `custom:*` attribute or one we don't already have an implementation for\n      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize ForceNewPassword FormFields to add your own.`);\n    }\n  }\n  return formField;\n};\n/** Collect all the defaultFormFields getters */\nconst defaultFormFieldsGetters = {\n  signIn: getSignInFormFields,\n  signUp: getSignUpFormFields,\n  confirmSignUp: getConfirmSignUpFormFields,\n  confirmSignIn: getConfirmationCodeFormFields,\n  forceNewPassword: getForceNewPasswordFormFields,\n  forgotPassword: getForgotPasswordFormFields,\n  confirmResetPassword: getConfirmResetPasswordFormFields,\n  confirmVerifyUser: getConfirmationCodeFormFields,\n  setupTotp: getConfirmationCodeFormFields\n};\n\n// Gets the default formFields for given route\nconst getDefaultFormFields = (route, state) => {\n  const formFieldGetter = defaultFormFieldsGetters[route];\n  return formFieldGetter(state);\n};\n// Gets custom formFields, and applies default values\nconst getCustomFormFields = (route, state) => {\n  const customFormFields = getActorContext$1(state)?.formFields?.[route];\n  if (!customFormFields || Object.keys(customFormFields).length === 0) {\n    return {};\n  }\n  return Object.entries(customFormFields).reduce((acc, _ref14) => {\n    let _ref15 = _slicedToArray(_ref14, 2),\n      fieldName = _ref15[0],\n      customOptions = _ref15[1];\n    if ((route === 'signIn' || route === 'forgotPassword') && fieldName === 'username') {\n      // Unlike other screens, `signIn` and `forgotPassword` screens default login\n      // alias field names to \"username\", even if it's a phone number or email.\n      // In this case, we get the default formFieldOptions based on loginMechanism.\n      const defaultOptions = getAliasDefaultFormField(state);\n      // apply default to fill any gaps that are not present in customOptions\n      const mergedOptions = _objectSpread(_objectSpread({}, defaultOptions), customOptions);\n      return _objectSpread(_objectSpread({}, acc), {}, {\n        [fieldName]: mergedOptions\n      });\n    } else if (isAuthFieldsWithDefaults(fieldName)) {\n      // if this field is a known auth attribute that we have defaults for,\n      // apply defaults to customOptions.\n      const defaultOptions = defaultFormFieldOptions[fieldName];\n      const mergedOptions = _objectSpread(_objectSpread({}, defaultOptions), customOptions);\n      return _objectSpread(_objectSpread({}, acc), {}, {\n        [fieldName]: mergedOptions\n      });\n    } else {\n      // if this is not a known field, use customOptions as is.\n      return _objectSpread(_objectSpread({}, acc), {}, {\n        [fieldName]: customOptions\n      });\n    }\n  }, {});\n};\nconst getFormFields = (route, state) => {\n  const defaultFormFields = getDefaultFormFields(route, state);\n  const customFormFields = getCustomFormFields(route, state);\n  const formFields = _objectSpread(_objectSpread({}, defaultFormFields), customFormFields);\n  delete formFields['QR'];\n  return applyTranslation(formFields);\n};\nconst removeOrderKeys = formFields => formFields.map(field => {\n  const key = field[0];\n  // Drop order key to prevent passing to form field UI components\n  const values = _objectSpread(_objectSpread({}, field[1]), {}, {\n    order: undefined\n  });\n  return [key, values];\n});\n/** Calls `getFormFields` above, then sorts it into an indexed array */\nconst getSortedFormFields = (route, state) => {\n  const formFields = getFormFields(route, state);\n  return removeOrderKeys(sortFormFields(formFields));\n};\n\n/**\n * ConfirmSignIn\n */\nconst getChallengeText = challengeName => {\n  switch (challengeName) {\n    case 'SMS_MFA':\n      return translate(DefaultTexts.CONFIRM_SMS);\n    case 'SOFTWARE_TOKEN_MFA':\n      return translate(DefaultTexts.CONFIRM_TOTP);\n    default:\n      return translate(DefaultTexts.CONFIRM_MFA_DEFAULT);\n  }\n};\n/**\n * ConfirmSignUp\n */\nconst getDeliveryMessageText = codeDeliveryDetails => {\n  const _ref16 = codeDeliveryDetails ?? {},\n    DeliveryMedium = _ref16.DeliveryMedium,\n    Destination = _ref16.Destination;\n  const isEmailMessage = DeliveryMedium === 'EMAIL';\n  const isTextMessage = DeliveryMedium === 'SMS';\n  const arrivalMessage = translate(DefaultTexts.CODE_ARRIVAL);\n  if (!(isEmailMessage || isTextMessage)) {\n    return `${translate(DefaultTexts.CODE_SENT)}. ${arrivalMessage}.`;\n  }\n  const instructionMessage = isEmailMessage ? translate(DefaultTexts.CODE_EMAILED) : translate(DefaultTexts.CODE_TEXTED);\n  return `${instructionMessage} ${Destination}. ${arrivalMessage}.`;\n};\nconst getDeliveryMethodText = codeDeliveryDetails => {\n  const _ref17 = codeDeliveryDetails ?? {},\n    DeliveryMedium = _ref17.DeliveryMedium;\n  const isEmailMessage = DeliveryMedium === 'EMAIL';\n  const isTextMessage = DeliveryMedium === 'SMS';\n  if (!isEmailMessage && isTextMessage) {\n    return translate(DefaultTexts.WE_SENT_CODE);\n  }\n  return isEmailMessage ? translate(DefaultTexts.WE_EMAILED) : translate(DefaultTexts.WE_TEXTED);\n};\n/**\n * FederatedSignIn\n */\nconst providerNameMap = {\n  amazon: 'Amazon',\n  apple: 'Apple',\n  facebook: 'Facebook',\n  google: 'Google'\n};\nconst getSignInWithFederationText = (route, provider) => {\n  const isSignIn = route === 'signIn';\n  return translate(`Sign ${isSignIn ? 'In' : 'Up'} with ${providerNameMap[provider]}`);\n};\nconst authenticatorTextUtil = {\n  /** Shared */\n  getBackToSignInText: () => translate(DefaultTexts.BACK_SIGN_IN),\n  getChangePasswordText: () => translate(DefaultTexts.CHANGE_PASSWORD),\n  getChangingText: () => translate(DefaultTexts.CHANGING_PASSWORD),\n  getConfirmText: () => translate(DefaultTexts.CONFIRM),\n  getConfirmingText: () => translate(DefaultTexts.CONFIRMING),\n  getCopyText: () => translate(DefaultTexts.UPPERCASE_COPY),\n  getHidePasswordText: () => translate(DefaultTexts.HIDE_PASSWORD),\n  getLoadingText: () => translate(DefaultTexts.LOADING),\n  getOrText: () => translate(DefaultTexts.OR),\n  getResendCodeText: () => translate(DefaultTexts.RESEND_CODE),\n  getSendCodeText: () => translate(DefaultTexts.SEND_CODE),\n  getSendingText: () => translate(DefaultTexts.SENDING),\n  getShowPasswordText: () => translate(DefaultTexts.SHOW_PASSWORD),\n  getSubmitText: () => translate(DefaultTexts.SUBMIT),\n  getSubmittingText: () => translate(DefaultTexts.SUBMITTING),\n  /** SignInSignUpTabs */\n  getSignInTabText: () => translate(DefaultTexts.SIGN_IN_TAB),\n  getSignUpTabText: () => translate(DefaultTexts.CREATE_ACCOUNT),\n  /** SignIn */\n  getForgotPasswordText: shortVersion => translate(shortVersion ? DefaultTexts.FORGOT_PASSWORD : DefaultTexts.FORGOT_YOUR_PASSWORD),\n  getSigningInText: () => translate(DefaultTexts.SIGNING_IN_BUTTON),\n  getSignInText: () => translate(DefaultTexts.SIGN_IN_BUTTON),\n  /** SignUp */\n  getCreatingAccountText: () => translate(DefaultTexts.CREATING_ACCOUNT),\n  getCreateAccountText: () => translate(DefaultTexts.CREATE_ACCOUNT),\n  /** ConfirmSignUp */\n  getDeliveryMessageText,\n  getDeliveryMethodText,\n  /** ConfirmSignIn */\n  getChallengeText,\n  /** ForgotPassword */\n  getResetYourPasswordText: () => translate(DefaultTexts.RESET_PASSWORD),\n  /** SetupTotp */\n  getSetupTotpText: () => translate(DefaultTexts.SETUP_TOTP),\n  // TODO: add defaultText for below\n  getSetupTotpInstructionsText: () => translate('Copy and paste the secret key below into an authenticator app and then enter the code in the text field below.'),\n  // TODO: add defaultText for \"COPIED\"\n  getCopiedText: () => translate('COPIED'),\n  /** FederatedSignIn */\n  getSignInWithFederationText,\n  /** VerifyUser */\n  getSkipText: () => translate(DefaultTexts.SKIP),\n  getVerifyText: () => translate(DefaultTexts.VERIFY),\n  getVerifyContactText: () => translate(DefaultTexts.VERIFY_CONTACT),\n  getAccountRecoveryInfoText: () => translate(DefaultTexts.VERIFY_HEADING),\n  /** Validations */\n  // TODO: add defaultText\n  getInvalidEmailText: () => translate('Please enter a valid email'),\n  // TODO: add defaultText\n  getRequiredFieldText: () => translate('This field is required')\n}; // using `as const` so that keys are strongly typed\n\nconst getLogger = category => new utils$1.ConsoleLogger(`AmplifyUI:${category}`);\nconst logger = getLogger('Auth');\nconst changePassword = async _ref18 => {\n  let currentPassword = _ref18.currentPassword,\n    newPassword = _ref18.newPassword;\n  try {\n    logger.debug('calling Auth.updatePassword');\n    await auth.updatePassword({\n      oldPassword: currentPassword,\n      newPassword\n    });\n    logger.debug('Auth.updatePassword was successful');\n    return Promise.resolve();\n  } catch (e) {\n    logger.debug('Auth.updatePassword failed with error', e);\n    return Promise.reject(e);\n  }\n};\nconst deleteUser = async () => {\n  try {\n    logger.debug('calling Auth.deleteUser');\n    await auth.deleteUser();\n    logger.debug('Auth.deleteUser was successful');\n    return Promise.resolve();\n  } catch (e) {\n    logger.debug('Auth.deleteUser failed with error', e);\n    return Promise.reject(e);\n  }\n};\n\n// gets password requirement from Amplify.configure data\nconst getPasswordRequirement = () => {\n  const config = awsAmplify.Amplify.getConfig();\n  const passwordSettings = config?.Auth?.Cognito.passwordFormat;\n  if (!passwordSettings) {\n    return null;\n  }\n  return {\n    minLength: passwordSettings.minLength,\n    needsLowerCase: passwordSettings.requireLowercase ?? false,\n    needsUpperCase: passwordSettings.requireUppercase ?? false,\n    needsNumber: passwordSettings.requireNumbers ?? false,\n    needsSpecialChar: passwordSettings.requireSpecialCharacters ?? false\n  };\n};\nconst getHasMinLength = minLength => ({\n  validationMode: 'onTouched',\n  validator: field => field.length >= minLength,\n  message: `Password must have at least ${minLength} characters`\n});\nconst hasLowerCase = {\n  validationMode: 'onTouched',\n  validator: field => /[a-z]/.test(field),\n  message: 'Password must have lower case letters'\n};\nconst hasUpperCase = {\n  validationMode: 'onTouched',\n  validator: field => /[A-Z]/.test(field),\n  message: 'Password must have upper case letters'\n};\nconst hasNumber = {\n  validationMode: 'onTouched',\n  validator: field => /[0-9]/.test(field),\n  message: 'Password must have numbers'\n};\nconst hasSpecialChar = {\n  validationMode: 'onTouched',\n  validator: field => hasSpecialChars(field),\n  message: 'Password must have special characters'\n};\nconst getMatchesConfirmPassword = password => {\n  return {\n    validationMode: 'onTouched',\n    validator: confirmPassword => password === confirmPassword,\n    message: 'Your passwords must match'\n  };\n};\nconst getDefaultPasswordValidators = () => {\n  const requirement = getPasswordRequirement();\n  if (!requirement) return [];\n  const validators = [];\n  const minLength = requirement.minLength,\n    needsLowerCase = requirement.needsLowerCase,\n    needsUpperCase = requirement.needsUpperCase,\n    needsNumber = requirement.needsNumber,\n    needsSpecialChar = requirement.needsSpecialChar;\n  if (minLength) {\n    validators.push(getHasMinLength(minLength));\n  }\n  if (needsLowerCase) {\n    validators.push(hasLowerCase);\n  }\n  if (needsUpperCase) {\n    validators.push(hasUpperCase);\n  }\n  if (needsNumber) {\n    validators.push(hasNumber);\n  }\n  if (needsSpecialChar) {\n    validators.push(hasSpecialChar);\n  }\n  return validators;\n};\nconst getDefaultConfirmPasswordValidators = password => {\n  return [getMatchesConfirmPassword(password)];\n};\n/*\n * `shouldValidate` determines whether validator should be run, based on validation mode,\n * input event type, and whether it has been blurred yet.\n */\nconst shouldValidate = _ref19 => {\n  let validationMode = _ref19.validationMode,\n    eventType = _ref19.eventType,\n    hasBlurred = _ref19.hasBlurred;\n  switch (validationMode) {\n    case 'onBlur':\n      {\n        // only run validator on blur event\n        return eventType === 'blur';\n      }\n    case 'onChange':\n      {\n        // only run validator on change event\n        return eventType === 'change';\n      }\n    case 'onTouched':\n      {\n        /**\n         * run validator on first blur event, and then every subsequent\n         * blur/change event.\n         */\n        return eventType === 'blur' || hasBlurred;\n      }\n  }\n};\n// `runFieldValidator` runs all validators, and returns error messages.\nconst runFieldValidators = _ref20 => {\n  let value = _ref20.value,\n    validators = _ref20.validators,\n    eventType = _ref20.eventType,\n    hasBlurred = _ref20.hasBlurred;\n  if (!value) return [];\n  return validators.reduce((prevErrors, validatorSpec) => {\n    const validator = validatorSpec.validator,\n      validationMode = validatorSpec.validationMode,\n      message = validatorSpec.message;\n    if (shouldValidate({\n      validationMode,\n      eventType,\n      hasBlurred\n    })) {\n      const hasError = !validator(value);\n      return hasError ? [...prevErrors, message] : prevErrors;\n    }\n    return prevErrors;\n  }, []);\n};\n\n// default `autoSignIn` flag is `true`\nconst DEFAULT_AUTO_SIGN_IN = true;\nconst EMPTY_STRING = '';\nconst sanitizePhoneNumber = (dialCode, phoneNumber) => `${dialCode}${phoneNumber}`.replace(/[^A-Z0-9+]/gi, '');\nconst selectUserAttributes = (_, key) => {\n  // Allowlist of Cognito User Pool Attributes (from OpenID Connect specification)\n  // See: https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html\n  switch (key) {\n    case 'address':\n    case 'birthdate':\n    case 'email':\n    case 'family_name':\n    case 'gender':\n    case 'given_name':\n    case 'locale':\n    case 'middle_name':\n    case 'name':\n    case 'nickname':\n    case 'phone_number':\n    case 'picture':\n    case 'preferred_username':\n    case 'profile':\n    case 'updated_at':\n    case 'website':\n    case 'zoneinfo':\n      return true;\n    // Otherwise, it's a custom attribute\n    default:\n      return key.startsWith('custom:');\n  }\n};\nconst getUserAttributes = formValues => {\n  const _pickBy__default$defa = pickBy__default[\"default\"](formValues, selectUserAttributes),\n    phone_number = _pickBy__default$defa.phone_number,\n    userAttributes = _objectWithoutProperties(_pickBy__default$defa, _excluded);\n  // only include `phone_number` attribute in `userAttributes` if it has a value\n  if (isString(phone_number) && phone_number !== EMPTY_STRING) {\n    const country_code = formValues.country_code;\n    return _objectSpread(_objectSpread({}, userAttributes), {}, {\n      phone_number: sanitizePhoneNumber(country_code, phone_number)\n    });\n  }\n  return userAttributes;\n};\nconst getSignUpInput = (username, formValues, loginMechanism) => {\n  const password = formValues.password,\n    values = _objectWithoutProperties(formValues, _excluded2);\n  const attributes = getUserAttributes(values);\n  const options = {\n    autoSignIn: DEFAULT_AUTO_SIGN_IN,\n    userAttributes: _objectSpread({}, loginMechanism === 'phone_number' ? _objectSpread(_objectSpread({}, attributes), {}, {\n      phone_number: username\n    }) : attributes)\n  };\n  return {\n    username,\n    password,\n    options\n  };\n};\nconst getUsernameSignUp = _ref21 => {\n  let formValues = _ref21.formValues,\n    loginMechanisms = _ref21.loginMechanisms;\n  const loginMechanism = loginMechanisms[0];\n  if (loginMechanism === 'phone_number') {\n    const country_code = formValues.country_code,\n      phone_number = formValues.phone_number;\n    return sanitizePhoneNumber(country_code, phone_number);\n  }\n  return formValues[loginMechanism];\n};\nconst assign = xstate.actions.assign;\nconst clearActorDoneData = assign({\n  actorDoneData: undefined\n});\nconst clearChallengeName = assign({\n  challengeName: undefined\n});\nconst clearMissingAttributes = assign({\n  missingAttributes: undefined\n});\nconst clearError = assign({\n  remoteError: undefined\n});\nconst clearFormValues = assign({\n  formValues: {}\n});\nconst clearTouched = assign({\n  touched: {}\n});\nconst clearUser = assign({\n  user: undefined\n});\nconst clearValidationError = assign({\n  validationError: {}\n});\n/**\n * \"set\" actions\n */\nconst setTotpSecretCode = assign({\n  totpSecretCode: (_, _ref22) => {\n    let data = _ref22.data;\n    const _ref23 = data.nextStep?.totpSetupDetails ?? {},\n      sharedSecret = _ref23.sharedSecret;\n    return sharedSecret;\n  }\n});\nconst setSignInStep = assign({\n  step: 'SIGN_IN'\n});\nconst setShouldVerifyUserAttributeStep = assign({\n  step: 'SHOULD_CONFIRM_USER_ATTRIBUTE'\n});\nconst setConfirmAttributeCompleteStep = assign({\n  step: 'CONFIRM_ATTRIBUTE_COMPLETE'\n});\n// map v6 `signInStep` to v5 `challengeName`\nconst setChallengeName = assign({\n  challengeName: (_, _ref24) => {\n    let data = _ref24.data;\n    const signInStep = data.nextStep.signInStep;\n    return signInStep === 'CONFIRM_SIGN_IN_WITH_SMS_CODE' ? 'SMS_MFA' : signInStep === 'CONFIRM_SIGN_IN_WITH_TOTP_CODE' ? 'SOFTWARE_TOKEN_MFA' : undefined;\n  }\n});\nconst setUsernameForgotPassword = assign({\n  username: _ref25 => {\n    let formValues = _ref25.formValues,\n      loginMechanisms = _ref25.loginMechanisms;\n    const loginMechanism = loginMechanisms[0];\n    const username = formValues.username,\n      country_code = formValues.country_code;\n    if (loginMechanism === 'phone_number') {\n      // forgot password `formValues` uses `username` for base phone number value\n      // prefix `country_code` for full `username`\n      return sanitizePhoneNumber(country_code, username);\n    }\n    // default username field for loginMechanism === 'email' is \"username\" for SignIn\n    return username;\n  }\n});\nconst setUsernameSignUp = assign({\n  username: getUsernameSignUp\n});\nconst setUsernameSignIn = assign({\n  username: _ref26 => {\n    let formValues = _ref26.formValues,\n      loginMechanisms = _ref26.loginMechanisms;\n    const loginMechanism = loginMechanisms[0];\n    const username = formValues.username,\n      country_code = formValues.country_code;\n    if (loginMechanism === 'phone_number') {\n      // sign in `formValues` uses `username` for base phone number value\n      // prefix `country_code` for full `username`\n      return sanitizePhoneNumber(country_code, username);\n    }\n    // return `email` and `username`\n    return username;\n  }\n});\nconst setNextSignInStep = assign({\n  step: (_, _ref27) => {\n    let data = _ref27.data;\n    return data.nextStep.signInStep === 'DONE' ? 'SIGN_IN_COMPLETE' : data.nextStep.signInStep;\n  }\n});\nconst setNextSignUpStep = assign({\n  step: (_, _ref28) => {\n    let data = _ref28.data;\n    return data.nextStep.signUpStep === 'DONE' ? 'SIGN_UP_COMPLETE' : data.nextStep.signUpStep;\n  }\n});\nconst setNextResetPasswordStep = assign({\n  step: (_, _ref29) => {\n    let data = _ref29.data;\n    return data.nextStep.resetPasswordStep === 'DONE' ? 'RESET_PASSWORD_COMPLETE' : data.nextStep.resetPasswordStep;\n  }\n});\nconst setMissingAttributes = assign({\n  missingAttributes: (_, _ref30) => {\n    let data = _ref30.data;\n    return data.nextStep?.missingAttributes;\n  }\n});\nconst setFieldErrors = assign({\n  validationError: (_, _ref31) => {\n    let data = _ref31.data;\n    return data;\n  }\n});\nconst setRemoteError = assign({\n  remoteError: (_, _ref32) => {\n    let data = _ref32.data;\n    if (data.name === 'NoUserPoolError') {\n      return `Configuration error (see console) – please contact the administrator`;\n    }\n    return data?.message || data;\n  }\n});\nconst setUser = assign({\n  user: (_, _ref33) => {\n    let data = _ref33.data;\n    return data;\n  }\n});\nconst resolveCodeDeliveryDetails = details => ({\n  Destination: details.destination,\n  DeliveryMedium: details.deliveryMedium,\n  AttributeName: details.attributName\n});\nconst setCodeDeliveryDetails = assign({\n  codeDeliveryDetails: (_, _ref34) => {\n    let data = _ref34.data;\n    if (data?.nextStep?.codeDeliveryDetails) {\n      return resolveCodeDeliveryDetails(data.nextStep.codeDeliveryDetails);\n    }\n    return resolveCodeDeliveryDetails(data);\n  }\n});\nconst handleInput = assign({\n  formValues: (context, _ref35) => {\n    let data = _ref35.data;\n    const name = data.name,\n      value = data.value;\n    return _objectSpread(_objectSpread({}, context['formValues']), {}, {\n      [name]: value\n    });\n  }\n});\nconst handleSubmit = assign({\n  formValues: (context, _ref36) => {\n    let data = _ref36.data;\n    return (\n      // do not trim password\n      trimValues(_objectSpread(_objectSpread({}, context['formValues']), data), 'password')\n    );\n  }\n});\nconst handleBlur = assign({\n  touched: (context, _ref37) => {\n    let data = _ref37.data;\n    return _objectSpread(_objectSpread({}, context['touched']), {}, {\n      [data.name]: true\n    });\n  }\n});\nconst setUnverifiedUserAttributes = assign({\n  unverifiedUserAttributes: (_, _ref38) => {\n    let data = _ref38.data;\n    const email = data.email,\n      phone_number = data.phone_number;\n    const unverifiedUserAttributes = _objectSpread(_objectSpread({}, email && {\n      email\n    }), phone_number && {\n      phone_number\n    });\n    return unverifiedUserAttributes;\n  }\n});\nconst clearSelectedUserAttribute = assign({\n  selectedUserAttribute: undefined\n});\nconst setSelectedUserAttribute = assign({\n  selectedUserAttribute: context => context.formValues?.unverifiedAttr\n});\n// Maps to unexposed `ConfirmSignUpSignUpStep`\nconst setConfirmSignUpSignUpStep = assign({\n  step: 'CONFIRM_SIGN_UP'\n});\nconst ACTIONS = {\n  clearActorDoneData,\n  clearChallengeName,\n  clearError,\n  clearFormValues,\n  clearMissingAttributes,\n  clearSelectedUserAttribute,\n  clearTouched,\n  clearUser,\n  clearValidationError,\n  handleBlur,\n  handleInput,\n  handleSubmit,\n  setChallengeName,\n  setCodeDeliveryDetails,\n  setFieldErrors,\n  setMissingAttributes,\n  setNextResetPasswordStep,\n  setNextSignInStep,\n  setNextSignUpStep,\n  setRemoteError,\n  setConfirmAttributeCompleteStep,\n  setConfirmSignUpSignUpStep,\n  setShouldVerifyUserAttributeStep,\n  setSelectedUserAttribute,\n  setSignInStep,\n  setTotpSecretCode,\n  setUser,\n  setUnverifiedUserAttributes,\n  setUsernameForgotPassword,\n  setUsernameSignIn,\n  setUsernameSignUp\n};\nconst SIGN_IN_STEP_MFA_CONFIRMATION = ['CONFIRM_SIGN_IN_WITH_SMS_CODE', 'CONFIRM_SIGN_IN_WITH_TOTP_CODE'];\n// response next step guards\nconst shouldConfirmSignInWithNewPassword = (_, _ref39) => {\n  let data = _ref39.data;\n  return data?.nextStep.signInStep === 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED';\n};\nconst shouldResetPasswordFromSignIn = (_, _ref40) => {\n  let data = _ref40.data;\n  return data?.nextStep?.signInStep === 'RESET_PASSWORD';\n};\nconst shouldConfirmSignUpFromSignIn = (_, _ref41) => {\n  let data = _ref41.data;\n  return data?.nextStep.signInStep === 'CONFIRM_SIGN_UP';\n};\nconst shouldAutoSignIn = (_, _ref42) => {\n  let data = _ref42.data;\n  return data?.nextStep.signUpStep === 'COMPLETE_AUTO_SIGN_IN';\n};\nconst hasCompletedSignIn = (_, _ref43) => {\n  let data = _ref43.data;\n  return data?.nextStep.signInStep === 'DONE';\n};\nconst hasCompletedSignUp = (_, _ref44) => {\n  let data = _ref44.data;\n  return data?.nextStep.signUpStep === 'DONE';\n};\nconst hasCompletedResetPassword = (_, _ref45) => {\n  let data = _ref45.data;\n  return data?.nextStep.resetPasswordStep === 'DONE';\n};\n// actor done guards read `step` from actor exit event\nconst hasCompletedAttributeConfirmation = (_, _ref46) => {\n  let data = _ref46.data;\n  return data?.step === 'CONFIRM_ATTRIBUTE_COMPLETE';\n};\nconst isConfirmUserAttributeStep = (_, _ref47) => {\n  let data = _ref47.data;\n  return data?.step === 'CONFIRM_ATTRIBUTE_WITH_CODE';\n};\nconst isShouldConfirmUserAttributeStep = (_, _ref48) => {\n  let data = _ref48.data;\n  return data?.step === 'SHOULD_CONFIRM_USER_ATTRIBUTE';\n};\nconst isResetPasswordStep = (_, _ref49) => {\n  let data = _ref49.data;\n  return data?.step === 'RESET_PASSWORD';\n};\nconst isConfirmSignUpStep = (_, _ref50) => {\n  let data = _ref50.data;\n  return data?.step === 'CONFIRM_SIGN_UP';\n};\n// actor entry guards read `step` from actor context\nconst shouldConfirmSignIn = _ref51 => {\n  let step = _ref51.step;\n  return SIGN_IN_STEP_MFA_CONFIRMATION.includes(step);\n};\nconst shouldSetupTotp = _ref52 => {\n  let step = _ref52.step;\n  return step === 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP';\n};\nconst shouldResetPassword = _ref53 => {\n  let step = _ref53.step;\n  return step === 'RESET_PASSWORD';\n};\nconst shouldConfirmResetPassword = _ref54 => {\n  let step = _ref54.step;\n  return step === 'CONFIRM_RESET_PASSWORD_WITH_CODE';\n};\nconst shouldConfirmSignUp = _ref55 => {\n  let step = _ref55.step;\n  return step === 'CONFIRM_SIGN_UP';\n};\n// miscellaneous guards\nconst shouldVerifyAttribute = (_, _ref56) => {\n  let data = _ref56.data;\n  const phone_number_verified = data.phone_number_verified,\n    email_verified = data.email_verified;\n  // email/phone_verified is returned as a string\n  const emailNotVerified = email_verified === undefined || email_verified === 'false';\n  const phoneNotVerified = phone_number_verified === undefined || phone_number_verified === 'false';\n  // only request verification if both email and phone are not verified\n  return emailNotVerified && phoneNotVerified;\n};\n/**\n * This guard covers an edge case that exists in the current state of the UI.\n * As of now, our ConfirmSignUp screen only supports showing an input for a\n * confirmation code. However, a Cognito UserPool can instead verify users\n * through a link that gets emailed to them. If a user verifies through the\n * link and then they click on the \"Resend Code\" button, they will get an error\n * saying that the user has already been confirmed. If we encounter that error,\n * we want to just funnel them through the rest of the flow. In the future, we will\n * want to update our UI to support both confirmation codes and links.\n *\n * https://github.com/aws-amplify/amplify-ui/issues/219\n */\nconst isUserAlreadyConfirmed = (_, _ref57) => {\n  let data = _ref57.data;\n  return data.message === 'User is already confirmed.';\n};\nconst GUARDS = {\n  hasCompletedAttributeConfirmation,\n  hasCompletedResetPassword,\n  hasCompletedSignIn,\n  hasCompletedSignUp,\n  isConfirmSignUpStep,\n  isConfirmUserAttributeStep,\n  isResetPasswordStep,\n  isShouldConfirmUserAttributeStep,\n  isUserAlreadyConfirmed,\n  shouldAutoSignIn,\n  shouldConfirmResetPassword,\n  shouldConfirmSignIn,\n  shouldConfirmSignInWithNewPassword,\n  shouldConfirmSignUp,\n  shouldConfirmSignUpFromSignIn,\n  shouldResetPassword,\n  shouldResetPasswordFromSignIn,\n  shouldSetupTotp,\n  shouldVerifyAttribute\n};\n\n// Runs all validators given. Resolves if there are no error. Rejects otherwise.\nconst runValidators = async (formData, touchData, passwordSettings, validators) => {\n  const errors = await Promise.all(validators.map(validator => validator(formData, touchData, passwordSettings)));\n  const mergedError = merge__default[\"default\"]({}, ...errors);\n  if (isEmpty(mergedError)) {\n    // no errors were found\n    return Promise.resolve();\n  } else {\n    return Promise.reject(mergedError);\n  }\n};\n\n// Cognito does not allow a password length less then 8 characters\nconst DEFAULT_COGNITO_PASSWORD_MIN_LENGTH = 8;\nconst isInvalidUserAtributes = userAttributes => Array.isArray(userAttributes);\nconst parseUserAttributes = userAttributes => {\n  if (!userAttributes) {\n    return undefined;\n  }\n  // `aws-amplify` versions <= 6.0.5 return an array of `userAttributes` rather than an object\n  if (isInvalidUserAtributes(userAttributes)) {\n    return Object.entries(userAttributes).map(_ref58 => {\n      let _ref59 = _slicedToArray(_ref58, 2),\n        _ = _ref59[0],\n        value = _ref59[1];\n      return Object.keys(value)[0];\n    });\n  }\n  return Object.keys(userAttributes);\n};\nconst defaultServices = {\n  async getAmplifyConfig() {\n    const result = awsAmplify.Amplify.getConfig();\n    const cliConfig = result.Auth?.Cognito;\n    const _ref60 = result.Auth?.Cognito ?? {},\n      loginWith = _ref60.loginWith,\n      userAttributes = _ref60.userAttributes;\n    const parsedLoginMechanisms = loginWith ? Object.entries(loginWith).filter(_ref61 => {\n      let _ref62 = _slicedToArray(_ref61, 2),\n        key = _ref62[0],\n        _value = _ref62[1];\n      return key !== 'oauth';\n    }).filter(_ref63 => {\n      let _ref64 = _slicedToArray(_ref63, 2),\n        _key = _ref64[0],\n        value = _ref64[1];\n      return !!value;\n    }).map(keyValueArray => {\n      return keyValueArray[0] === 'phone' // the key for phone_number is phone in getConfig but everywhere else we treat is as phone_number\n      ? 'phone_number' : keyValueArray[0];\n    }) : undefined;\n    const parsedSignupAttributes = parseUserAttributes(userAttributes);\n    const parsedSocialProviders = loginWith?.oauth?.providers ? loginWith.oauth.providers?.map(provider => provider.toString().toLowerCase()) : undefined;\n    return _objectSpread(_objectSpread({}, cliConfig), {}, {\n      loginMechanisms: parsedLoginMechanisms,\n      signUpAttributes: parsedSignupAttributes,\n      socialProviders: parsedSocialProviders\n    });\n  },\n  getCurrentUser: auth.getCurrentUser,\n  handleSignIn: auth.signIn,\n  handleSignUp: auth.signUp,\n  handleConfirmSignIn: auth.confirmSignIn,\n  handleConfirmSignUp: auth.confirmSignUp,\n  handleForgotPasswordSubmit: auth.confirmResetPassword,\n  handleForgotPassword: auth.resetPassword,\n  // Validation hooks for overriding\n  async validateCustomSignUp(formData, touchData) {},\n  async validateFormPassword(formData, touchData, passwordSettings) {\n    const password = formData.password;\n    const touched_password = touchData.password;\n    /**\n     * If the password is not touched,\n     * or if the password settings are not set, we don't need to validate it.\n     */\n    if (!touched_password || !passwordSettings) return null;\n    const password_complexity = [];\n    const policyMinLength = passwordSettings.minLength ?? DEFAULT_COGNITO_PASSWORD_MIN_LENGTH;\n    if (password.length < policyMinLength) {\n      password_complexity.push(`Password must have at least ${policyMinLength} characters`);\n    }\n    if (passwordSettings.requireLowercase && !/[a-z]/.test(password)) password_complexity.push('Password must have lower case letters');\n    if (passwordSettings.requireUppercase && !/[A-Z]/.test(password)) password_complexity.push('Password must have upper case letters');\n    if (passwordSettings.requireNumbers && !/[0-9]/.test(password)) password_complexity.push('Password must have numbers');\n    // https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-policies.html\n    if (passwordSettings.requireSpecialCharacters && !hasSpecialChars(password)) password_complexity.push('Password must have special characters');\n    /**\n     * Only return an error if there is at least one error.\n     */\n    return password_complexity.length !== 0 ? {\n      password: password_complexity\n    } : null;\n  },\n  async validateConfirmPassword(formData, touchData) {\n    const password = formData.password,\n      confirm_password = formData.confirm_password;\n    const touched_confirm_password = touchData.confirm_password,\n      touched_password = touchData.password;\n    if (!password && !confirm_password) {\n      // these inputs are clean, don't complain yet\n      return null;\n    } else if ((password || confirm_password) && password !== confirm_password && (touched_confirm_password && touched_password || password?.length >= 6 && confirm_password?.length >= 6)) {\n      // Only return an error if both fields have text entered,\n      // the passwords do not match, and the fields have been\n      // touched or the password and confirm password is longer then or equal to 6.\n      return {\n        confirm_password: 'Your passwords must match'\n      };\n    }\n  },\n  async validatePreferredUsername(formData, touchData) {}\n};\nfunction forgotPasswordActor(_ref65) {\n  let services = _ref65.services;\n  return xstate.createMachine({\n    id: 'forgotPasswordActor',\n    initial: 'init',\n    predictableActionArguments: true,\n    states: {\n      init: {\n        always: [{\n          cond: 'shouldResetPassword',\n          target: 'confirmResetPassword'\n        }, {\n          cond: 'shouldConfirmResetPassword',\n          target: 'confirmResetPassword'\n        }, {\n          target: 'forgotPassword'\n        }]\n      },\n      forgotPassword: {\n        initial: 'edit',\n        entry: 'sendUpdate',\n        exit: ['clearError', 'clearTouched'],\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              CHANGE: {\n                actions: 'handleInput'\n              },\n              BLUR: {\n                actions: 'handleBlur'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['sendUpdate', 'clearError', 'setUsernameForgotPassword'],\n            invoke: {\n              src: 'handleResetPassword',\n              onDone: {\n                actions: ['setCodeDeliveryDetails', 'setNextResetPasswordStep'],\n                target: '#forgotPasswordActor.confirmResetPassword'\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit'\n              }\n            }\n          }\n        }\n      },\n      confirmResetPassword: {\n        type: 'parallel',\n        exit: ['clearFormValues', 'clearError', 'clearTouched'],\n        states: {\n          validation: {\n            initial: 'pending',\n            states: {\n              pending: {\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'valid',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    target: 'invalid',\n                    actions: 'setFieldErrors'\n                  }\n                }\n              },\n              valid: {\n                entry: 'sendUpdate'\n              },\n              invalid: {\n                entry: 'sendUpdate'\n              }\n            },\n            on: {\n              CHANGE: {\n                actions: 'handleInput',\n                target: '.pending'\n              },\n              BLUR: {\n                actions: 'handleBlur',\n                target: '.pending'\n              }\n            }\n          },\n          submission: {\n            initial: 'idle',\n            states: {\n              idle: {\n                entry: 'sendUpdate',\n                on: {\n                  SUBMIT: {\n                    actions: 'handleSubmit',\n                    target: 'validate'\n                  },\n                  RESEND: 'resendCode',\n                  CHANGE: {\n                    actions: 'handleInput'\n                  },\n                  BLUR: {\n                    actions: 'handleBlur'\n                  }\n                }\n              },\n              validate: {\n                entry: 'sendUpdate',\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'pending',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    target: 'idle',\n                    actions: 'setFieldErrors'\n                  }\n                }\n              },\n              resendCode: {\n                tags: 'pending',\n                entry: ['clearError', 'sendUpdate'],\n                invoke: {\n                  src: 'handleResetPassword',\n                  onDone: {\n                    target: 'idle'\n                  },\n                  onError: {\n                    actions: 'setRemoteError',\n                    target: 'idle'\n                  }\n                }\n              },\n              pending: {\n                tags: 'pending',\n                entry: ['clearError', 'sendUpdate'],\n                invoke: {\n                  src: 'handleConfirmResetPassword',\n                  onDone: [{\n                    cond: 'hasCompletedResetPassword',\n                    actions: 'setNextResetPasswordStep',\n                    target: '#forgotPasswordActor.resolved'\n                  }, {\n                    actions: 'setSignInStep',\n                    target: '#forgotPasswordActor.resolved'\n                  }],\n                  onError: {\n                    actions: 'setRemoteError',\n                    target: 'idle'\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: 'final',\n        data: _ref66 => {\n          let step = _ref66.step;\n          return {\n            step\n          };\n        }\n      }\n    }\n  }, {\n    // sendUpdate is a HOC\n    actions: _objectSpread(_objectSpread({}, ACTIONS), {}, {\n      sendUpdate: xstate.sendUpdate()\n    }),\n    guards: GUARDS,\n    services: {\n      handleResetPassword(_ref67) {\n        let username = _ref67.username;\n        return services.handleForgotPassword({\n          username\n        });\n      },\n      handleConfirmResetPassword(_ref68) {\n        let formValues = _ref68.formValues,\n          username = _ref68.username;\n        const confirmationCode = formValues.confirmation_code,\n          newPassword = formValues.password;\n        return services.handleForgotPasswordSubmit({\n          confirmationCode,\n          newPassword,\n          username\n        });\n      },\n      validateFields(context) {\n        return runValidators(context.formValues, context.touched, context.passwordSettings, [defaultServices.validateFormPassword, defaultServices.validateConfirmPassword]);\n      }\n    }\n  });\n}\nconst getFederatedSignInState = target => ({\n  entry: ['sendUpdate', 'clearError'],\n  invoke: {\n    src: 'signInWithRedirect',\n    onDone: {\n      target\n    },\n    onError: {\n      actions: 'setRemoteError',\n      target\n    }\n  }\n});\nconst handleSignInResponse = {\n  onDone: [{\n    cond: 'hasCompletedSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signInActor.fetchUserAttributes'\n  }, {\n    cond: 'shouldConfirmSignInWithNewPassword',\n    actions: ['setMissingAttributes', 'setNextSignInStep'],\n    target: '#signInActor.forceChangePassword'\n  }, {\n    cond: 'shouldResetPasswordFromSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signInActor.resetPassword'\n  }, {\n    cond: 'shouldConfirmSignUpFromSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signInActor.resendSignUpCode'\n  }, {\n    actions: ['setChallengeName', 'setMissingAttributes', 'setNextSignInStep', 'setTotpSecretCode'],\n    target: '#signInActor.init'\n  }],\n  onError: {\n    actions: 'setRemoteError',\n    target: 'edit'\n  }\n};\nconst handleFetchUserAttributesResponse$1 = {\n  onDone: [{\n    cond: 'shouldVerifyAttribute',\n    actions: ['setShouldVerifyUserAttributeStep', 'setUnverifiedUserAttributes'],\n    target: '#signInActor.resolved'\n  }, {\n    actions: 'setConfirmAttributeCompleteStep',\n    target: '#signInActor.resolved'\n  }],\n  onError: {\n    actions: 'setConfirmAttributeCompleteStep',\n    target: '#signInActor.resolved'\n  }\n};\nfunction signInActor(_ref69) {\n  let services = _ref69.services;\n  return xstate.createMachine({\n    id: 'signInActor',\n    initial: 'init',\n    predictableActionArguments: true,\n    states: {\n      init: {\n        always: [{\n          cond: 'shouldConfirmSignIn',\n          target: 'confirmSignIn'\n        }, {\n          cond: 'shouldSetupTotp',\n          target: 'setupTotp'\n        }, {\n          cond: _ref70 => {\n            let step = _ref70.step;\n            return step === 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED';\n          },\n          actions: 'setActorDoneData',\n          target: 'forceChangePassword'\n        }, {\n          target: 'signIn'\n        }]\n      },\n      federatedSignIn: getFederatedSignInState('signIn'),\n      fetchUserAttributes: {\n        invoke: _objectSpread({\n          src: 'fetchUserAttributes'\n        }, handleFetchUserAttributesResponse$1)\n      },\n      resendSignUpCode: {\n        invoke: {\n          src: 'handleResendSignUpCode',\n          onDone: {\n            actions: 'setCodeDeliveryDetails',\n            target: '#signInActor.resolved'\n          },\n          onError: {\n            actions: 'setRemoteError',\n            target: '#signInActor.signIn'\n          }\n        }\n      },\n      resetPassword: {\n        invoke: {\n          src: 'resetPassword',\n          onDone: [{\n            actions: 'setCodeDeliveryDetails',\n            target: '#signInActor.resolved'\n          }],\n          onError: {\n            actions: ['setRemoteError', 'sendUpdate']\n          }\n        }\n      },\n      signIn: {\n        initial: 'edit',\n        exit: 'clearTouched',\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              CHANGE: {\n                actions: 'handleInput'\n              },\n              FEDERATED_SIGN_IN: {\n                target: '#signInActor.federatedSignIn'\n              },\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['clearError', 'sendUpdate', 'setUsernameSignIn'],\n            exit: 'clearFormValues',\n            invoke: _objectSpread({\n              src: 'handleSignIn'\n            }, handleSignInResponse)\n          }\n        }\n      },\n      confirmSignIn: {\n        initial: 'edit',\n        exit: ['clearChallengeName', 'clearFormValues', 'clearError', 'clearTouched'],\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              SIGN_IN: '#signInActor.signIn',\n              CHANGE: {\n                actions: 'handleInput'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['clearError', 'sendUpdate'],\n            invoke: _objectSpread({\n              src: 'confirmSignIn'\n            }, handleSignInResponse)\n          }\n        }\n      },\n      forceChangePassword: {\n        entry: 'sendUpdate',\n        type: 'parallel',\n        exit: ['clearFormValues', 'clearError', 'clearTouched'],\n        states: {\n          validation: {\n            initial: 'pending',\n            states: {\n              pending: {\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'valid',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    target: 'invalid',\n                    actions: 'setFieldErrors'\n                  }\n                }\n              },\n              valid: {\n                entry: 'sendUpdate'\n              },\n              invalid: {\n                entry: 'sendUpdate'\n              }\n            },\n            on: {\n              SIGN_IN: {\n                actions: 'setSignInStep',\n                target: '#signInActor.resolved'\n              },\n              CHANGE: {\n                actions: 'handleInput',\n                target: '.pending'\n              },\n              BLUR: {\n                actions: 'handleBlur',\n                target: '.pending'\n              }\n            }\n          },\n          submit: {\n            initial: 'edit',\n            entry: 'clearError',\n            states: {\n              edit: {\n                entry: 'sendUpdate',\n                on: {\n                  SUBMIT: {\n                    actions: 'handleSubmit',\n                    target: 'validate'\n                  }\n                }\n              },\n              validate: {\n                entry: 'sendUpdate',\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    actions: 'clearValidationError',\n                    target: 'pending'\n                  },\n                  onError: {\n                    actions: 'setFieldErrors',\n                    target: 'edit'\n                  }\n                }\n              },\n              pending: {\n                tags: 'pending',\n                entry: ['sendUpdate', 'clearError'],\n                invoke: _objectSpread({\n                  src: 'handleForceChangePassword'\n                }, handleSignInResponse)\n              }\n            }\n          }\n        }\n      },\n      setupTotp: {\n        initial: 'edit',\n        exit: ['clearFormValues', 'clearError', 'clearTouched'],\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              SIGN_IN: '#signInActor.signIn',\n              CHANGE: {\n                actions: 'handleInput'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['sendUpdate', 'clearError'],\n            invoke: _objectSpread({\n              src: 'confirmSignIn'\n            }, handleSignInResponse)\n          }\n        }\n      },\n      resolved: {\n        type: 'final',\n        data: context => ({\n          codeDeliveryDetails: context.codeDeliveryDetails,\n          remoteError: context.remoteError,\n          step: context.step,\n          unverifiedUserAttributes: context.unverifiedUserAttributes,\n          username: context.username\n        })\n      }\n    }\n  }, {\n    // sendUpdate is a HOC\n    actions: _objectSpread(_objectSpread({}, ACTIONS), {}, {\n      sendUpdate: xstate.sendUpdate()\n    }),\n    guards: GUARDS,\n    services: {\n      async fetchUserAttributes() {\n        return auth.fetchUserAttributes();\n      },\n      resetPassword(_ref71) {\n        let username = _ref71.username;\n        return auth.resetPassword({\n          username\n        });\n      },\n      handleResendSignUpCode(_ref72) {\n        let username = _ref72.username;\n        return auth.resendSignUpCode({\n          username\n        });\n      },\n      handleSignIn(_ref73) {\n        let formValues = _ref73.formValues,\n          username = _ref73.username;\n        const password = formValues.password;\n        return services.handleSignIn({\n          username,\n          password\n        });\n      },\n      confirmSignIn(_ref74) {\n        let formValues = _ref74.formValues;\n        const challengeResponse = formValues.confirmation_code;\n        return services.handleConfirmSignIn({\n          challengeResponse\n        });\n      },\n      async handleForceChangePassword(_ref75) {\n        let formValues = _ref75.formValues;\n        let challengeResponse = formValues.password,\n          phone_number = formValues.phone_number,\n          country_code = formValues.country_code,\n          confirm_password = formValues.confirm_password,\n          userAttributes = _objectWithoutProperties(formValues, _excluded3);\n        let phoneNumberWithCountryCode;\n        if (phone_number) {\n          phoneNumberWithCountryCode = `${country_code}${phone_number}`.replace(/[^A-Z0-9+]/gi, '');\n          userAttributes = _objectSpread(_objectSpread({}, userAttributes), {}, {\n            phone_number: phoneNumberWithCountryCode\n          });\n        }\n        const input = {\n          challengeResponse,\n          options: {\n            userAttributes\n          }\n        };\n        return auth.confirmSignIn(input);\n      },\n      signInWithRedirect(_, _ref76) {\n        let data = _ref76.data;\n        return auth.signInWithRedirect(data);\n      },\n      async validateFields(context) {\n        return runValidators(context.formValues, context.touched, context.passwordSettings, [defaultServices.validateFormPassword, defaultServices.validateConfirmPassword]);\n      }\n    }\n  });\n}\nconst handleResetPasswordResponse = {\n  onDone: [{\n    actions: 'setCodeDeliveryDetails',\n    target: '#signUpActor.resolved'\n  }],\n  onError: {\n    actions: ['setRemoteError', 'sendUpdate']\n  }\n};\nconst handleAutoSignInResponse = {\n  onDone: [{\n    cond: 'hasCompletedSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signUpActor.fetchUserAttributes'\n  }, {\n    cond: 'shouldConfirmSignInWithNewPassword',\n    actions: 'setNextSignInStep',\n    target: '#signUpActor.resolved'\n  }, {\n    cond: 'shouldResetPasswordFromSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signUpActor.resetPassword'\n  }, {\n    cond: 'shouldConfirmSignUpFromSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signUpActor.resendSignUpCode'\n  }, {\n    actions: ['setNextSignInStep', 'setChallengeName', 'setMissingAttributes', 'setTotpSecretCode'],\n    target: '#signUpActor.resolved'\n  }],\n  onError: {\n    actions: 'setRemoteError',\n    target: '#signUpActor.resolved'\n  }\n};\nconst handleFetchUserAttributesResponse = {\n  onDone: [{\n    cond: 'shouldVerifyAttribute',\n    actions: ['setShouldVerifyUserAttributeStep', 'setUnverifiedUserAttributes'],\n    target: '#signUpActor.resolved'\n  }, {\n    actions: 'setConfirmAttributeCompleteStep',\n    target: '#signUpActor.resolved'\n  }],\n  onError: {\n    actions: 'setConfirmAttributeCompleteStep',\n    target: '#signUpActor.resolved'\n  }\n};\nfunction signUpActor(_ref77) {\n  let services = _ref77.services;\n  return xstate.createMachine({\n    id: 'signUpActor',\n    initial: 'init',\n    predictableActionArguments: true,\n    states: {\n      init: {\n        always: [{\n          cond: 'shouldConfirmSignUp',\n          target: 'confirmSignUp'\n        }, {\n          target: 'signUp'\n        }]\n      },\n      autoSignIn: {\n        tags: 'pending',\n        invoke: _objectSpread({\n          src: 'autoSignIn'\n        }, handleAutoSignInResponse)\n      },\n      fetchUserAttributes: {\n        invoke: _objectSpread({\n          src: 'fetchUserAttributes'\n        }, handleFetchUserAttributesResponse)\n      },\n      federatedSignIn: getFederatedSignInState('signUp'),\n      resetPassword: {\n        invoke: _objectSpread({\n          src: 'resetPassword'\n        }, handleResetPasswordResponse)\n      },\n      resendSignUpCode: {\n        tags: 'pending',\n        entry: 'sendUpdate',\n        exit: 'sendUpdate',\n        invoke: {\n          src: 'resendSignUpCode',\n          onDone: {\n            actions: ['setCodeDeliveryDetails', 'sendUpdate'],\n            target: '#signUpActor.confirmSignUp'\n          },\n          onError: [{\n            cond: 'isUserAlreadyConfirmed',\n            target: '#signUpActor.resolved'\n          }, {\n            actions: ['setRemoteError', 'sendUpdate']\n          }]\n        }\n      },\n      signUp: {\n        type: 'parallel',\n        exit: 'clearTouched',\n        on: {\n          FEDERATED_SIGN_IN: {\n            target: 'federatedSignIn'\n          }\n        },\n        states: {\n          validation: {\n            initial: 'pending',\n            states: {\n              pending: {\n                invoke: {\n                  src: 'validateSignUp',\n                  onDone: {\n                    actions: 'clearValidationError',\n                    target: 'valid'\n                  },\n                  onError: {\n                    actions: 'setFieldErrors',\n                    target: 'invalid'\n                  }\n                }\n              },\n              valid: {\n                entry: 'sendUpdate'\n              },\n              invalid: {\n                entry: 'sendUpdate'\n              }\n            },\n            on: {\n              BLUR: {\n                actions: 'handleBlur',\n                target: '.pending'\n              },\n              CHANGE: {\n                actions: 'handleInput',\n                target: '.pending'\n              }\n            }\n          },\n          submission: {\n            initial: 'idle',\n            states: {\n              idle: {\n                entry: ['sendUpdate'],\n                on: {\n                  SUBMIT: {\n                    actions: 'handleSubmit',\n                    target: 'validate'\n                  }\n                }\n              },\n              validate: {\n                entry: 'sendUpdate',\n                invoke: {\n                  src: 'validateSignUp',\n                  onDone: {\n                    target: 'handleSignUp',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    actions: 'setFieldErrors',\n                    target: 'idle'\n                  }\n                }\n              },\n              handleSignUp: {\n                tags: 'pending',\n                entry: ['setUsernameSignUp', 'clearError'],\n                exit: 'sendUpdate',\n                invoke: {\n                  src: 'handleSignUp',\n                  onDone: [{\n                    cond: 'hasCompletedSignUp',\n                    actions: 'setNextSignUpStep',\n                    target: '#signUpActor.resolved'\n                  }, {\n                    cond: 'shouldAutoSignIn',\n                    actions: 'setNextSignUpStep',\n                    target: '#signUpActor.autoSignIn'\n                  }, {\n                    actions: ['setCodeDeliveryDetails', 'setNextSignUpStep'],\n                    target: '#signUpActor.init'\n                  }],\n                  onError: {\n                    actions: ['sendUpdate', 'setRemoteError'],\n                    target: 'idle'\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      confirmSignUp: {\n        initial: 'edit',\n        entry: 'sendUpdate',\n        states: {\n          edit: {\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              CHANGE: {\n                actions: 'handleInput'\n              },\n              BLUR: {\n                actions: 'handleBlur'\n              },\n              RESEND: '#signUpActor.resendSignUpCode'\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['clearError', 'sendUpdate'],\n            invoke: {\n              src: 'confirmSignUp',\n              onDone: [{\n                cond: 'shouldAutoSignIn',\n                actions: ['setNextSignUpStep', 'clearFormValues'],\n                target: '#signUpActor.autoSignIn'\n              }, {\n                actions: 'setNextSignUpStep',\n                target: '#signUpActor.init'\n              }],\n              onError: {\n                actions: ['setRemoteError', 'sendUpdate'],\n                target: 'edit'\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: 'final',\n        data: context => ({\n          challengeName: context.challengeName,\n          missingAttributes: context.missingAttributes,\n          remoteError: context.remoteError,\n          step: context.step,\n          totpSecretCode: context.totpSecretCode,\n          username: context.username,\n          unverifiedUserAttributes: context.unverifiedUserAttributes\n        })\n      }\n    }\n  }, {\n    // sendUpdate is a HOC\n    actions: _objectSpread(_objectSpread({}, ACTIONS), {}, {\n      sendUpdate: xstate.sendUpdate()\n    }),\n    guards: GUARDS,\n    services: {\n      autoSignIn() {\n        return auth.autoSignIn();\n      },\n      async fetchUserAttributes() {\n        return auth.fetchUserAttributes();\n      },\n      confirmSignUp(_ref78) {\n        let formValues = _ref78.formValues,\n          username = _ref78.username;\n        const confirmationCode = formValues.confirmation_code;\n        const input = {\n          username,\n          confirmationCode\n        };\n        return services.handleConfirmSignUp(input);\n      },\n      resendSignUpCode(_ref79) {\n        let username = _ref79.username;\n        return auth.resendSignUpCode({\n          username\n        });\n      },\n      signInWithRedirect(_, _ref80) {\n        let data = _ref80.data;\n        return auth.signInWithRedirect(data);\n      },\n      handleSignUp(context) {\n        const formValues = context.formValues,\n          loginMechanisms = context.loginMechanisms,\n          username = context.username;\n        const loginMechanism = loginMechanisms[0];\n        const input = getSignUpInput(username, formValues, loginMechanism);\n        return services.handleSignUp(input);\n      },\n      async validateSignUp(context) {\n        // This needs to exist in the machine to reference new `services`\n        return runValidators(context.formValues, context.touched, context.passwordSettings, [\n        // Validation of password\n        services.validateFormPassword,\n        // Validation for default form fields\n        services.validateConfirmPassword, services.validatePreferredUsername,\n        // Validation for any custom Sign Up fields\n        services.validateCustomSignUp]);\n      }\n    }\n  });\n}\nconst signOutActor = () => {\n  return xstate.createMachine({\n    initial: 'pending',\n    id: 'signOutActor',\n    predictableActionArguments: true,\n    states: {\n      pending: {\n        tags: 'pending',\n        invoke: {\n          src: 'signOut',\n          onDone: 'resolved',\n          onError: 'rejected'\n        }\n      },\n      resolved: {\n        type: 'final'\n      },\n      rejected: {\n        type: 'final'\n      }\n    }\n  }, {\n    services: {\n      signOut: () => auth.signOut()\n    }\n  });\n};\nfunction verifyUserAttributesActor() {\n  return xstate.createMachine({\n    id: 'verifyUserAttributesActor',\n    initial: 'selectUserAttributes',\n    predictableActionArguments: true,\n    states: {\n      selectUserAttributes: {\n        initial: 'edit',\n        exit: ['clearError', 'clearTouched', 'sendUpdate'],\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              SKIP: {\n                target: '#verifyUserAttributesActor.resolved'\n              },\n              CHANGE: {\n                actions: 'handleInput'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['clearError', 'sendUpdate'],\n            invoke: {\n              src: 'sendUserAttributeVerificationCode',\n              onDone: {\n                actions: ['setSelectedUserAttribute', 'setCodeDeliveryDetails'],\n                target: '#verifyUserAttributesActor.confirmVerifyUserAttribute'\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit'\n              }\n            }\n          }\n        }\n      },\n      confirmVerifyUserAttribute: {\n        initial: 'edit',\n        exit: ['clearError', 'clearFormValues', 'clearTouched'],\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              SKIP: '#verifyUserAttributesActor.resolved',\n              CHANGE: {\n                actions: 'handleInput'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['clearError', 'sendUpdate'],\n            invoke: {\n              src: 'confirmVerifyUserAttribute',\n              onDone: {\n                actions: ['setConfirmAttributeCompleteStep', 'clearSelectedUserAttribute'],\n                target: '#verifyUserAttributesActor.resolved'\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit'\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: 'final',\n        data: _ref81 => {\n          let step = _ref81.step;\n          return {\n            step\n          };\n        }\n      }\n    }\n  }, {\n    // sendUpdate is a HOC\n    actions: _objectSpread(_objectSpread({}, ACTIONS), {}, {\n      sendUpdate: xstate.sendUpdate()\n    }),\n    services: {\n      sendUserAttributeVerificationCode(_ref82) {\n        let unverifiedAttr = _ref82.formValues.unverifiedAttr;\n        const input = {\n          userAttributeKey: unverifiedAttr\n        };\n        return auth.sendUserAttributeVerificationCode(input);\n      },\n      async confirmVerifyUserAttribute(_ref83) {\n        let confirmationCode = _ref83.formValues.confirmation_code,\n          selectedUserAttribute = _ref83.selectedUserAttribute;\n        const input = {\n          confirmationCode,\n          userAttributeKey: selectedUserAttribute\n        };\n        return auth.confirmUserAttribute(input);\n      },\n      async validateFields(context) {\n        return runValidators(context.formValues, context.touched, context.passwordSettings, [defaultServices.validateFormPassword, defaultServices.validateConfirmPassword]);\n      }\n    }\n  });\n}\nconst getActorContext = (context, defaultStep) => _objectSpread(_objectSpread({}, context.actorDoneData), {}, {\n  step: context?.actorDoneData?.step ?? defaultStep,\n  // initialize empty objects on actor start\n  formValues: {},\n  touched: {},\n  validationError: {},\n  // values included on `context.config` that should be available in actors\n  formFields: context.config?.formFields,\n  loginMechanisms: context.config?.loginMechanisms,\n  passwordSettings: context.config?.passwordSettings,\n  signUpAttributes: context.config?.signUpAttributes,\n  socialProviders: context.config?.socialProviders\n});\nconst _xstate$actions = xstate.actions,\n  choose = _xstate$actions.choose,\n  stop = _xstate$actions.stop;\nconst stopActor = machineId => stop(machineId);\n// setup step waits for ui to emit INIT action to proceed to configure\nconst LEGACY_WAIT_CONFIG = {\n  on: {\n    INIT: {\n      actions: 'configure',\n      target: 'getConfig'\n    },\n    SIGN_OUT: '#authenticator.signOut'\n  }\n};\n// setup step proceeds directly to configure\nconst NEXT_WAIT_CONFIG = {\n  always: {\n    actions: 'configure',\n    target: 'getConfig'\n  }\n};\nfunction createAuthenticatorMachine(options) {\n  const _ref84 = options ?? {},\n    useNextWaitConfig = _ref84.useNextWaitConfig,\n    overrideConfigServices = _objectWithoutProperties(_ref84, _excluded4);\n  const initConfig = useNextWaitConfig ? NEXT_WAIT_CONFIG : LEGACY_WAIT_CONFIG;\n  return xstate.createMachine({\n    id: 'authenticator',\n    initial: 'idle',\n    context: {\n      user: undefined,\n      config: {},\n      services: defaultServices,\n      actorRef: undefined,\n      hasSetup: false\n    },\n    predictableActionArguments: true,\n    states: {\n      // See: https://xstate.js.org/docs/guides/communication.html#invoking-promises\n      idle: {\n        invoke: {\n          src: 'handleGetCurrentUser',\n          onDone: {\n            actions: 'setUser',\n            target: 'setup'\n          },\n          onError: {\n            target: 'setup'\n          }\n        }\n      },\n      setup: {\n        initial: 'initConfig',\n        states: {\n          initConfig,\n          getConfig: {\n            invoke: {\n              src: 'getAmplifyConfig',\n              onDone: [{\n                actions: ['applyAmplifyConfig', 'setHasSetup'],\n                cond: 'hasUser',\n                target: '#authenticator.authenticated'\n              }, {\n                actions: ['applyAmplifyConfig', 'setHasSetup'],\n                target: 'goToInitialState'\n              }]\n            }\n          },\n          goToInitialState: {\n            always: [{\n              cond: 'isInitialStateSignUp',\n              target: '#authenticator.signUpActor'\n            }, {\n              cond: 'isInitialStateResetPassword',\n              target: '#authenticator.forgotPasswordActor'\n            }, {\n              target: '#authenticator.signInActor'\n            }]\n          }\n        }\n      },\n      getCurrentUser: {\n        invoke: {\n          src: 'handleGetCurrentUser',\n          onDone: {\n            actions: 'setUser',\n            target: '#authenticator.authenticated'\n          },\n          onError: {\n            target: '#authenticator.setup'\n          }\n        }\n      },\n      signInActor: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnSignInActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('signInActor')\n          }\n        },\n        on: {\n          FORGOT_PASSWORD: 'forgotPasswordActor',\n          SIGN_IN: 'signInActor',\n          SIGN_UP: 'signUpActor',\n          'done.invoke.signInActor': [{\n            cond: 'hasCompletedAttributeConfirmation',\n            target: '#authenticator.getCurrentUser'\n          }, {\n            cond: 'isShouldConfirmUserAttributeStep',\n            actions: 'setActorDoneData',\n            target: '#authenticator.verifyUserAttributesActor'\n          }, {\n            cond: 'isResetPasswordStep',\n            actions: 'setActorDoneData',\n            target: '#authenticator.forgotPasswordActor'\n          }, {\n            cond: 'isConfirmSignUpStep',\n            actions: 'setActorDoneData',\n            target: '#authenticator.signUpActor'\n          }]\n        }\n      },\n      signUpActor: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnSignUpActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('signUpActor')\n          }\n        },\n        on: {\n          SIGN_IN: 'signInActor',\n          'done.invoke.signUpActor': [{\n            cond: 'hasCompletedAttributeConfirmation',\n            target: '#authenticator.getCurrentUser'\n          }, {\n            cond: 'isShouldConfirmUserAttributeStep',\n            actions: 'setActorDoneData',\n            target: '#authenticator.verifyUserAttributesActor'\n          }, {\n            cond: 'isConfirmUserAttributeStep',\n            target: '#authenticator.verifyUserAttributesActor'\n          }, {\n            actions: 'setActorDoneData',\n            target: '#authenticator.signInActor'\n          }]\n        }\n      },\n      forgotPasswordActor: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnForgotPasswordActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('forgotPasswordActor')\n          }\n        },\n        on: {\n          SIGN_IN: 'signInActor',\n          'done.invoke.forgotPasswordActor': [{\n            target: '#authenticator.signInActor'\n          }]\n        }\n      },\n      verifyUserAttributesActor: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnVerifyUserAttributesActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('verifyUserAttributesActor')\n          }\n        },\n        on: {\n          'done.invoke.verifyUserAttributesActor': [{\n            actions: 'setActorDoneData',\n            target: '#authenticator.getCurrentUser'\n          }]\n        }\n      },\n      authenticated: {\n        initial: 'idle',\n        states: {\n          idle: {\n            on: {\n              TOKEN_REFRESH: 'refreshUser'\n            }\n          },\n          refreshUser: {\n            invoke: {\n              src: '#authenticator.getCurrentUser',\n              onDone: {\n                actions: 'setUser',\n                target: 'idle'\n              },\n              onError: {\n                target: '#authenticator.signOut'\n              }\n            }\n          }\n        },\n        on: {\n          SIGN_OUT: 'signOut'\n        }\n      },\n      signOut: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnSignOutActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('signOutActor')\n          }\n        },\n        on: {\n          'done.invoke.signOutActor': {\n            actions: 'clearUser',\n            target: 'setup.getConfig'\n          }\n        }\n      }\n    },\n    on: {\n      SIGN_IN_WITH_REDIRECT: {\n        target: '#authenticator.getCurrentUser'\n      },\n      CHANGE: {\n        actions: 'forwardToActor'\n      },\n      BLUR: {\n        actions: 'forwardToActor'\n      },\n      SUBMIT: {\n        actions: 'forwardToActor'\n      },\n      FEDERATED_SIGN_IN: {\n        actions: 'forwardToActor'\n      },\n      RESEND: {\n        actions: 'forwardToActor'\n      },\n      SIGN_IN: {\n        actions: 'forwardToActor'\n      },\n      SKIP: {\n        actions: 'forwardToActor'\n      }\n    }\n  }, {\n    actions: _objectSpread(_objectSpread({}, ACTIONS), {}, {\n      forwardToActor: choose([{\n        cond: 'hasActor',\n        actions: xstate.forwardTo(_ref85 => {\n          let actorRef = _ref85.actorRef;\n          return actorRef;\n        })\n      }]),\n      setActorDoneData: xstate.assign({\n        actorDoneData: (context, event) => ({\n          challengeName: event.data.challengeName,\n          codeDeliveryDetails: event.data.codeDeliveryDetails,\n          missingAttributes: event.data.missingAttributes,\n          remoteError: event.data.remoteError,\n          username: event.data.username,\n          step: event.data.step,\n          totpSecretCode: event.data.totpSecretCode,\n          unverifiedUserAttributes: event.data.unverifiedUserAttributes\n        })\n      }),\n      applyAmplifyConfig: xstate.assign({\n        config(context, _ref86) {\n          let cliConfig = _ref86.data;\n          // Prefer explicitly configured settings over default CLI values\\\n          const _context$config = context.config,\n            _context$config$login = _context$config.loginMechanisms,\n            loginMechanisms = _context$config$login === void 0 ? cliConfig.loginMechanisms ?? [] : _context$config$login,\n            _context$config$signU = _context$config.signUpAttributes,\n            signUpAttributes = _context$config$signU === void 0 ? cliConfig.signUpAttributes ?? [] : _context$config$signU,\n            _context$config$socia = _context$config.socialProviders,\n            socialProviders = _context$config$socia === void 0 ? cliConfig.socialProviders ?? [] : _context$config$socia,\n            initialState = _context$config.initialState,\n            _formFields = _context$config.formFields,\n            _context$config$passw = _context$config.passwordSettings,\n            passwordSettings = _context$config$passw === void 0 ? cliConfig.passwordFormat ?? {} : _context$config$passw;\n          // By default, Cognito assumes `username`, so there isn't a different username attribute like `email`.\n          // We explicitly add it as a login mechanism to be consistent with Admin UI's language.\n          if (loginMechanisms.length === 0) {\n            loginMechanisms.push('username');\n          }\n          const formFields = convertFormFields(_formFields) ?? {};\n          return {\n            formFields,\n            initialState,\n            loginMechanisms,\n            passwordSettings,\n            signUpAttributes,\n            socialProviders\n          };\n        }\n      }),\n      spawnSignInActor: xstate.assign({\n        actorRef: (context, _) => {\n          const services = context.services;\n          const actor = signInActor({\n            services\n          }).withContext(getActorContext(context, 'SIGN_IN'));\n          return xstate.spawn(actor, {\n            name: 'signInActor'\n          });\n        }\n      }),\n      spawnSignUpActor: xstate.assign({\n        actorRef: (context, _) => {\n          const services = context.services;\n          const actor = signUpActor({\n            services\n          }).withContext(getActorContext(context, 'SIGN_UP'));\n          return xstate.spawn(actor, {\n            name: 'signUpActor'\n          });\n        }\n      }),\n      spawnForgotPasswordActor: xstate.assign({\n        actorRef: (context, _) => {\n          const services = context.services;\n          const actor = forgotPasswordActor({\n            services\n          }).withContext(getActorContext(context, 'FORGOT_PASSWORD'));\n          return xstate.spawn(actor, {\n            name: 'forgotPasswordActor'\n          });\n        }\n      }),\n      spawnVerifyUserAttributesActor: xstate.assign({\n        actorRef: context => {\n          const actor = verifyUserAttributesActor().withContext(getActorContext(context));\n          return xstate.spawn(actor, {\n            name: 'verifyUserAttributesActor'\n          });\n        }\n      }),\n      spawnSignOutActor: xstate.assign({\n        actorRef: context => {\n          const actor = signOutActor().withContext({\n            user: context?.user\n          });\n          return xstate.spawn(actor, {\n            name: 'signOutActor'\n          });\n        }\n      }),\n      configure: xstate.assign((_, event) => {\n        const _ref87 = !isEmptyObject(overrideConfigServices) ? overrideConfigServices : event.data ?? {},\n          customServices = _ref87.services,\n          config = _objectWithoutProperties(_ref87, _excluded5);\n        return {\n          services: _objectSpread(_objectSpread({}, defaultServices), customServices),\n          config\n        };\n      }),\n      setHasSetup: xstate.assign({\n        hasSetup: true\n      })\n    }),\n    guards: _objectSpread(_objectSpread({}, GUARDS), {}, {\n      hasActor: _ref88 => {\n        let actorRef = _ref88.actorRef;\n        return !!actorRef;\n      },\n      isInitialStateSignUp: _ref89 => {\n        let config = _ref89.config;\n        return config.initialState === 'signUp';\n      },\n      isInitialStateResetPassword: _ref90 => {\n        let config = _ref90.config;\n        return config.initialState === 'forgotPassword';\n      },\n      shouldSetup: _ref91 => {\n        let hasSetup = _ref91.hasSetup;\n        return !hasSetup;\n      },\n      hasUser: _ref92 => {\n        let user = _ref92.user;\n        return !!user;\n      }\n    }),\n    services: {\n      getAmplifyConfig: _ref93 => {\n        let services = _ref93.services;\n        return services.getAmplifyConfig();\n      },\n      handleGetCurrentUser: _ref94 => {\n        let services = _ref94.services;\n        return services.getCurrentUser();\n      }\n    }\n  });\n}\nfunction convertFormFields(formFields) {\n  if (formFields) {\n    Object.keys(formFields).forEach(component => {\n      Object.keys(formFields[component]).forEach(inputName => {\n        let ff = formFields[component][inputName];\n        ff.required = ff.isRequired;\n      });\n    });\n  }\n  return formFields;\n}\nconst borderWidths = {\n  small: {\n    value: '1px'\n  },\n  medium: {\n    value: '2px'\n  },\n  large: {\n    value: '3px'\n  }\n};\nconst colors = {\n  red: {\n    10: {\n      value: 'hsl(0, 75%, 95%)'\n    },\n    20: {\n      value: 'hsl(0, 75%, 85%)'\n    },\n    40: {\n      value: 'hsl(0, 75%, 75%)'\n    },\n    60: {\n      value: 'hsl(0, 50%, 50%)'\n    },\n    80: {\n      value: 'hsl(0, 95%, 30%)'\n    },\n    90: {\n      value: 'hsl(0, 100%, 20%)'\n    },\n    100: {\n      value: 'hsl(0, 100%, 15%)'\n    }\n  },\n  orange: {\n    10: {\n      value: 'hsl(30, 75%, 95%)'\n    },\n    20: {\n      value: 'hsl(30, 75%, 85%)'\n    },\n    40: {\n      value: 'hsl(30, 75%, 75%)'\n    },\n    60: {\n      value: 'hsl(30, 50%, 50%)'\n    },\n    80: {\n      value: 'hsl(30, 95%, 30%)'\n    },\n    90: {\n      value: 'hsl(30, 100%, 20%)'\n    },\n    100: {\n      value: 'hsl(30, 100%, 15%)'\n    }\n  },\n  yellow: {\n    10: {\n      value: 'hsl(60, 75%, 95%)'\n    },\n    20: {\n      value: 'hsl(60, 75%, 85%)'\n    },\n    40: {\n      value: 'hsl(60, 75%, 75%)'\n    },\n    60: {\n      value: 'hsl(60, 50%, 50%)'\n    },\n    80: {\n      value: 'hsl(60, 95%, 30%)'\n    },\n    90: {\n      value: 'hsl(60, 100%, 20%)'\n    },\n    100: {\n      value: 'hsl(60, 100%, 15%)'\n    }\n  },\n  green: {\n    10: {\n      value: 'hsl(130, 60%, 95%)'\n    },\n    20: {\n      value: 'hsl(130, 60%, 90%)'\n    },\n    40: {\n      value: 'hsl(130, 44%, 63%)'\n    },\n    60: {\n      value: 'hsl(130, 43%, 46%)'\n    },\n    80: {\n      value: 'hsl(130, 33%, 37%)'\n    },\n    90: {\n      value: 'hsl(130, 27%, 29%)'\n    },\n    100: {\n      value: 'hsl(130, 22%, 23%)'\n    }\n  },\n  teal: {\n    10: {\n      value: 'hsl(190, 75%, 95%)'\n    },\n    20: {\n      value: 'hsl(190, 75%, 85%)'\n    },\n    40: {\n      value: 'hsl(190, 70%, 70%)'\n    },\n    60: {\n      value: 'hsl(190, 50%, 50%)'\n    },\n    80: {\n      value: 'hsl(190, 95%, 30%)'\n    },\n    90: {\n      value: 'hsl(190, 100%, 20%)'\n    },\n    100: {\n      value: 'hsl(190, 100%, 15%)'\n    }\n  },\n  blue: {\n    10: {\n      value: 'hsl(220, 95%, 95%)'\n    },\n    20: {\n      value: 'hsl(220, 85%, 85%)'\n    },\n    40: {\n      value: 'hsl(220, 70%, 70%)'\n    },\n    60: {\n      value: 'hsl(220, 50%, 50%)'\n    },\n    80: {\n      value: 'hsl(220, 95%, 30%)'\n    },\n    90: {\n      value: 'hsl(220, 100%, 20%)'\n    },\n    100: {\n      value: 'hsl(220, 100%, 15%)'\n    }\n  },\n  purple: {\n    10: {\n      value: 'hsl(300, 95%, 95%)'\n    },\n    20: {\n      value: 'hsl(300, 85%, 85%)'\n    },\n    40: {\n      value: 'hsl(300, 70%, 70%)'\n    },\n    60: {\n      value: 'hsl(300, 50%, 50%)'\n    },\n    80: {\n      value: 'hsl(300, 95%, 30%)'\n    },\n    90: {\n      value: 'hsl(300, 100%, 20%)'\n    },\n    100: {\n      value: 'hsl(300, 100%, 15%)'\n    }\n  },\n  pink: {\n    10: {\n      value: 'hsl(340, 95%, 95%)'\n    },\n    20: {\n      value: 'hsl(340, 90%, 85%)'\n    },\n    40: {\n      value: 'hsl(340, 70%, 70%)'\n    },\n    60: {\n      value: 'hsl(340, 50%, 50%)'\n    },\n    80: {\n      value: 'hsl(340, 95%, 30%)'\n    },\n    90: {\n      value: 'hsl(340, 100%, 20%)'\n    },\n    100: {\n      value: 'hsl(340, 100%, 15%)'\n    }\n  },\n  neutral: {\n    10: {\n      value: 'hsl(210, 5%, 98%)'\n    },\n    20: {\n      value: 'hsl(210, 5%, 94%)'\n    },\n    40: {\n      value: 'hsl(210, 5%, 87%)'\n    },\n    60: {\n      value: 'hsl(210, 10%, 58%)'\n    },\n    80: {\n      value: 'hsl(210, 10%, 40%)'\n    },\n    90: {\n      value: 'hsl(210, 25%, 25%)'\n    },\n    100: {\n      value: 'hsl(210, 50%, 10%)'\n    }\n  },\n  primary: {\n    10: {\n      value: '{colors.teal.10.value}'\n    },\n    20: {\n      value: '{colors.teal.20.value}'\n    },\n    40: {\n      value: '{colors.teal.40.value}'\n    },\n    60: {\n      value: '{colors.teal.60.value}'\n    },\n    80: {\n      value: '{colors.teal.80.value}'\n    },\n    90: {\n      value: '{colors.teal.90.value}'\n    },\n    100: {\n      value: '{colors.teal.100.value}'\n    }\n  },\n  secondary: {\n    10: {\n      value: '{colors.purple.10.value}'\n    },\n    20: {\n      value: '{colors.purple.20.value}'\n    },\n    40: {\n      value: '{colors.purple.40.value}'\n    },\n    60: {\n      value: '{colors.purple.60.value}'\n    },\n    80: {\n      value: '{colors.purple.80.value}'\n    },\n    90: {\n      value: '{colors.purple.90.value}'\n    },\n    100: {\n      value: '{colors.purple.100.value}'\n    }\n  },\n  font: {\n    primary: {\n      value: '{colors.neutral.100.value}'\n    },\n    secondary: {\n      value: '{colors.neutral.90.value}'\n    },\n    tertiary: {\n      value: '{colors.neutral.80.value}'\n    },\n    disabled: {\n      value: '{colors.neutral.60.value}'\n    },\n    inverse: {\n      value: '{colors.white.value}'\n    },\n    interactive: {\n      value: '{colors.primary.80.value}'\n    },\n    // Hover and Focus colors are intentionally different colors.\n    // This allows users to distinguish between the current keyboard focus\n    // and the location of their pointer\n    hover: {\n      value: '{colors.primary.90.value}'\n    },\n    // Focus color is set to 100 to ensure enough contrast for accessibility\n    focus: {\n      value: '{colors.primary.100.value}'\n    },\n    active: {\n      value: '{colors.primary.100.value}'\n    },\n    info: {\n      value: '{colors.blue.90.value}'\n    },\n    warning: {\n      value: '{colors.orange.90.value}'\n    },\n    error: {\n      value: '{colors.red.90.value}'\n    },\n    success: {\n      value: '{colors.green.90.value}'\n    }\n  },\n  background: {\n    primary: {\n      value: '{colors.white.value}'\n    },\n    secondary: {\n      value: '{colors.neutral.10.value}'\n    },\n    tertiary: {\n      value: '{colors.neutral.20.value}'\n    },\n    quaternary: {\n      value: '{colors.neutral.60.value}'\n    },\n    disabled: {\n      value: '{colors.background.tertiary.value}'\n    },\n    info: {\n      value: '{colors.blue.10.value}'\n    },\n    warning: {\n      value: '{colors.orange.10.value}'\n    },\n    error: {\n      value: '{colors.red.10.value}'\n    },\n    success: {\n      value: '{colors.green.10.value}'\n    }\n  },\n  border: {\n    primary: {\n      value: '{colors.neutral.60.value}'\n    },\n    secondary: {\n      value: '{colors.neutral.40.value}'\n    },\n    tertiary: {\n      value: '{colors.neutral.20.value}'\n    },\n    disabled: {\n      value: '{colors.border.tertiary.value}'\n    },\n    pressed: {\n      value: '{colors.primary.100.value}'\n    },\n    // Focus color is set to 100 to ensure enough contrast for accessibility\n    focus: {\n      value: '{colors.primary.100.value}'\n    },\n    error: {\n      value: '{colors.red.80.value}'\n    },\n    info: {\n      value: '{colors.blue.80.value}'\n    },\n    success: {\n      value: '{colors.green.80.value}'\n    },\n    warning: {\n      value: '{colors.orange.80.value}'\n    }\n  },\n  shadow: {\n    primary: {\n      value: 'hsla(210, 50%, 10%, 0.25)'\n    },\n    secondary: {\n      value: 'hsla(210, 50%, 10%, 0.15)'\n    },\n    tertiary: {\n      value: 'hsla(210, 50%, 10%, 0.05)'\n    }\n  },\n  overlay: {\n    5: {\n      value: 'hsla(0, 0%, 0%, 0.05)'\n    },\n    10: {\n      value: 'hsla(0, 0%, 0%, 0.1)'\n    },\n    20: {\n      value: 'hsla(0, 0%, 0%, 0.2)'\n    },\n    30: {\n      value: 'hsla(0, 0%, 0%, 0.3)'\n    },\n    40: {\n      value: 'hsla(0, 0%, 0%, 0.4)'\n    },\n    50: {\n      value: 'hsla(0, 0%, 0%, 0.5)'\n    },\n    60: {\n      value: 'hsla(0, 0%, 0%, 0.6)'\n    },\n    70: {\n      value: 'hsla(0, 0%, 0%, 0.7)'\n    },\n    80: {\n      value: 'hsla(0, 0%, 0%, 0.8)'\n    },\n    90: {\n      value: 'hsla(0, 0%, 0%, 0.9)'\n    }\n  },\n  black: {\n    value: 'hsl(0, 0%, 0%)'\n  },\n  white: {\n    value: 'hsl(0, 0%, 100%)'\n  },\n  transparent: {\n    value: 'transparent'\n  }\n};\nconst alert = {\n  // Default styles\n  alignItems: {\n    value: 'center'\n  },\n  justifyContent: {\n    value: 'space-between'\n  },\n  color: {\n    value: '{colors.font.primary.value}'\n  },\n  backgroundColor: {\n    value: '{colors.background.tertiary.value}'\n  },\n  paddingBlock: {\n    value: '{space.small.value}'\n  },\n  paddingInline: {\n    value: '{space.medium.value}'\n  },\n  icon: {\n    size: {\n      value: '{fontSizes.xl.value}'\n    }\n  },\n  heading: {\n    fontSize: {\n      value: '{fontSizes.medium.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.bold.value}'\n    }\n  },\n  // Variations\n  info: {\n    color: {\n      value: '{colors.font.info.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.info.value}'\n    }\n  },\n  error: {\n    color: {\n      value: '{colors.font.error.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.error.value}'\n    }\n  },\n  warning: {\n    color: {\n      value: '{colors.font.warning.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.warning.value}'\n    }\n  },\n  success: {\n    color: {\n      value: '{colors.font.success.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.success.value}'\n    }\n  }\n};\nconst autocomplete = {\n  menu: {\n    width: {\n      value: '100%'\n    },\n    marginBlockStart: {\n      value: '{space.xxxs}'\n    },\n    backgroundColor: {\n      value: '{colors.background.primary}'\n    },\n    borderColor: {\n      value: '{colors.border.primary}'\n    },\n    borderWidth: {\n      value: '{borderWidths.small}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderRadius: {\n      value: '{radii.small}'\n    },\n    options: {\n      display: {\n        value: 'flex'\n      },\n      flexDirection: {\n        value: 'column'\n      },\n      maxHeight: {\n        value: '300px'\n      }\n    },\n    option: {\n      backgroundColor: {\n        value: '{colors.background.primary}'\n      },\n      color: {\n        value: 'currentcolor'\n      },\n      cursor: {\n        value: 'pointer'\n      },\n      transitionDuration: {\n        value: '{time.short}'\n      },\n      transitionProperty: {\n        value: 'background-color, color'\n      },\n      transitionTimingFunction: {\n        value: 'ease'\n      },\n      _active: {\n        backgroundColor: {\n          value: '{colors.primary.80}'\n        },\n        color: {\n          value: '{colors.white}'\n        }\n      }\n    },\n    _empty: {\n      display: {\n        value: 'flex'\n      }\n    },\n    _loading: {\n      alignItems: {\n        value: 'center'\n      },\n      display: {\n        value: 'flex'\n      },\n      gap: {\n        value: '{space.xxxs}'\n      }\n    },\n    spaceShared: {\n      paddingBlock: {\n        value: '{space.xs}'\n      },\n      paddingInline: {\n        value: '{space.small}'\n      }\n    }\n  }\n};\nconst authenticator = {\n  maxWidth: {\n    value: '60rem'\n  },\n  modal: {\n    width: {\n      value: '{space.relative.full}'\n    },\n    height: {\n      value: '{space.relative.full}'\n    },\n    backgroundColor: {\n      value: '{colors.overlay.50.value}'\n    },\n    top: {\n      value: '{space.zero}'\n    },\n    left: {\n      value: '{space.zero}'\n    }\n  },\n  container: {\n    widthMax: {\n      value: '30rem'\n    }\n  },\n  router: {\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderColor: {\n      value: '{colors.border.primary.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.primary.value}'\n    },\n    boxShadow: {\n      value: '{shadows.medium.value}'\n    }\n  },\n  footer: {\n    paddingBottom: {\n      value: '{space.medium.value}'\n    }\n  },\n  form: {\n    padding: {\n      value: '{space.xl.value}'\n    }\n  },\n  state: {\n    inactive: {\n      backgroundColor: {\n        value: '{colors.background.secondary.value}'\n      }\n    }\n  },\n  orContainer: {\n    color: {\n      value: '{colors.neutral.80.value}'\n    },\n    orLine: {\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      }\n    }\n  }\n};\nconst badge = {\n  // Default styles\n  color: {\n    value: '{colors.font.primary.value}'\n  },\n  lineHeight: {\n    value: 1\n  },\n  fontWeight: {\n    value: '{fontWeights.semibold.value}'\n  },\n  fontSize: {\n    value: '{fontSizes.small.value}'\n  },\n  textAlign: {\n    value: 'center'\n  },\n  paddingVertical: {\n    value: '{space.xs.value}'\n  },\n  paddingHorizontal: {\n    value: '{space.small.value}'\n  },\n  backgroundColor: {\n    value: '{colors.background.tertiary.value}'\n  },\n  // An arbitrarily large value to ensure that the left and right sides of the badge are perfectly rounded for any size variation\n  borderRadius: {\n    value: '{radii.xl.value}'\n  },\n  // Variations\n  info: {\n    color: {\n      value: '{colors.font.info.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.info.value}'\n    }\n  },\n  warning: {\n    color: {\n      value: '{colors.font.warning.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.warning.value}'\n    }\n  },\n  success: {\n    color: {\n      value: '{colors.font.success.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.success.value}'\n    }\n  },\n  error: {\n    color: {\n      value: '{colors.font.error.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.error.value}'\n    }\n  },\n  // Sizes\n  small: {\n    fontSize: {\n      value: '{fontSizes.xs.value}'\n    },\n    paddingVertical: {\n      value: '{space.xxs.value}'\n    },\n    paddingHorizontal: {\n      value: '{space.xs.value}'\n    }\n  },\n  // medium is the default size\n  large: {\n    fontSize: {\n      value: '{fontSizes.medium.value}'\n    },\n    paddingVertical: {\n      value: '{space.small.value}'\n    },\n    paddingHorizontal: {\n      value: '{space.medium.value}'\n    }\n  }\n};\nconst breadcrumbs = {\n  flexDirection: {\n    value: 'row'\n  },\n  flexWrap: {\n    value: 'wrap'\n  },\n  gap: {\n    value: '0'\n  },\n  color: {\n    value: '{colors.font.tertiary}'\n  },\n  item: {\n    flexDirection: {\n      value: 'row'\n    },\n    color: {\n      value: 'inherit'\n    },\n    fontSize: {\n      value: 'inherit'\n    },\n    alignItems: {\n      value: 'center'\n    },\n    lineHeight: {\n      value: '1'\n    }\n  },\n  separator: {\n    color: {\n      value: 'inherit'\n    },\n    fontSize: {\n      value: 'inherit'\n    },\n    paddingInline: {\n      value: '{space.xxs}'\n    }\n  },\n  link: {\n    color: {\n      value: '{components.link.color}'\n    },\n    fontSize: {\n      value: 'inherit'\n    },\n    fontWeight: {\n      value: 'normal'\n    },\n    textDecoration: {\n      value: 'none'\n    },\n    paddingInline: {\n      value: '{space.xs}'\n    },\n    paddingBlock: {\n      value: '{space.xxs}'\n    },\n    current: {\n      color: {\n        value: 'inherit'\n      },\n      fontSize: {\n        value: 'inherit'\n      },\n      fontWeight: {\n        value: 'normal'\n      },\n      textDecoration: {\n        value: 'none'\n      }\n    }\n  }\n};\nconst button = {\n  // shared styles\n  fontWeight: {\n    value: '{fontWeights.bold.value}'\n  },\n  transitionDuration: {\n    value: '{components.fieldcontrol.transitionDuration.value}'\n  },\n  fontSize: {\n    value: '{components.fieldcontrol.fontSize.value}'\n  },\n  lineHeight: {\n    value: '{components.fieldcontrol.lineHeight.value}'\n  },\n  paddingBlockStart: {\n    value: '{components.fieldcontrol.paddingBlockStart.value}'\n  },\n  paddingBlockEnd: {\n    value: '{components.fieldcontrol.paddingBlockEnd.value}'\n  },\n  paddingInlineStart: {\n    value: '{components.fieldcontrol.paddingInlineStart.value}'\n  },\n  paddingInlineEnd: {\n    value: '{components.fieldcontrol.paddingInlineEnd.value}'\n  },\n  backgroundColor: {\n    value: 'transparent'\n  },\n  borderColor: {\n    value: '{components.fieldcontrol.borderColor.value}'\n  },\n  borderWidth: {\n    value: '{components.fieldcontrol.borderWidth.value}'\n  },\n  borderStyle: {\n    value: '{components.fieldcontrol.borderStyle.value}'\n  },\n  borderRadius: {\n    value: '{components.fieldcontrol.borderRadius.value}'\n  },\n  color: {\n    value: '{colors.font.primary.value}'\n  },\n  _hover: {\n    color: {\n      value: '{colors.font.focus.value}'\n    },\n    backgroundColor: {\n      value: '{colors.primary.10.value}'\n    },\n    borderColor: {\n      value: '{colors.primary.60.value}'\n    }\n  },\n  _focus: {\n    color: {\n      value: '{colors.font.focus.value}'\n    },\n    backgroundColor: {\n      value: '{colors.primary.10.value}'\n    },\n    borderColor: {\n      value: '{colors.border.focus.value}'\n    },\n    boxShadow: {\n      value: '{components.fieldcontrol._focus.boxShadow.value}'\n    }\n  },\n  _active: {\n    color: {\n      value: '{colors.font.active.value}'\n    },\n    backgroundColor: {\n      value: '{colors.primary.20.value}'\n    },\n    borderColor: {\n      value: '{colors.primary.100.value}'\n    }\n  },\n  _loading: {\n    color: {\n      value: '{colors.font.disabled.value}'\n    },\n    backgroundColor: {\n      value: 'transparent'\n    },\n    borderColor: {\n      value: '{colors.border.tertiary.value}'\n    }\n  },\n  _disabled: {\n    color: {\n      value: '{colors.font.disabled.value}'\n    },\n    backgroundColor: {\n      value: 'transparent'\n    },\n    borderColor: {\n      value: '{colors.border.tertiary.value}'\n    }\n  },\n  // variations\n  outlined: {\n    info: {\n      borderColor: {\n        value: '{colors.blue.60.value}'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.blue.100}'\n      },\n      _hover: {\n        borderColor: {\n          value: '{colors.blue.60.value}'\n        },\n        backgroundColor: {\n          value: '{colors.blue.10.value}'\n        },\n        color: {\n          value: '{colors.blue.100.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: '{colors.blue.100.value}'\n        },\n        backgroundColor: {\n          value: '{colors.blue.10.value}'\n        },\n        color: {\n          value: '{colors.blue.100.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.info._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: '{colors.blue.100.value}'\n        },\n        backgroundColor: {\n          value: '{colors.blue.20.value}'\n        },\n        color: {\n          value: '{colors.blue.100.value}'\n        }\n      }\n    },\n    warning: {\n      borderColor: {\n        value: '{colors.orange.60.value}'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.orange.100}'\n      },\n      _hover: {\n        borderColor: {\n          value: '{colors.orange.60.value}'\n        },\n        backgroundColor: {\n          value: '{colors.orange.10.value}'\n        },\n        color: {\n          value: '{colors.orange.100.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: '{colors.orange.100.value}'\n        },\n        backgroundColor: {\n          value: '{colors.orange.10.value}'\n        },\n        color: {\n          value: '{colors.orange.100.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.warning._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: '{colors.orange.100.value}'\n        },\n        backgroundColor: {\n          value: '{colors.orange.20.value}'\n        },\n        color: {\n          value: '{colors.orange.100.value}'\n        }\n      }\n    },\n    success: {\n      borderColor: {\n        value: '{colors.green.60.value}'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.green.100}'\n      },\n      _hover: {\n        borderColor: {\n          value: '{colors.green.60.value}'\n        },\n        backgroundColor: {\n          value: '{colors.green.10.value}'\n        },\n        color: {\n          value: '{colors.green.100.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: '{colors.green.100.value}'\n        },\n        backgroundColor: {\n          value: '{colors.green.10.value}'\n        },\n        color: {\n          value: '{colors.green.100.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.success._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: '{colors.green.100.value}'\n        },\n        backgroundColor: {\n          value: '{colors.green.20.value}'\n        },\n        color: {\n          value: '{colors.green.100.value}'\n        }\n      }\n    },\n    error: {\n      borderColor: {\n        value: '{colors.red.80.value}'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.red.100}'\n      },\n      _hover: {\n        borderColor: {\n          value: '{colors.red.80.value}'\n        },\n        backgroundColor: {\n          value: '{colors.red.10.value}'\n        },\n        color: {\n          value: '{colors.red.100.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: '{colors.red.100.value}'\n        },\n        backgroundColor: {\n          value: '{colors.red.10.value}'\n        },\n        color: {\n          value: '{colors.red.100.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol._error._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: '{colors.red.100.value}'\n        },\n        backgroundColor: {\n          value: '{colors.red.20.value}'\n        },\n        color: {\n          value: '{colors.red.100.value}'\n        }\n      }\n    },\n    overlay: {\n      borderColor: {\n        value: '{colors.overlay.60.value}'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.font.primary.value}'\n      },\n      _hover: {\n        borderColor: {\n          value: '{colors.overlay.60.value}'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.5.value}'\n        },\n        color: {\n          value: '{colors.neutral.90.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: '{colors.overlay.90.value}'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.5.value}'\n        },\n        color: {\n          value: '{colors.neutral.90.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.overlay._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: '{colors.overlay.90.value}'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.10.value}'\n        },\n        color: {\n          value: '{colors.neutral.100.value}'\n        }\n      }\n    }\n  },\n  primary: {\n    borderColor: {\n      value: 'transparent'\n    },\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    backgroundColor: {\n      value: '{colors.primary.80.value}'\n    },\n    color: {\n      value: '{colors.font.inverse.value}'\n    },\n    _disabled: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.background.disabled.value}'\n      },\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    },\n    _loading: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.background.disabled.value}'\n      },\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    },\n    _hover: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.primary.90.value}'\n      },\n      color: {\n        value: '{colors.font.inverse.value}'\n      }\n    },\n    _focus: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.primary.90.value}'\n      },\n      color: {\n        value: '{colors.font.inverse.value}'\n      },\n      boxShadow: {\n        value: '{components.fieldcontrol._focus.boxShadow.value}'\n      }\n    },\n    _active: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.primary.100.value}'\n      },\n      color: {\n        value: '{colors.font.inverse.value}'\n      }\n    },\n    info: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.blue.80}'\n      },\n      color: {\n        value: '{colors.font.inverse.value}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.blue.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.blue.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.info._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.blue.100.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      }\n    },\n    warning: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.orange.80}'\n      },\n      color: {\n        value: '{colors.font.inverse.value}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.orange.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.orange.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.overlay._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.orange.100.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      }\n    },\n    error: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.red.80}'\n      },\n      color: {\n        value: '{colors.font.inverse.value}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.red.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.red.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol._error._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.red.100.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      }\n    },\n    success: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.green.80}'\n      },\n      color: {\n        value: '{colors.font.inverse.value}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.green.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.green.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.success._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.green.100.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      }\n    },\n    overlay: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.overlay.70}'\n      },\n      color: {\n        value: '{colors.font.inverse.value}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.overlay._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.90.value}'\n        },\n        color: {\n          value: '{colors.font.inverse.value}'\n        }\n      }\n    }\n  },\n  menu: {\n    borderWidth: {\n      value: '{space.zero.value}'\n    },\n    backgroundColor: {\n      value: 'transparent'\n    },\n    justifyContent: {\n      value: 'start'\n    },\n    // Focus and hover styles are identical for menu variation\n    // because for Menu primitive, menu items are forced to be focused even\n    // for mouse interactions, making it impossible to distinguish the two interactions\n    _hover: {\n      color: {\n        value: '{colors.font.inverse.value}'\n      },\n      backgroundColor: {\n        value: '{colors.primary.80.value}'\n      }\n    },\n    _focus: {\n      color: {\n        value: '{colors.font.inverse.value}'\n      },\n      backgroundColor: {\n        value: '{colors.primary.80.value}'\n      }\n    },\n    _active: {\n      color: {\n        value: '{colors.font.inverse.value}'\n      },\n      backgroundColor: {\n        value: '{colors.primary.90.value}'\n      }\n    },\n    _disabled: {\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    }\n  },\n  link: {\n    backgroundColor: {\n      value: 'transparent'\n    },\n    borderColor: {\n      value: 'transparent'\n    },\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    },\n    color: {\n      value: '{colors.font.interactive.value}'\n    },\n    _hover: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.primary.10.value}'\n      },\n      color: {\n        value: '{colors.font.hover.value}'\n      }\n    },\n    _focus: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.primary.10.value}'\n      },\n      color: {\n        value: '{colors.font.focus.value}'\n      },\n      boxShadow: {\n        value: '{components.fieldcontrol._focus.boxShadow.value}'\n      }\n    },\n    _active: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.primary.20.value}'\n      },\n      color: {\n        value: '{colors.font.active.value}'\n      }\n    },\n    _disabled: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    },\n    _loading: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    },\n    info: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.blue.100}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.blue.10.value}'\n        },\n        color: {\n          value: '{colors.blue.90.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.blue.10.value}'\n        },\n        color: {\n          value: '{colors.blue.100.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.info._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.blue.20.value}'\n        },\n        color: {\n          value: '{colors.blue.100.value}'\n        }\n      }\n    },\n    warning: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.orange.100}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.orange.10.value}'\n        },\n        color: {\n          value: '{colors.orange.90.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.orange.10.value}'\n        },\n        color: {\n          value: '{colors.orange.100.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.warning._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.orange.20.value}'\n        },\n        color: {\n          value: '{colors.orange.100.value}'\n        }\n      }\n    },\n    success: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.green.100}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.green.10.value}'\n        },\n        color: {\n          value: '{colors.green.90.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.green.10.value}'\n        },\n        color: {\n          value: '{colors.green.100.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.success._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.green.20.value}'\n        },\n        color: {\n          value: '{colors.green.100.value}'\n        }\n      }\n    },\n    error: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.red.100}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.red.10.value}'\n        },\n        color: {\n          value: '{colors.red.90.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.red.10.value}'\n        },\n        color: {\n          value: '{colors.red.100.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol._error._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.red.20.value}'\n        },\n        color: {\n          value: '{colors.red.100.value}'\n        }\n      }\n    },\n    overlay: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.neutral.100}'\n      },\n      _hover: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.5.value}'\n        },\n        color: {\n          value: '{colors.overlay.80.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.5.value}'\n        },\n        color: {\n          value: '{colors.overlay.90.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol.overlay._focus.boxShadow.value}'\n        }\n      },\n      _active: {\n        borderColor: {\n          value: 'transparent'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.10.value}'\n        },\n        color: {\n          value: '{colors.overlay.90.value}'\n        }\n      }\n    }\n  },\n  warning: {\n    backgroundColor: {\n      value: 'transparent'\n    },\n    borderColor: {\n      value: '{colors.red.60}'\n    },\n    borderWidth: {\n      value: '{borderWidths.small}'\n    },\n    color: {\n      value: '{colors.red.60}'\n    },\n    _hover: {\n      borderColor: {\n        value: '{colors.red.80}'\n      },\n      backgroundColor: {\n        value: '{colors.red.10}'\n      },\n      color: {\n        value: '{colors.font.error}'\n      }\n    },\n    _focus: {\n      borderColor: {\n        value: '{colors.red.80}'\n      },\n      backgroundColor: {\n        value: '{colors.red.10}'\n      },\n      color: {\n        value: '{colors.red.80}'\n      },\n      boxShadow: {\n        value: '{components.fieldcontrol._error._focus.boxShadow}'\n      }\n    },\n    _active: {\n      borderColor: {\n        value: '{colors.red.100}'\n      },\n      backgroundColor: {\n        value: '{colors.red.20}'\n      },\n      color: {\n        value: '{colors.red.100}'\n      }\n    },\n    _disabled: {\n      borderColor: {\n        value: '{colors.border.tertiary}'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.font.disabled}'\n      }\n    },\n    _loading: {\n      borderColor: {\n        value: '{colors.border.tertiary}'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      },\n      color: {\n        value: '{colors.font.disabled}'\n      }\n    }\n  },\n  destructive: {\n    borderColor: {\n      value: 'transparent'\n    },\n    borderWidth: {\n      value: '{borderWidths.small}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    backgroundColor: {\n      value: '{colors.red.60}'\n    },\n    color: {\n      value: '{colors.font.inverse}'\n    },\n    _disabled: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.background.disabled}'\n      },\n      color: {\n        value: '{colors.font.disabled}'\n      }\n    },\n    _loading: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.background.disabled}'\n      },\n      color: {\n        value: '{colors.font.disabled}'\n      }\n    },\n    _hover: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.red.80}'\n      },\n      color: {\n        value: '{colors.font.inverse}'\n      }\n    },\n    _focus: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.red.80}'\n      },\n      color: {\n        value: '{colors.font.inverse}'\n      },\n      boxShadow: {\n        value: '{components.fieldcontrol._error._focus.boxShadow}'\n      }\n    },\n    _active: {\n      borderColor: {\n        value: 'transparent'\n      },\n      backgroundColor: {\n        value: '{colors.red.100}'\n      },\n      color: {\n        value: '{colors.font.inverse}'\n      }\n    }\n  },\n  // sizes\n  small: {\n    fontSize: {\n      value: '{components.fieldcontrol.small.fontSize.value}'\n    },\n    paddingBlockStart: {\n      value: '{components.fieldcontrol.small.paddingBlockStart.value}'\n    },\n    paddingBlockEnd: {\n      value: '{components.fieldcontrol.small.paddingBlockEnd.value}'\n    },\n    paddingInlineStart: {\n      value: '{components.fieldcontrol.small.paddingInlineStart.value}'\n    },\n    paddingInlineEnd: {\n      value: '{components.fieldcontrol.small.paddingInlineEnd.value}'\n    }\n  },\n  large: {\n    fontSize: {\n      value: '{components.fieldcontrol.large.fontSize.value}'\n    },\n    paddingBlockStart: {\n      value: '{components.fieldcontrol.large.paddingBlockStart.value}'\n    },\n    paddingBlockEnd: {\n      value: '{components.fieldcontrol.large.paddingBlockEnd.value}'\n    },\n    paddingInlineStart: {\n      value: '{components.fieldcontrol.large.paddingInlineStart.value}'\n    },\n    paddingInlineEnd: {\n      value: '{components.fieldcontrol.large.paddingInlineEnd.value}'\n    }\n  },\n  loaderWrapper: {\n    alignItems: {\n      value: 'center'\n    },\n    gap: {\n      value: '{space.xs.value}'\n    }\n  }\n};\nconst card = {\n  backgroundColor: {\n    value: '{colors.background.primary.value}'\n  },\n  borderRadius: {\n    value: '{radii.xs.value}'\n  },\n  borderWidth: {\n    value: '0'\n  },\n  borderStyle: {\n    value: 'solid'\n  },\n  borderColor: {\n    value: 'transparent'\n  },\n  boxShadow: {\n    value: 'none'\n  },\n  padding: {\n    value: '{space.medium.value}'\n  },\n  outlined: {\n    backgroundColor: {\n      value: '{components.card.backgroundColor.value}'\n    },\n    borderRadius: {\n      value: '{radii.xs.value}'\n    },\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderColor: {\n      value: '{colors.border.primary.value}'\n    },\n    boxShadow: {\n      value: '{components.card.boxShadow.value}'\n    }\n  },\n  elevated: {\n    backgroundColor: {\n      value: '{components.card.backgroundColor.value}'\n    },\n    borderRadius: {\n      value: '{radii.xs.value}'\n    },\n    borderWidth: {\n      value: '0'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderColor: {\n      value: 'transparent'\n    },\n    boxShadow: {\n      value: '{shadows.medium.value}'\n    }\n  }\n};\nconst checkbox = {\n  cursor: {\n    value: 'pointer'\n  },\n  alignItems: {\n    value: 'center'\n  },\n  _disabled: {\n    cursor: {\n      value: 'not-allowed'\n    }\n  },\n  button: {\n    position: {\n      value: 'relative'\n    },\n    alignItems: {\n      value: 'center'\n    },\n    justifyContent: {\n      value: 'center'\n    },\n    color: {\n      value: '{colors.font.inverse.value}'\n    },\n    before: {\n      width: {\n        value: '100%'\n      },\n      height: {\n        value: '100%'\n      },\n      borderWidth: {\n        value: '{borderWidths.medium.value}'\n      },\n      borderRadius: {\n        value: '20%'\n      },\n      borderStyle: {\n        value: 'solid'\n      },\n      borderColor: {\n        value: '{colors.border.primary.value}'\n      }\n    },\n    _focus: {\n      outlineColor: {\n        value: '{colors.transparent.value}'\n      },\n      outlineStyle: {\n        value: 'solid'\n      },\n      outlineWidth: {\n        value: '{outlineWidths.medium.value}'\n      },\n      outlineOffset: {\n        value: '{outlineOffsets.medium.value}'\n      },\n      borderColor: {\n        value: '{colors.border.focus.value}'\n      },\n      boxShadow: {\n        value: '{components.fieldcontrol._focus.boxShadow.value}'\n      }\n    },\n    _disabled: {\n      borderColor: {\n        value: '{colors.border.disabled.value}'\n      }\n    },\n    _error: {\n      borderColor: {\n        value: '{colors.border.error.value}'\n      },\n      _focus: {\n        borderColor: {\n          value: '{colors.border.error.value}'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol._error._focus.boxShadow.value}'\n        }\n      }\n    }\n  },\n  icon: {\n    backgroundColor: {\n      value: '{colors.primary.80.value}'\n    },\n    borderRadius: {\n      value: '20%'\n    },\n    opacity: {\n      value: '{opacities.0.value}'\n    },\n    transform: {\n      value: 'scale(0)'\n    },\n    transitionProperty: {\n      value: 'all'\n    },\n    transitionDuration: {\n      value: '{time.short.value}'\n    },\n    transitionTimingFunction: {\n      value: 'ease-in-out'\n    },\n    _checked: {\n      opacity: {\n        value: '{opacities.100.value}'\n      },\n      transform: {\n        value: 'scale(1)'\n      },\n      _disabled: {\n        backgroundColor: {\n          value: '{colors.background.disabled.value}'\n        }\n      }\n    },\n    _indeterminate: {\n      opacity: {\n        value: '{opacities.100.value}'\n      },\n      transform: {\n        value: 'scale(1)'\n      },\n      _disabled: {\n        backgroundColor: {\n          value: '{colors.background.disabled.value}'\n        }\n      }\n    }\n  },\n  label: {\n    color: {\n      value: '{components.text.color.value}'\n    },\n    _disabled: {\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    }\n  }\n};\nconst checkboxfield = {\n  alignItems: {\n    value: 'flex-start'\n  },\n  alignContent: {\n    value: 'center'\n  },\n  flexDirection: {\n    value: 'column'\n  },\n  justifyContent: {\n    value: 'center'\n  }\n};\n\n//we are reusing the types from the nested components but new tokens need to be created that reference the previous tokens so that they can inherit the needed values but can be overwritten and only effect the collection component.\n//only a subset of the design tokens of the nested components are being exposed, this can be expanded later.\nconst collection = {\n  pagination: {\n    current: {\n      color: {\n        value: '{components.pagination.current.color}'\n      },\n      backgroundColor: {\n        value: '{components.pagination.current.backgroundColor}'\n      }\n    },\n    button: {\n      color: {\n        value: '{components.pagination.button.color}'\n      },\n      _hover: {\n        backgroundColor: {\n          value: '{components.pagination.button.hover.backgroundColor}'\n        },\n        color: {\n          value: '{components.pagination.button.hover.color}'\n        }\n      },\n      _disabled: {\n        color: {\n          value: '{components.pagination.button.disabled.color}'\n        }\n      }\n    }\n  },\n  search: {\n    input: {\n      color: {\n        value: '{components.searchfield.color}'\n      }\n    },\n    button: {\n      color: {\n        value: '{components.searchfield.button.color}'\n      },\n      _active: {\n        backgroundColor: {\n          value: '{components.searchfield.button._active.backgroundColor}'\n        },\n        borderColor: {\n          value: '{components.searchfield.button._active.borderColor}'\n        },\n        color: {\n          value: '{components.searchfield.button._active.color}'\n        }\n      },\n      _disabled: {\n        backgroundColor: {\n          value: '{components.searchfield.button._disabled.backgroundColor}'\n        },\n        borderColor: {\n          value: '{components.searchfield.button._disabled.borderColor}'\n        },\n        color: {\n          value: '{components.searchfield.button._disabled.color}'\n        }\n      },\n      _focus: {\n        backgroundColor: {\n          value: '{components.searchfield.button._focus.backgroundColor}'\n        },\n        borderColor: {\n          value: '{components.searchfield.button._focus.borderColor}'\n        },\n        color: {\n          value: '{components.searchfield.button._focus.color}'\n        }\n      },\n      _hover: {\n        backgroundColor: {\n          value: '{components.searchfield.button._hover.backgroundColor}'\n        },\n        borderColor: {\n          value: '{components.searchfield.button._hover.borderColor}'\n        },\n        color: {\n          value: '{components.searchfield.button._hover.color}'\n        }\n      }\n    }\n  }\n};\nconst copy = {\n  fontSize: {\n    value: '{fontSizes.xs}'\n  },\n  gap: {\n    value: '{space.relative.medium}'\n  },\n  svg: {\n    path: {\n      fill: {\n        value: '{colors.font.primary}'\n      }\n    }\n  },\n  toolTip: {\n    bottom: {\n      value: '{space.large}'\n    },\n    color: {\n      value: '{colors.teal.100}'\n    },\n    fontSize: {\n      value: '{fontSizes.xxs}'\n    }\n  }\n};\nconst dialcodeselect = {\n  height: {\n    value: '{space.relative.full.value}'\n  }\n};\nconst divider = {\n  borderStyle: {\n    value: 'solid'\n  },\n  borderColor: {\n    value: '{colors.border.primary.value}'\n  },\n  borderWidth: {\n    value: '{borderWidths.medium.value}'\n  },\n  label: {\n    color: {\n      value: '{colors.font.tertiary.value}'\n    },\n    paddingInline: {\n      value: '{space.medium.value}'\n    },\n    fontSize: {\n      value: '{fontSizes.small.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.primary.value}'\n    }\n  },\n  small: {\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    }\n  },\n  large: {\n    borderWidth: {\n      value: '{borderWidths.large.value}'\n    }\n  },\n  opacity: {\n    value: '{opacities.60.value}'\n  }\n};\nconst dropzone = {\n  backgroundColor: {\n    value: '{colors.background.primary}'\n  },\n  borderRadius: {\n    value: '{radii.small}'\n  },\n  borderColor: {\n    value: '{colors.border.primary}'\n  },\n  borderStyle: {\n    value: 'dashed'\n  },\n  borderWidth: {\n    value: '{borderWidths.small}'\n  },\n  color: {\n    value: '{colors.font.primary}'\n  },\n  gap: {\n    value: '{space.small}'\n  },\n  paddingBlock: {\n    value: '{space.xl}'\n  },\n  paddingInline: {\n    value: '{space.large}'\n  },\n  textAlign: {\n    value: 'center'\n  },\n  _active: {\n    backgroundColor: {\n      value: '{colors.primary.10}'\n    },\n    borderRadius: {\n      value: '{components.dropzone.borderRadius}'\n    },\n    borderColor: {\n      value: '{colors.border.pressed}'\n    },\n    borderStyle: {\n      value: '{components.dropzone.borderStyle}'\n    },\n    borderWidth: {\n      value: '{components.dropzone.borderWidth}'\n    },\n    color: {\n      value: '{colors.font.primary}'\n    }\n  },\n  _disabled: {\n    backgroundColor: {\n      value: '{colors.background.disabled}'\n    },\n    borderRadius: {\n      value: '{components.dropzone.borderRadius}'\n    },\n    borderColor: {\n      value: '{colors.border.disabled}'\n    },\n    borderStyle: {\n      value: '{components.dropzone.borderStyle}'\n    },\n    borderWidth: {\n      value: '{components.dropzone.borderWidth}'\n    },\n    color: {\n      value: '{colors.font.disabled}'\n    }\n  },\n  accepted: {\n    backgroundColor: {\n      value: '{colors.background.success}'\n    },\n    borderRadius: {\n      value: '{components.dropzone.borderRadius}'\n    },\n    borderColor: {\n      value: '{colors.border.success}'\n    },\n    borderStyle: {\n      value: '{components.dropzone.borderStyle}'\n    },\n    borderWidth: {\n      value: '{components.dropzone.borderWidth}'\n    },\n    color: {\n      value: '{colors.font.success}'\n    }\n  },\n  rejected: {\n    backgroundColor: {\n      value: '{colors.background.error}'\n    },\n    borderRadius: {\n      value: '{components.dropzone.borderRadius}'\n    },\n    borderColor: {\n      value: '{colors.border.pressed}'\n    },\n    borderStyle: {\n      value: '{components.dropzone.borderStyle}'\n    },\n    borderWidth: {\n      value: '{components.dropzone.borderWidth}'\n    },\n    color: {\n      value: '{colors.font.error}'\n    }\n  }\n};\nconst accordion = {\n  backgroundColor: {\n    value: '{colors.background.primary.value}'\n  },\n  item: {\n    borderColor: {\n      value: '{colors.border.secondary.value}'\n    },\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderRadius: {\n      value: '{radii.small.value}'\n    },\n    trigger: {\n      alignItems: {\n        value: 'center'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      color: {\n        value: 'inherit'\n      },\n      gap: {\n        value: '{space.small.value}'\n      },\n      justifyContent: {\n        value: 'space-between'\n      },\n      paddingBlock: {\n        value: '{space.xs.value}'\n      },\n      paddingInline: {\n        value: '{space.small.value}'\n      },\n      _hover: {\n        color: {\n          value: 'inherit'\n        },\n        backgroundColor: {\n          value: '{colors.overlay.5.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: '{colors.border.focus.value}'\n        },\n        boxShadow: {\n          value: {\n            offsetX: '0',\n            offsetY: '0',\n            blurRadius: '0',\n            spreadRadius: '2px',\n            color: '{colors.border.focus.value}'\n          }\n        }\n      }\n    },\n    content: {\n      color: {\n        value: 'inherit'\n      },\n      paddingInline: {\n        value: '{space.small.value}'\n      },\n      paddingBlockEnd: {\n        value: '{space.small.value}'\n      },\n      paddingBlockStart: {\n        value: '{space.xxxs.value}'\n      }\n    },\n    icon: {\n      color: {\n        value: '{colors.font.tertiary.value}'\n      },\n      transitionDuration: {\n        value: '{time.medium.value}'\n      },\n      transitionTimingFunction: {\n        value: 'cubic-bezier(0.87, 0, 0.13, 1)'\n      }\n    }\n  }\n};\nconst field = {\n  // default styles\n  gap: {\n    value: '{space.xs.value}'\n  },\n  fontSize: {\n    value: '{fontSizes.medium.value}'\n  },\n  flexDirection: {\n    value: 'column'\n  },\n  // Adjust base fontSize and gap for small and large sizes\n  small: {\n    gap: {\n      value: '{space.xxxs.value}'\n    },\n    fontSize: {\n      value: '{fontSizes.small.value}'\n    }\n  },\n  large: {\n    gap: {\n      value: '{space.small.value}'\n    },\n    fontSize: {\n      value: '{fontSizes.large.value}'\n    }\n  },\n  label: {\n    color: {\n      value: '{colors.font.secondary.value}'\n    }\n  }\n};\nconst fieldcontrol = {\n  borderStyle: {\n    value: 'solid'\n  },\n  borderColor: {\n    value: '{colors.border.primary.value}'\n  },\n  borderWidth: {\n    value: '{borderWidths.small.value}'\n  },\n  borderRadius: {\n    value: '{radii.small.value}'\n  },\n  color: {\n    value: '{colors.font.primary.value}'\n  },\n  paddingBlockStart: {\n    value: '{space.xs.value}'\n  },\n  paddingBlockEnd: {\n    value: '{space.xs.value}'\n  },\n  paddingInlineStart: {\n    value: '{space.medium.value}'\n  },\n  paddingInlineEnd: {\n    value: '{space.medium.value}'\n  },\n  fontSize: {\n    value: '{components.field.fontSize.value}'\n  },\n  lineHeight: {\n    value: '{lineHeights.medium.value}'\n  },\n  transitionDuration: {\n    value: '{time.medium.value}'\n  },\n  outlineColor: {\n    value: '{colors.transparent.value}'\n  },\n  outlineStyle: {\n    value: 'solid'\n  },\n  outlineWidth: {\n    value: '{outlineWidths.medium.value}'\n  },\n  outlineOffset: {\n    value: '{outlineOffsets.medium.value}'\n  },\n  small: {\n    fontSize: {\n      value: '{components.field.small.fontSize.value}'\n    },\n    paddingBlockStart: {\n      value: '{space.xxs.value}'\n    },\n    paddingBlockEnd: {\n      value: '{space.xxs.value}'\n    },\n    paddingInlineStart: {\n      value: '{space.small.value}'\n    },\n    paddingInlineEnd: {\n      value: '{space.small.value}'\n    }\n  },\n  large: {\n    fontSize: {\n      value: '{components.field.large.fontSize.value}'\n    },\n    paddingBlockStart: {\n      value: '{space.xs.value}'\n    },\n    paddingBlockEnd: {\n      value: '{space.xs.value}'\n    },\n    paddingInlineStart: {\n      value: '{space.medium.value}'\n    },\n    paddingInlineEnd: {\n      value: '{space.medium.value}'\n    }\n  },\n  quiet: {\n    borderStyle: {\n      value: 'none'\n    },\n    borderInlineStart: {\n      value: 'none'\n    },\n    borderInlineEnd: {\n      value: 'none'\n    },\n    borderBlockStart: {\n      value: 'none'\n    },\n    borderRadius: {\n      value: '0'\n    },\n    _focus: {\n      borderBlockEndColor: {\n        value: 'transparent'\n      },\n      boxShadow: {\n        value: '{components.fieldcontrol._focus.boxShadow.value}'\n      }\n    },\n    _error: {\n      borderBlockEndColor: {\n        value: '{colors.border.error.value}'\n      },\n      _focus: {\n        borderBlockEndColor: {\n          value: 'transparent'\n        },\n        boxShadow: {\n          value: '{components.fieldcontrol._error._focus.boxShadow.value}'\n        }\n      }\n    }\n  },\n  _focus: {\n    // These focus styles have been calibrated to create\n    // a highly visible focus indicator per WCAG 2.2 guidlines:\n    // See: https://www.w3.org/TR/WCAG22/#focus-appearance\n    //\n    // Key features:\n    // * Focus indicator area is at least the 2 CSS px perimeter around the component.\n    // * Contrast between focused and unfocused area of contrast has a ratio of 3:1\n    //\n    // IMPORTANT: Must recalibrate if `colors.border.focus` are changed\n    borderColor: {\n      value: '{colors.border.focus.value}'\n    },\n    boxShadow: {\n      value: {\n        offsetX: '0px',\n        offsetY: '0px',\n        blurRadius: '0px',\n        spreadRadius: '2px',\n        color: '{colors.border.focus.value}'\n      }\n    }\n  },\n  _disabled: {\n    color: {\n      value: '{colors.font.disabled.value}'\n    },\n    cursor: {\n      value: 'not-allowed'\n    },\n    borderColor: {\n      value: '{colors.transparent.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.disabled.value}'\n    }\n  },\n  _error: {\n    borderColor: {\n      value: '{colors.border.error.value}'\n    },\n    color: {\n      value: '{colors.font.error.value}'\n    },\n    _focus: {\n      boxShadow: {\n        value: {\n          offsetX: '0px',\n          offsetY: '0px',\n          blurRadius: '0px',\n          spreadRadius: '2px',\n          color: '{colors.border.error.value}'\n        }\n      }\n    }\n  },\n  info: {\n    _focus: {\n      boxShadow: {\n        value: {\n          offsetX: '0px',\n          offsetY: '0px',\n          blurRadius: '0px',\n          spreadRadius: '2px',\n          color: '{colors.blue.100.value}'\n        }\n      }\n    }\n  },\n  warning: {\n    _focus: {\n      boxShadow: {\n        value: {\n          offsetX: '0px',\n          offsetY: '0px',\n          blurRadius: '0px',\n          spreadRadius: '2px',\n          color: '{colors.orange.100.value}'\n        }\n      }\n    }\n  },\n  success: {\n    _focus: {\n      boxShadow: {\n        value: {\n          offsetX: '0px',\n          offsetY: '0px',\n          blurRadius: '0px',\n          spreadRadius: '2px',\n          color: '{colors.green.100.value}'\n        }\n      }\n    }\n  },\n  overlay: {\n    _focus: {\n      boxShadow: {\n        value: {\n          offsetX: '0px',\n          offsetY: '0px',\n          blurRadius: '0px',\n          spreadRadius: '2px',\n          color: '{colors.overlay.90.value}'\n        }\n      }\n    }\n  }\n};\nconst fieldgroup = {\n  gap: {\n    value: '{space.zero.value}'\n  },\n  vertical: {\n    alignItems: {\n      value: 'center'\n    }\n  },\n  outer: {\n    alignItems: {\n      value: 'center'\n    }\n  }\n};\nconst fieldset = {\n  backgroundColor: {\n    value: 'transparent'\n  },\n  borderRadius: {\n    value: '{radii.xs.value}'\n  },\n  flexDirection: {\n    value: 'column'\n  },\n  gap: {\n    value: '{components.field.gap.value}'\n  },\n  legend: {\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    fontSize: {\n      value: '{components.field.fontSize.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.bold.value}'\n    },\n    lineHeight: {\n      value: '{lineHeights.medium.value}'\n    },\n    small: {\n      fontSize: '{components.field.small.fontSize.value}'\n    },\n    large: {\n      fontSize: '{components.field.large.fontSize.value}'\n    }\n  },\n  outlined: {\n    padding: '{space.medium.value}',\n    borderColor: '{colors.neutral.40.value}',\n    borderWidth: '{borderWidths.small.value}',\n    borderStyle: 'solid',\n    small: {\n      padding: '{space.small.value}'\n    },\n    large: {\n      padding: '{space.large.value}'\n    }\n  },\n  small: {\n    gap: '{components.field.small.gap.value}'\n  },\n  large: {\n    gap: '{components.field.large.gap.value}'\n  }\n};\nconst fieldmessages = {\n  error: {\n    color: {\n      value: '{colors.font.error.value}'\n    },\n    fontSize: {\n      value: '{fontSizes.small.value}'\n    }\n  },\n  description: {\n    color: {\n      value: '{colors.font.secondary.value}'\n    },\n    fontStyle: {\n      value: 'italic'\n    },\n    fontSize: {\n      value: '{fontSizes.small.value}'\n    }\n  }\n};\nconst flex = {\n  gap: {\n    value: '{space.medium.value}'\n  },\n  justifyContent: {\n    value: 'normal'\n  },\n  alignItems: {\n    value: 'stretch'\n  },\n  alignContent: {\n    value: 'normal'\n  },\n  flexWrap: {\n    value: 'nowrap'\n  }\n};\nconst heading = {\n  color: {\n    value: '{colors.font.primary.value}'\n  },\n  lineHeight: {\n    value: '{lineHeights.small.value}'\n  },\n  1: {\n    fontSize: {\n      value: '{fontSizes.xxxxl.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.light.value}'\n    }\n  },\n  2: {\n    fontSize: {\n      value: '{fontSizes.xxxl.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.normal.value}'\n    }\n  },\n  3: {\n    fontSize: {\n      value: '{fontSizes.xxl.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.medium.value}'\n    }\n  },\n  4: {\n    fontSize: {\n      value: '{fontSizes.xl.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.semibold.value}'\n    }\n  },\n  5: {\n    fontSize: {\n      value: '{fontSizes.large.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.bold.value}'\n    }\n  },\n  6: {\n    fontSize: {\n      value: '{fontSizes.medium.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.extrabold.value}'\n    }\n  }\n};\nconst highlightmatch = {\n  highlighted: {\n    fontWeight: {\n      value: '{fontWeights.bold}'\n    }\n  }\n};\nconst icon = {\n  lineHeight: {\n    value: 1\n  },\n  height: {\n    value: '1em'\n  } // Should match height of parent container font-size\n};\nconst input = {\n  color: {\n    value: '{components.fieldcontrol.color.value}'\n  },\n  borderColor: {\n    value: '{components.fieldcontrol.borderColor.value}'\n  },\n  fontSize: {\n    value: '{components.fieldcontrol.fontSize.value}'\n  },\n  _focus: {\n    borderColor: {\n      value: '{components.fieldcontrol._focus.borderColor.value}'\n    }\n  }\n};\nconst image = {\n  maxWidth: {\n    value: '100%'\n  },\n  height: {\n    value: 'auto'\n  },\n  objectFit: {\n    value: 'initial'\n  },\n  objectPosition: {\n    value: 'initial'\n  }\n};\nconst inappmessaging = {\n  banner: {\n    height: {\n      value: '150px '\n    },\n    width: {\n      value: '400px '\n    }\n  },\n  button: {\n    backgroundColor: {\n      value: '#e8e8e8'\n    },\n    borderRadius: {\n      value: '5px'\n    },\n    color: {\n      value: 'black'\n    }\n  },\n  dialog: {\n    height: {\n      value: '50vh'\n    },\n    minHeight: {\n      value: '400px'\n    },\n    minWidth: {\n      value: '400px'\n    },\n    width: {\n      value: '30vw'\n    }\n  },\n  header: {\n    fontSize: {\n      value: '{fontSizes.medium.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.extrabold.value}'\n    }\n  }\n};\nconst link = {\n  active: {\n    color: {\n      value: '{colors.font.active.value}'\n    }\n  },\n  color: {\n    value: '{colors.font.interactive.value}'\n  },\n  focus: {\n    color: {\n      value: '{colors.font.focus.value}'\n    }\n  },\n  hover: {\n    color: {\n      value: '{colors.font.hover.value}'\n    }\n  },\n  visited: {\n    color: {\n      value: '{colors.font.interactive.value}'\n    }\n  }\n};\nconst liveness = {\n  cameraModule: {\n    backgroundColor: {\n      value: '{colors.background.primary.value}'\n    }\n  }\n};\nconst loader = {\n  width: {\n    value: '{fontSizes.medium.value}'\n  },\n  height: {\n    value: '{fontSizes.medium.value}'\n  },\n  fontSize: {\n    value: '{fontSizes.xs.value}'\n  },\n  strokeEmpty: {\n    value: '{colors.neutral.20.value}'\n  },\n  strokeFilled: {\n    value: '{colors.primary.80.value}'\n  },\n  strokeLinecap: {\n    value: 'round'\n  },\n  animationDuration: {\n    value: '1s'\n  },\n  small: {\n    width: {\n      value: '{fontSizes.small.value}'\n    },\n    height: {\n      value: '{fontSizes.small.value}'\n    },\n    fontSize: {\n      value: '{fontSizes.xxs.value}'\n    }\n  },\n  large: {\n    width: {\n      value: '{fontSizes.large.value}'\n    },\n    height: {\n      value: '{fontSizes.large.value}'\n    },\n    fontSize: {\n      value: '{fontSizes.small.value}'\n    }\n  },\n  linear: {\n    width: {\n      value: '100%'\n    },\n    minWidth: {\n      value: '5rem'\n    },\n    fontSize: {\n      value: '{fontSizes.xxs.value}'\n    },\n    strokeWidth: {\n      value: '{fontSizes.xxs.value}'\n    },\n    strokeFilled: {\n      value: '{colors.primary.80.value}'\n    },\n    strokeEmpty: {\n      value: '{colors.neutral.20.value}'\n    },\n    strokeLinecap: {\n      value: 'round'\n    },\n    animationDuration: {\n      value: '1s'\n    },\n    small: {\n      strokeWidth: {\n        value: '{fontSizes.xxxs.value}'\n      },\n      fontSize: {\n        value: '{fontSizes.xxxs.value}'\n      }\n    },\n    large: {\n      strokeWidth: {\n        value: '{fontSizes.xs.value}'\n      },\n      fontSize: {\n        value: '{fontSizes.xs.value}'\n      }\n    }\n  },\n  text: {\n    fill: {\n      value: '{colors.font.primary.value}'\n    }\n  }\n};\nconst menu = {\n  backgroundColor: {\n    value: '{colors.background.primary.value}'\n  },\n  borderRadius: {\n    value: '{radii.medium.value}'\n  },\n  borderWidth: {\n    value: '{borderWidths.small.value}'\n  },\n  borderStyle: {\n    value: 'solid'\n  },\n  borderColor: {\n    value: '{colors.border.primary.value}'\n  },\n  boxShadow: {\n    value: '{shadows.large.value}'\n  },\n  flexDirection: {\n    value: 'column'\n  },\n  gap: {\n    value: '{space.zero.value}'\n  },\n  maxWidth: {\n    value: '30rem'\n  },\n  minWidth: {\n    value: '14rem'\n  },\n  small: {\n    width: {\n      value: '{fontSizes.medium.value}'\n    },\n    height: {\n      value: '{fontSizes.medium.value}'\n    }\n  },\n  large: {\n    width: {\n      value: '{fontSizes.xxxl.value}'\n    },\n    height: {\n      value: '{fontSizes.xxxl.value}'\n    }\n  },\n  item: {\n    minHeight: {\n      value: '2.5rem'\n    },\n    paddingInlineStart: {\n      value: '{space.medium.value}'\n    },\n    paddingInlineEnd: {\n      value: '{space.medium.value}'\n    }\n  }\n};\nconst message = {\n  // Default styles\n  alignItems: {\n    value: 'center'\n  },\n  backgroundColor: {\n    value: '{colors.background.tertiary.value}'\n  },\n  borderColor: {\n    value: 'transparent'\n  },\n  borderStyle: {\n    value: 'solid'\n  },\n  borderWidth: {\n    value: '{borderWidths.small.value}'\n  },\n  borderRadius: {\n    value: '{radii.xs.value}'\n  },\n  color: {\n    value: '{colors.font.primary.value}'\n  },\n  justifyContent: {\n    value: 'flex-start'\n  },\n  paddingBlock: {\n    value: '{space.small.value}'\n  },\n  paddingInline: {\n    value: '{space.medium.value}'\n  },\n  lineHeight: {\n    value: '{lineHeights.small.value}'\n  },\n  icon: {\n    size: {\n      value: '{fontSizes.xl.value}'\n    }\n  },\n  heading: {\n    fontSize: {\n      value: '{fontSizes.medium.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.bold.value}'\n    }\n  },\n  dismiss: {\n    gap: {\n      value: '{space.xxs.value}'\n    }\n  },\n  // Variations\n  plain: {\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.primary.value}'\n    },\n    borderColor: {\n      value: 'transparent'\n    },\n    info: {\n      color: {\n        value: '{colors.font.info.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      borderColor: {\n        value: 'transparent'\n      }\n    },\n    error: {\n      color: {\n        value: '{colors.font.error.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      borderColor: {\n        value: 'transparent'\n      }\n    },\n    success: {\n      color: {\n        value: '{colors.font.success.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      borderColor: {\n        value: 'transparent'\n      }\n    },\n    warning: {\n      color: {\n        value: '{colors.font.warning.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      borderColor: {\n        value: 'transparent'\n      }\n    }\n  },\n  outlined: {\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.primary.value}'\n    },\n    borderColor: {\n      value: '{colors.border.primary.value}'\n    },\n    info: {\n      color: {\n        value: '{colors.font.info.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      borderColor: {\n        value: '{colors.border.info.value}'\n      }\n    },\n    error: {\n      color: {\n        value: '{colors.font.error.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      borderColor: {\n        value: '{colors.border.error.value}'\n      }\n    },\n    success: {\n      color: {\n        value: '{colors.font.success.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      borderColor: {\n        value: '{colors.border.success.value}'\n      }\n    },\n    warning: {\n      color: {\n        value: '{colors.font.warning.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      borderColor: {\n        value: '{colors.border.warning.value}'\n      }\n    }\n  },\n  filled: {\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.secondary.value}'\n    },\n    borderColor: {\n      value: 'transparent'\n    },\n    info: {\n      color: {\n        value: '{colors.font.info.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.info.value}'\n      },\n      borderColor: {\n        value: 'transparent'\n      }\n    },\n    error: {\n      color: {\n        value: '{colors.font.error.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.error.value}'\n      },\n      borderColor: {\n        value: 'transparent'\n      }\n    },\n    success: {\n      color: {\n        value: '{colors.font.success.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.success.value}'\n      },\n      borderColor: {\n        value: 'transparent'\n      }\n    },\n    warning: {\n      color: {\n        value: '{colors.font.warning.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.warning.value}'\n      },\n      borderColor: {\n        value: 'transparent'\n      }\n    }\n  }\n};\nconst pagination = {\n  current: {\n    alignItems: {\n      value: 'center'\n    },\n    justifyContent: {\n      value: 'center'\n    },\n    color: {\n      value: '{colors.font.inverse.value}'\n    },\n    fontSize: {\n      value: '{fontSizes.small.value}'\n    },\n    backgroundColor: {\n      value: '{colors.overlay.40.value}'\n    }\n  },\n  button: {\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    paddingInlineStart: {\n      value: '{space.xxs.value}'\n    },\n    paddingInlineEnd: {\n      value: '{space.xxs.value}'\n    },\n    transitionProperty: {\n      value: 'background-color'\n    },\n    transitionDuration: {\n      value: '{time.medium.value}'\n    },\n    hover: {\n      backgroundColor: {\n        value: '{colors.overlay.10.value}'\n      },\n      color: {\n        value: '{colors.font.primary.value}'\n      }\n    },\n    disabled: {\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    }\n  },\n  ellipsis: {\n    alignItems: {\n      value: 'baseline'\n    },\n    justifyContent: {\n      value: 'center'\n    },\n    paddingInlineStart: {\n      value: '{space.xs.value}'\n    },\n    paddingInlineEnd: {\n      value: '{space.xs.value}'\n    }\n  },\n  itemContainer: {\n    marginLeft: {\n      value: '{space.xxxs.value}'\n    },\n    marginRight: {\n      value: '{space.xxxs.value}'\n    }\n  },\n  itemShared: {\n    height: {\n      value: '{fontSizes.xxl.value}'\n    },\n    minWidth: {\n      value: '{fontSizes.xxl.value}'\n    },\n    borderRadius: {\n      value: '{fontSizes.medium.value}'\n    }\n  }\n};\nconst passwordfield = {\n  color: {\n    value: '{components.fieldcontrol.color.value}'\n  },\n  button: {\n    color: {\n      value: '{components.button.color.value}'\n    },\n    _active: {\n      backgroundColor: {\n        value: '{components.button._active.backgroundColor.value}'\n      },\n      borderColor: {\n        value: '{components.button._active.borderColor.value}'\n      },\n      color: {\n        value: '{components.button._active.color.value}'\n      }\n    },\n    _disabled: {\n      backgroundColor: {\n        value: '{components.button._disabled.backgroundColor.value}'\n      },\n      borderColor: {\n        value: '{components.button._disabled.borderColor.value}'\n      },\n      color: {\n        value: '{components.button._disabled.color.value}'\n      }\n    },\n    _error: {\n      color: {\n        value: '{components.button.outlined.error.color.value}'\n      },\n      backgroundColor: {\n        value: '{components.button.outlined.error.backgroundColor.value}'\n      },\n      borderColor: {\n        value: '{components.button.outlined.error.borderColor.value}'\n      },\n      _active: {\n        borderColor: {\n          value: '{components.button.outlined.error._active.borderColor.value}'\n        },\n        backgroundColor: {\n          value: '{components.button.outlined.error._active.backgroundColor.value}'\n        },\n        color: {\n          value: '{components.button.outlined.error._active.color.value}'\n        }\n      },\n      _focus: {\n        borderColor: {\n          value: '{components.button.outlined.error._focus.borderColor.value}'\n        },\n        backgroundColor: {\n          value: '{components.button.outlined.error._focus.backgroundColor.value}'\n        },\n        color: {\n          value: '{components.button.outlined.error._focus.color.value}'\n        },\n        boxShadow: {\n          value: '{components.button.outlined.error._focus.boxShadow.value}'\n        }\n      },\n      _hover: {\n        borderColor: {\n          value: '{components.button.outlined.error._hover.borderColor.value}'\n        },\n        backgroundColor: {\n          value: '{components.button.outlined.error._hover.backgroundColor.value}'\n        },\n        color: {\n          value: '{components.button.outlined.error._hover.color.value}'\n        }\n      }\n    },\n    _focus: {\n      backgroundColor: {\n        value: '{components.button._focus.backgroundColor.value}'\n      },\n      borderColor: {\n        value: '{components.button._focus.borderColor.value}'\n      },\n      color: {\n        value: '{components.button._focus.color.value}'\n      }\n    },\n    _hover: {\n      backgroundColor: {\n        value: '{components.button._hover.backgroundColor.value}'\n      },\n      borderColor: {\n        value: '{components.button._hover.borderColor.value}'\n      },\n      color: {\n        value: '{components.button._hover.color.value}'\n      }\n    }\n  }\n};\nconst phonenumberfield = {\n  color: {\n    value: '{components.fieldcontrol.color}'\n  },\n  borderColor: {\n    value: '{components.fieldcontrol.borderColor}'\n  },\n  fontSize: {\n    value: '{components.fieldcontrol.fontSize}'\n  },\n  _focus: {\n    borderColor: {\n      value: '{components.fieldcontrol._focus.borderColor}'\n    }\n  }\n};\nconst placeholder = {\n  borderRadius: {\n    value: '{radii.small.value}'\n  },\n  transitionDuration: {\n    value: '{time.long.value}'\n  },\n  startColor: {\n    value: '{colors.background.secondary.value}'\n  },\n  endColor: {\n    value: '{colors.background.tertiary.value}'\n  },\n  // sizes\n  small: {\n    height: {\n      value: '{space.small.value}'\n    }\n  },\n  default: {\n    height: {\n      value: '{space.medium.value}'\n    }\n  },\n  large: {\n    height: {\n      value: '{space.large.value}'\n    }\n  }\n};\nconst radio = {\n  alignItems: {\n    value: 'center'\n  },\n  justifyContent: {\n    value: 'flex-start'\n  },\n  gap: {\n    value: 'inherit'\n  },\n  _disabled: {\n    cursor: {\n      value: 'not-allowed'\n    }\n  },\n  button: {\n    alignItems: {\n      value: 'center'\n    },\n    justifyContent: {\n      value: 'center'\n    },\n    width: {\n      value: '{fontSizes.medium.value}'\n    },\n    height: {\n      value: '{fontSizes.medium.value}'\n    },\n    boxSizing: {\n      value: 'border-box'\n    },\n    borderWidth: {\n      value: '{borderWidths.medium.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderRadius: {\n      value: '50%'\n    },\n    borderColor: {\n      value: '{colors.border.primary.value}'\n    },\n    color: {\n      value: '{colors.background.primary.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.primary.value}'\n    },\n    transitionProperty: {\n      value: 'all'\n    },\n    transitionDuration: {\n      value: '{time.medium.value}'\n    },\n    outlineColor: {\n      value: '{colors.transparent.value}'\n    },\n    outlineStyle: {\n      value: 'solid'\n    },\n    outlineWidth: {\n      value: '{outlineWidths.medium.value}'\n    },\n    outlineOffset: {\n      value: '{outlineOffsets.medium.value}'\n    },\n    // We want the dot inside the border to be a border-width from the border\n    padding: {\n      value: '{borderWidths.medium.value}'\n    },\n    small: {\n      width: {\n        value: '{fontSizes.small.value}'\n      },\n      height: {\n        value: '{fontSizes.small.value}'\n      }\n    },\n    large: {\n      width: {\n        value: '{fontSizes.large.value}'\n      },\n      height: {\n        value: '{fontSizes.large.value}'\n      }\n    },\n    _checked: {\n      color: {\n        value: '{colors.primary.80.value}'\n      },\n      _disabled: {\n        color: {\n          value: '{colors.background.disabled.value}'\n        }\n      }\n    },\n    _focus: {\n      borderColor: {\n        value: '{colors.border.focus.value}'\n      },\n      boxShadow: {\n        value: '{components.fieldcontrol._focus.boxShadow.value}'\n      }\n    },\n    _error: {\n      borderColor: {\n        value: '{colors.border.error.value}'\n      },\n      _focus: {\n        boxShadow: {\n          value: '{components.fieldcontrol._error._focus.boxShadow.value}'\n        }\n      }\n    },\n    _disabled: {\n      borderColor: {\n        value: '{colors.border.disabled.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      }\n    }\n  },\n  label: {\n    color: {\n      value: '{components.text.color.value}'\n    },\n    _disabled: {\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    }\n  }\n};\nconst radiogroup = {\n  radio: {\n    borderWidth: {\n      value: '{components.radio.button.borderWidth}'\n    },\n    borderColor: {\n      value: '{components.radio.button.borderColor}'\n    },\n    backgroundColor: {\n      value: '{components.radio.button.backgroundColor}'\n    },\n    _checked: {\n      color: {\n        value: '{components.radio.button._checked.color}'\n      }\n    },\n    label: {\n      color: {\n        value: '{components.radio.label.color}'\n      }\n    }\n  },\n  legend: {\n    color: {\n      value: '{components.fieldset.legend.color}'\n    },\n    fontWeight: {\n      value: '{fontWeights.normal}'\n    }\n  }\n};\nconst rating = {\n  large: {\n    size: {\n      value: '{fontSizes.xxxl.value}'\n    }\n  },\n  default: {\n    size: {\n      value: '{fontSizes.xl.value}'\n    }\n  },\n  small: {\n    size: {\n      value: '{fontSizes.small.value}'\n    }\n  },\n  filled: {\n    color: {\n      value: '{colors.secondary.80.value}'\n    }\n  },\n  empty: {\n    color: {\n      value: '{colors.background.tertiary.value}'\n    }\n  }\n};\nconst searchfield = {\n  color: {\n    value: '{components.fieldcontrol.color.value}'\n  },\n  button: {\n    color: {\n      value: '{components.button.color.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.primary.value}'\n    },\n    _active: {\n      backgroundColor: {\n        value: '{components.button._active.backgroundColor.value}'\n      },\n      borderColor: {\n        value: '{components.button._active.borderColor.value}'\n      },\n      color: {\n        value: '{components.button._active.color.value}'\n      }\n    },\n    _disabled: {\n      backgroundColor: {\n        value: '{components.button._disabled.backgroundColor.value}'\n      },\n      borderColor: {\n        value: '{components.button._disabled.borderColor.value}'\n      },\n      color: {\n        value: '{components.button._disabled.color.value}'\n      }\n    },\n    _focus: {\n      backgroundColor: {\n        value: '{components.button._focus.backgroundColor.value}'\n      },\n      borderColor: {\n        value: '{components.button._focus.borderColor.value}'\n      },\n      color: {\n        value: '{components.button._focus.color.value}'\n      }\n    },\n    _hover: {\n      backgroundColor: {\n        value: '{components.button._hover.backgroundColor.value}'\n      },\n      borderColor: {\n        value: '{components.button._hover.borderColor.value}'\n      },\n      color: {\n        value: '{components.button._hover.color.value}'\n      }\n    }\n  }\n};\nconst select = {\n  color: {\n    value: '{components.fieldcontrol.color}'\n  },\n  backgroundColor: {\n    value: '{colors.background.primary.value}'\n  },\n  paddingInlineEnd: {\n    value: '{space.xxl.value}'\n  },\n  _disabled: {\n    color: {\n      value: '{colors.font.disabled.value}'\n    },\n    backgroundColor: {\n      value: '{colors.background.disabled.value}'\n    }\n  },\n  // wrappers\n  wrapper: {\n    flex: {\n      value: '1'\n    },\n    display: {\n      value: 'block'\n    },\n    position: {\n      value: 'relative'\n    },\n    cursor: {\n      value: 'pointer'\n    }\n  },\n  iconWrapper: {\n    alignItems: {\n      value: 'center'\n    },\n    position: {\n      value: 'absolute'\n    },\n    top: {\n      value: '50%'\n    },\n    right: {\n      value: '{space.medium.value}'\n    },\n    transform: {\n      value: 'translateY(-50%)'\n    },\n    pointerEvents: {\n      value: 'none'\n    },\n    small: {\n      right: {\n        value: '{space.xs.value}'\n      }\n    },\n    large: {\n      right: {\n        value: '{space.medium.value}'\n      }\n    }\n  },\n  // It's important to test these option values on Chrome/FireFox/Edge\n  // on Windows because they allow styling of the option element.\n  // Chrome/Safari/Firefox on Mac uses the system ui.\n  option: {\n    backgroundColor: {\n      value: 'transparent'\n    },\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    _disabled: {\n      color: {\n        value: '{colors.font.disabled.value}'\n      },\n      backgroundColor: {\n        value: 'transparent'\n      }\n    }\n  },\n  whiteSpace: {\n    value: 'nowrap'\n  },\n  minWidth: {\n    value: '6.5rem'\n  },\n  small: {\n    minWidth: {\n      value: '5.5rem'\n    },\n    paddingInlineEnd: {\n      value: '{space.xl.value}'\n    }\n  },\n  large: {\n    minWidth: {\n      value: '7.5rem'\n    },\n    paddingInlineEnd: {\n      value: '{space.xxl.value}'\n    }\n  },\n  expanded: {\n    paddingBlock: {\n      value: '{space.xs.value}'\n    },\n    paddingInline: {\n      value: '{space.small.value}'\n    },\n    option: {\n      paddingBlock: {\n        value: '{space.xs.value}'\n      },\n      paddingInline: {\n        value: '{space.small.value}'\n      }\n    }\n  }\n};\nconst selectfield = {\n  borderColor: {\n    value: '{components.fieldcontrol.borderColor}'\n  },\n  color: {\n    value: '{components.fieldcontrol.color}'\n  },\n  flexDirection: {\n    value: 'column'\n  },\n  fontSize: {\n    value: '{components.fieldcontrol.fontSize}'\n  },\n  _focus: {\n    borderColor: {\n      value: '{components.fieldcontrol._focus.borderColor}'\n    }\n  },\n  label: {\n    color: {\n      value: '{components.field.label.color}'\n    }\n  }\n};\nconst sliderfield = {\n  paddingBlock: {\n    value: '{space.xs.value}'\n  },\n  // The track is the thin background of the slider\n  track: {\n    backgroundColor: {\n      value: '{colors.background.quaternary.value}'\n    },\n    borderRadius: {\n      value: '9999px'\n    },\n    height: {\n      value: '0.375rem'\n    },\n    minWidth: {\n      value: '10rem'\n    }\n  },\n  // The range is the filled part of the track\n  range: {\n    backgroundColor: {\n      value: '{colors.primary.80.value}'\n    },\n    borderRadius: {\n      value: '9999px'\n    },\n    _disabled: {\n      backgroundColor: {\n        value: '{colors.background.disabled.value}'\n      }\n    }\n  },\n  // The thumb is the circle above the track that the user drags\n  thumb: {\n    width: {\n      value: '1.25rem'\n    },\n    height: {\n      value: '1.25rem'\n    },\n    backgroundColor: {\n      value: '{colors.background.primary.value}'\n    },\n    boxShadow: {\n      value: '{shadows.small.value}'\n    },\n    borderRadius: {\n      value: '50%'\n    },\n    borderWidth: {\n      value: '{borderWidths.medium.value}'\n    },\n    borderColor: {\n      value: '{colors.border.primary.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    _disabled: {\n      backgroundColor: {\n        value: '{colors.background.disabled.value}'\n      },\n      borderColor: {\n        value: 'transparent'\n      },\n      boxShadow: {\n        value: 'none'\n      }\n    },\n    _hover: {\n      backgroundColor: {\n        value: '{colors.background.primary.value}'\n      },\n      borderColor: {\n        value: '{colors.border.focus.value}'\n      }\n    },\n    _focus: {\n      borderColor: {\n        value: '{colors.border.focus.value}'\n      },\n      boxShadow: {\n        value: '{components.fieldcontrol._focus.boxShadow.value}'\n      }\n    }\n  },\n  small: {\n    track: {\n      height: {\n        value: '0.25rem'\n      }\n    },\n    thumb: {\n      width: {\n        value: '1rem'\n      },\n      height: {\n        value: '1rem'\n      }\n    }\n  },\n  large: {\n    track: {\n      height: {\n        value: '0.625rem'\n      }\n    },\n    thumb: {\n      width: {\n        value: '1.5rem'\n      },\n      height: {\n        value: '1.5rem'\n      }\n    }\n  }\n};\nconst stepperfield = {\n  borderColor: {\n    value: '{components.fieldcontrol.borderColor}'\n  },\n  flexDirection: {\n    value: 'column'\n  },\n  input: {\n    color: {\n      value: '{components.fieldcontrol.color}'\n    },\n    fontSize: {\n      value: '{components.fieldcontrol.fontSize}'\n    },\n    textAlign: {\n      value: 'center'\n    }\n  },\n  button: {\n    color: {\n      value: '{components.button.color}'\n    },\n    backgroundColor: {\n      value: '{colors.transparent}'\n    },\n    _active: {\n      color: {\n        value: '{components.button._active.color}'\n      },\n      backgroundColor: {\n        value: '{components.button._active.backgroundColor}'\n      }\n    },\n    _focus: {\n      color: {\n        value: '{components.button._focus.color}'\n      },\n      backgroundColor: {\n        value: '{components.button._focus.backgroundColor}'\n      }\n    },\n    _disabled: {\n      color: {\n        value: '{components.button._disabled.color}'\n      },\n      backgroundColor: {\n        value: '{components.fieldcontrol._disabled.backgroundColor}'\n      }\n    },\n    _hover: {\n      color: {\n        value: '{components.button._hover.color}'\n      },\n      backgroundColor: {\n        value: '{components.button._hover.backgroundColor}'\n      }\n    }\n  }\n};\nconst storagemanager = {\n  dropzone: {\n    backgroundColor: {\n      value: '{colors.background.primary}'\n    },\n    borderRadius: {\n      value: '{radii.small}'\n    },\n    borderColor: {\n      value: '{colors.border.primary}'\n    },\n    borderStyle: {\n      value: 'dashed'\n    },\n    borderWidth: {\n      value: '{borderWidths.small}'\n    },\n    gap: {\n      value: '{space.small}'\n    },\n    paddingBlock: {\n      value: '{space.xl}'\n    },\n    paddingInline: {\n      value: '{space.large}'\n    },\n    textAlign: {\n      value: 'center'\n    },\n    _active: {\n      backgroundColor: {\n        value: '{colors.primary.10}'\n      },\n      borderRadius: {\n        value: '{components.storagemanager.dropzone.borderRadius}'\n      },\n      borderColor: {\n        value: '{colors.border.pressed}'\n      },\n      borderStyle: {\n        value: '{components.storagemanager.dropzone.borderStyle}'\n      },\n      borderWidth: {\n        value: '{borderWidths.medium}'\n      }\n    },\n    icon: {\n      color: {\n        value: '{colors.border.primary}'\n      },\n      fontSize: {\n        value: '{fontSizes.xxl}'\n      }\n    },\n    text: {\n      color: {\n        value: '{colors.font.tertiary}'\n      },\n      fontSize: {\n        value: '{fontSizes.medium}'\n      },\n      fontWeight: {\n        value: '{fontWeights.bold}'\n      }\n    }\n  },\n  file: {\n    backgroundColor: {\n      value: '{colors.background.primary}'\n    },\n    borderRadius: {\n      value: '{radii.small}'\n    },\n    borderColor: {\n      value: '{colors.border.primary}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderWidth: {\n      value: '{borderWidths.small}'\n    },\n    paddingBlock: {\n      value: '{space.xs}'\n    },\n    paddingInline: {\n      value: '{space.small}'\n    },\n    gap: {\n      value: '{space.small}'\n    },\n    alignItems: {\n      value: 'baseline'\n    },\n    name: {\n      fontSize: {\n        value: '{fontSizes.medium}'\n      },\n      fontWeight: {\n        value: '{fontWeights.bold}'\n      },\n      color: {\n        value: '{colors.font.primary}'\n      }\n    },\n    size: {\n      fontSize: {\n        value: '{fontSizes.small}'\n      },\n      fontWeight: {\n        value: '{fontWeights.normal}'\n      },\n      color: {\n        value: '{colors.font.tertiary}'\n      }\n    },\n    image: {\n      width: {\n        value: '{space.xxl}'\n      },\n      height: {\n        value: '{space.xxl}'\n      },\n      backgroundColor: {\n        value: '{colors.background.secondary}'\n      },\n      color: {\n        value: '{colors.font.tertiary}'\n      },\n      borderRadius: {\n        value: '{radii.small}'\n      }\n    }\n  },\n  filelist: {\n    flexDirection: {\n      value: 'column'\n    },\n    gap: {\n      value: '{space.small}'\n    }\n  },\n  loader: {\n    strokeLinecap: {\n      value: 'round'\n    },\n    strokeEmpty: {\n      value: '{colors.border.secondary}'\n    },\n    strokeFilled: {\n      value: '{components.loader.strokeFilled}'\n    },\n    strokeWidth: {\n      value: '{borderWidths.large}'\n    }\n  },\n  previewer: {\n    backgroundColor: {\n      value: '{colors.background.primary}'\n    },\n    borderColor: {\n      value: '{colors.border.primary}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderWidth: {\n      value: '{borderWidths.small}'\n    },\n    borderRadius: {\n      value: '{radii.small}'\n    },\n    paddingBlock: {\n      value: '{space.zero}'\n    },\n    paddingInline: {\n      value: '{space.zero}'\n    },\n    maxHeight: {\n      value: '40rem'\n    },\n    maxWidth: {\n      value: 'auto'\n    },\n    text: {\n      fontSize: {\n        value: '{fontSizes.medium}'\n      },\n      fontWeight: {\n        value: '{fontWeights.bold}'\n      },\n      color: {\n        value: '{colors.font.primary}'\n      }\n    },\n    body: {\n      paddingBlock: {\n        value: '{space.medium}'\n      },\n      paddingInline: {\n        value: '{space.medium}'\n      },\n      gap: {\n        value: '{space.small}'\n      }\n    },\n    footer: {\n      justifyContent: {\n        value: 'flex-end'\n      }\n    }\n  }\n};\nconst switchfield = {\n  // States\n  _disabled: {\n    opacity: {\n      value: '{opacities.60.value}'\n    }\n  },\n  _focused: {\n    shadow: {\n      value: '{components.fieldcontrol._focus.boxShadow.value}'\n    }\n  },\n  // Sizes\n  fontSize: {\n    value: '{fontSizes.medium.value}'\n  },\n  large: {\n    fontSize: {\n      value: '{fontSizes.large.value}'\n    }\n  },\n  small: {\n    fontSize: {\n      value: '{fontSizes.small.value}'\n    }\n  },\n  // Child elements\n  label: {\n    padding: {\n      value: '{space.xs.value}'\n    }\n  },\n  thumb: {\n    backgroundColor: {\n      value: '{colors.background.primary.value}'\n    },\n    borderColor: {\n      value: 'transparent'\n    },\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderRadius: {\n      value: '{radii.xxxl.value}'\n    },\n    checked: {\n      transform: {\n        value: '{transforms.slideX.medium.value}'\n      }\n    },\n    transition: {\n      duration: {\n        value: '{time.medium.value}'\n      }\n    },\n    width: {\n      value: '{space.relative.medium.value}'\n    }\n  },\n  track: {\n    backgroundColor: {\n      value: '{colors.background.quaternary.value}'\n    },\n    borderRadius: {\n      value: '{radii.xxxl.value}'\n    },\n    checked: {\n      backgroundColor: {\n        value: '{colors.primary.80.value}'\n      }\n    },\n    height: {\n      value: '{space.relative.medium.value}'\n    },\n    padding: {\n      value: '{outlineWidths.medium.value}'\n    },\n    transition: {\n      duration: {\n        value: '{time.short.value}'\n      }\n    },\n    width: {\n      value: '{space.relative.xl.value}'\n    },\n    _error: {\n      backgroundColor: {\n        value: '{colors.background.error.value}'\n      }\n    }\n  }\n};\nconst table = {\n  /**\n   * Default table styles\n   */\n  borderCollapse: {\n    value: 'collapse'\n  },\n  display: {\n    value: 'table'\n  },\n  width: {\n    value: '100%'\n  },\n  /**\n   * Default table head styles\n   */\n  head: {\n    display: {\n      value: 'table-header-group'\n    },\n    verticalAlign: {\n      value: 'middle'\n    }\n  },\n  /**\n   * Default table body styles\n   */\n  body: {\n    display: {\n      value: 'table-row-group'\n    },\n    verticalAlign: {\n      value: 'middle'\n    }\n  },\n  /**\n   * Default table foot styles\n   */\n  foot: {\n    display: {\n      value: 'table-footer-group'\n    },\n    verticalAlign: {\n      value: 'middle'\n    }\n  },\n  /**\n   * Default table row styles\n   */\n  row: {\n    display: {\n      value: 'table-row'\n    },\n    verticalAlign: {\n      value: 'middle'\n    },\n    hover: {\n      backgroundColor: {\n        value: '{colors.background.tertiary.value}'\n      }\n    },\n    striped: {\n      backgroundColor: {\n        value: '{colors.background.secondary.value}'\n      }\n    }\n  },\n  /**\n   * Default table header cell styles\n   */\n  header: {\n    borderColor: {\n      value: '{colors.border.tertiary.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    },\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    display: {\n      value: 'table-cell'\n    },\n    fontSize: {\n      value: '{fontSizes.medium.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.bold.value}'\n    },\n    padding: {\n      value: '{space.medium.value}'\n    },\n    verticalAlign: {\n      value: 'middle'\n    },\n    large: {\n      fontSize: {\n        value: '{fontSizes.large.value}'\n      },\n      padding: {\n        value: '{space.large.value}'\n      }\n    },\n    small: {\n      fontSize: {\n        value: '{fontSizes.small.value}'\n      },\n      padding: {\n        value: '{space.xs.value}'\n      }\n    }\n  },\n  /**\n   * Default table data cell styles\n   */\n  data: {\n    borderColor: {\n      value: '{colors.border.tertiary.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    },\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    display: {\n      value: 'table-cell'\n    },\n    fontSize: {\n      value: '{fontSizes.medium.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.normal.value}'\n    },\n    padding: {\n      value: '{space.medium.value}'\n    },\n    verticalAlign: {\n      value: 'middle'\n    },\n    large: {\n      fontSize: {\n        value: '{fontSizes.large.value}'\n      },\n      padding: {\n        value: '{space.large.value}'\n      }\n    },\n    small: {\n      fontSize: {\n        value: '{fontSizes.small.value}'\n      },\n      padding: {\n        value: '{space.xs.value}'\n      }\n    }\n  },\n  /**\n   * Default table caption styles\n   */\n  caption: {\n    captionSide: {\n      value: 'bottom'\n    },\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    display: {\n      value: 'table-caption'\n    },\n    fontSize: {\n      value: '{fontSizes.medium.value}'\n    },\n    textAlign: {\n      value: 'center'\n    },\n    wordBreak: {\n      value: 'break-all'\n    },\n    large: {\n      fontSize: {\n        value: '{fontSizes.large.value}'\n      }\n    },\n    small: {\n      fontSize: {\n        value: '{fontSizes.small.value}'\n      }\n    }\n  }\n};\nconst tabs = {\n  backgroundColor: {\n    value: 'transparent'\n  },\n  borderColor: {\n    value: '{colors.border.secondary.value}'\n  },\n  borderStyle: {\n    value: 'solid'\n  },\n  borderWidth: {\n    value: '{borderWidths.medium.value}'\n  },\n  gap: {\n    value: '0'\n  },\n  item: {\n    backgroundColor: {\n      value: 'transparent'\n    },\n    borderColor: {\n      value: '{colors.border.secondary.value}'\n    },\n    borderStyle: {\n      value: 'solid'\n    },\n    borderWidth: {\n      value: '{borderWidths.medium.value}'\n    },\n    color: {\n      value: '{colors.font.secondary.value}'\n    },\n    fontSize: {\n      value: '{fontSizes.medium.value}'\n    },\n    fontWeight: {\n      value: '{fontWeights.bold.value}'\n    },\n    paddingVertical: {\n      value: '{space.small.value}'\n    },\n    paddingHorizontal: {\n      value: '{space.medium.value}'\n    },\n    textAlign: {\n      value: 'center'\n    },\n    transitionDuration: {\n      value: '{time.medium.value}'\n    },\n    _hover: {\n      backgroundColor: {\n        value: 'transparent'\n      },\n      borderColor: {\n        value: '{colors.border.focus.value}'\n      },\n      boxShadow: {\n        value: 'none'\n      },\n      color: {\n        value: '{colors.font.hover.value}'\n      }\n    },\n    _focus: {\n      backgroundColor: {\n        value: 'transparent'\n      },\n      borderColor: {\n        value: '{colors.border.focus.value}'\n      },\n      boxShadow: {\n        value: {\n          offsetX: '0px',\n          offsetY: '0px',\n          blurRadius: '0px',\n          spreadRadius: '{borderWidths.medium}',\n          color: '{colors.border.focus.value}'\n        }\n      },\n      color: {\n        value: '{colors.font.focus.value}'\n      }\n    },\n    _active: {\n      backgroundColor: {\n        value: 'transparent'\n      },\n      borderColor: {\n        value: '{colors.font.interactive.value}'\n      },\n      boxShadow: {\n        value: 'none'\n      },\n      color: {\n        value: '{colors.font.interactive.value}'\n      }\n    },\n    _disabled: {\n      backgroundColor: {\n        value: 'transparent'\n      },\n      borderColor: {\n        value: '{colors.border.tertiary.value}'\n      },\n      boxShadow: {\n        value: 'none'\n      },\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    }\n  },\n  panel: {\n    backgroundColor: {\n      value: 'transparent'\n    },\n    paddingInline: {\n      value: '0'\n    },\n    paddingBlock: {\n      value: '{space.small.value}'\n    }\n  }\n};\nconst text = {\n  // default styles\n  color: {\n    value: '{colors.font.primary.value}'\n  },\n  // variations\n  primary: {\n    color: {\n      value: '{colors.font.primary.value}'\n    }\n  },\n  secondary: {\n    color: {\n      value: '{colors.font.secondary.value}'\n    }\n  },\n  tertiary: {\n    color: {\n      value: '{colors.font.tertiary.value}'\n    }\n  },\n  error: {\n    color: {\n      value: '{colors.font.error.value}'\n    }\n  },\n  warning: {\n    color: {\n      value: '{colors.font.warning.value}'\n    }\n  },\n  success: {\n    color: {\n      value: '{colors.font.success.value}'\n    }\n  },\n  info: {\n    color: {\n      value: '{colors.font.info.value}'\n    }\n  }\n};\nconst textareafield = {\n  color: {\n    value: '{components.fieldcontrol.color.value}'\n  },\n  borderColor: {\n    value: '{components.fieldcontrol.borderColor.value}'\n  },\n  _focus: {\n    borderColor: {\n      value: '{components.fieldcontrol._focus.borderColor.value}'\n    }\n  }\n};\nconst textfield = {\n  color: {\n    value: '{components.fieldcontrol.color.value}'\n  },\n  borderColor: {\n    value: '{components.fieldcontrol.borderColor.value}'\n  },\n  fontSize: {\n    value: '{components.fieldcontrol.fontSize.value}'\n  },\n  _focus: {\n    borderColor: {\n      value: '{components.fieldcontrol._focus.borderColor.value}'\n    }\n  }\n};\nconst togglebutton = {\n  borderColor: {\n    value: '{colors.border.primary.value}'\n  },\n  color: {\n    value: '{colors.font.primary.value}'\n  },\n  _hover: {\n    backgroundColor: {\n      value: '{colors.overlay.10.value}'\n    }\n  },\n  _focus: {\n    borderColor: {\n      value: '{colors.border.focus.value}'\n    },\n    color: {\n      value: '{colors.font.primary.value}'\n    }\n  },\n  _active: {\n    backgroundColor: {\n      value: '{colors.transparent.value}'\n    }\n  },\n  _disabled: {\n    backgroundColor: {\n      value: '{colors.transparent.value}'\n    },\n    borderColor: {\n      value: '{colors.border.disabled.value}'\n    },\n    color: {\n      value: '{colors.font.disabled.value}'\n    }\n  },\n  _pressed: {\n    borderColor: {\n      value: '{colors.border.pressed.value}'\n    },\n    color: {\n      value: '{colors.font.primary.value}'\n    },\n    backgroundColor: {\n      value: '{colors.overlay.20.value}'\n    },\n    _hover: {\n      backgroundColor: {\n        value: '{colors.overlay.30.value}'\n      }\n    }\n  },\n  primary: {\n    backgroundColor: {\n      value: '{colors.transparent.value}'\n    },\n    borderWidth: {\n      value: '{borderWidths.small.value}'\n    },\n    _focus: {\n      borderColor: {\n        value: '{colors.border.focus.value}'\n      },\n      backgroundColor: {\n        value: '{colors.transparent.value}'\n      },\n      boxShadow: {\n        value: '{components.fieldcontrol._focus.boxShadow.value}'\n      },\n      color: {\n        value: '{colors.font.primary.value}'\n      }\n    },\n    _hover: {\n      backgroundColor: {\n        value: '{colors.overlay.10.value}'\n      },\n      color: {\n        value: '{colors.font.primary.value}'\n      }\n    },\n    _disabled: {\n      borderColor: {\n        value: '{colors.border.disabled.value}'\n      },\n      backgroundColor: {\n        value: '{colors.background.disabled.value}'\n      },\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    },\n    _pressed: {\n      backgroundColor: {\n        value: '{colors.primary.80.value}'\n      },\n      borderColor: {\n        value: '{colors.primary.80.value}'\n      },\n      color: {\n        value: '{colors.background.primary.value}'\n      },\n      _focus: {\n        backgroundColor: {\n          value: '{colors.border.focus.value}'\n        },\n        borderColor: {\n          value: '{colors.border.focus.value}'\n        },\n        color: {\n          value: '{colors.background.primary.value}'\n        }\n      },\n      _hover: {\n        borderColor: {\n          value: '{colors.primary.60.value}'\n        },\n        backgroundColor: {\n          value: '{colors.primary.60.value}'\n        },\n        boxShadow: {\n          value: '{colors.primary.60.value}'\n        },\n        color: {\n          value: '{colors.background.primary.value}'\n        }\n      }\n    }\n  },\n  link: {\n    backgroundColor: {\n      value: '{colors.transparent.value}'\n    },\n    color: {\n      value: '{colors.overlay.50.value}'\n    },\n    _hover: {\n      backgroundColor: {\n        value: '{colors.transparent.value}'\n      },\n      color: {\n        value: '{colors.overlay.50.value}'\n      }\n    },\n    _focus: {\n      backgroundColor: {\n        value: '{colors.transparent.value}'\n      },\n      color: {\n        value: '{colors.overlay.50.value}'\n      }\n    },\n    _disabled: {\n      backgroundColor: {\n        value: '{colors.transparent.value}'\n      },\n      color: {\n        value: '{colors.font.disabled.value}'\n      }\n    },\n    _pressed: {\n      backgroundColor: {\n        value: '{colors.transparent.value}'\n      },\n      color: {\n        value: '{colors.overlay.90.value}'\n      },\n      _focus: {\n        backgroundColor: {\n          value: '{colors.transparent.value}'\n        },\n        color: {\n          value: '{colors.overlay.90.value}'\n        }\n      },\n      _hover: {\n        color: {\n          value: '{colors.overlay.90.value}'\n        },\n        backgroundColor: {\n          value: '{colors.transparent.value}'\n        }\n      }\n    }\n  }\n};\nconst togglebuttongroup = {\n  alignItems: {\n    value: 'center'\n  },\n  alignContent: {\n    value: 'center'\n  },\n  justifyContent: {\n    value: 'flex-start'\n  }\n};\nconst components = {\n  accordion,\n  alert,\n  authenticator,\n  autocomplete,\n  badge,\n  breadcrumbs,\n  button,\n  card,\n  checkbox,\n  checkboxfield,\n  collection,\n  copy,\n  countrycodeselect: dialcodeselect,\n  divider,\n  dropzone,\n  field,\n  fieldcontrol,\n  fieldgroup,\n  fieldmessages,\n  fieldset,\n  flex,\n  heading,\n  icon,\n  highlightmatch,\n  image,\n  inappmessaging,\n  input,\n  link,\n  liveness,\n  loader,\n  menu,\n  message,\n  pagination,\n  passwordfield,\n  phonenumberfield,\n  placeholder,\n  radio,\n  radiogroup,\n  rating,\n  searchfield,\n  select,\n  selectfield,\n  sliderfield,\n  stepperfield,\n  storagemanager,\n  switchfield,\n  table,\n  tabs,\n  text,\n  textareafield,\n  textfield,\n  togglebutton,\n  togglebuttongroup\n};\n\n// TODO: update the design tokens to use an array\n// export interface FontDesignToken {\n//   value: Array<string>\n// }\nconst fonts = {\n  default: {\n    variable: {\n      value: `'InterVariable', 'Inter var', 'Inter', -apple-system, BlinkMacSystemFont,\n        'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans',\n        sans-serif`\n    },\n    static: {\n      value: `'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue',\n        'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif`\n    }\n  }\n};\nconst fontSizes = {\n  xxxs: {\n    value: '0.375rem'\n  },\n  xxs: {\n    value: '0.5rem'\n  },\n  xs: {\n    value: '0.75rem'\n  },\n  small: {\n    value: '0.875rem'\n  },\n  medium: {\n    value: '1rem'\n  },\n  large: {\n    value: '1.25rem'\n  },\n  xl: {\n    value: '1.5rem'\n  },\n  xxl: {\n    value: '2rem'\n  },\n  xxxl: {\n    value: '2.5rem'\n  },\n  xxxxl: {\n    value: '3rem'\n  }\n};\nconst fontWeights = {\n  hairline: {\n    value: 100\n  },\n  thin: {\n    value: 200\n  },\n  light: {\n    value: 300\n  },\n  normal: {\n    value: 400\n  },\n  medium: {\n    value: 500\n  },\n  semibold: {\n    value: 600\n  },\n  bold: {\n    value: 700\n  },\n  extrabold: {\n    value: 800\n  },\n  black: {\n    value: 900\n  }\n};\nconst lineHeights = {\n  small: {\n    value: '1.25'\n  },\n  medium: {\n    value: '1.5'\n  },\n  large: {\n    value: '2'\n  }\n};\nconst opacities = {\n  0: {\n    value: '0'\n  },\n  10: {\n    value: '0.1'\n  },\n  20: {\n    value: '0.2'\n  },\n  30: {\n    value: '0.3'\n  },\n  40: {\n    value: '0.4'\n  },\n  50: {\n    value: '0.5'\n  },\n  60: {\n    value: '0.6'\n  },\n  70: {\n    value: '0.7'\n  },\n  80: {\n    value: '0.8'\n  },\n  90: {\n    value: '0.9'\n  },\n  100: {\n    value: '1'\n  }\n};\nconst outlineOffsets = {\n  small: {\n    value: '1px'\n  },\n  medium: {\n    value: '2px'\n  },\n  large: {\n    value: '3px'\n  }\n};\nconst outlineWidths = {\n  small: {\n    value: '1px'\n  },\n  medium: {\n    value: '2px'\n  },\n  large: {\n    value: '3px'\n  }\n};\nconst radii = {\n  xs: {\n    value: '0.125rem'\n  },\n  small: {\n    value: '0.25rem'\n  },\n  medium: {\n    value: '0.5rem'\n  },\n  large: {\n    value: '1rem'\n  },\n  xl: {\n    value: '2rem'\n  },\n  xxl: {\n    value: '4rem'\n  },\n  xxxl: {\n    value: '8rem'\n  }\n};\nconst shadows = {\n  small: {\n    value: {\n      offsetX: '0px',\n      offsetY: '2px',\n      blurRadius: '4px',\n      color: '{colors.shadow.tertiary.value}'\n    }\n  },\n  medium: {\n    value: {\n      offsetX: '0px',\n      offsetY: '2px',\n      blurRadius: '6px',\n      color: '{colors.shadow.secondary.value}'\n    }\n  },\n  large: {\n    value: {\n      offsetX: '0px',\n      offsetY: '4px',\n      blurRadius: '12px',\n      color: '{colors.shadow.primary.value}'\n    }\n  }\n};\nconst space = {\n  zero: {\n    value: '0'\n  },\n  xxxs: {\n    value: '0.25rem'\n  },\n  xxs: {\n    value: '0.375rem'\n  },\n  xs: {\n    value: '0.5rem'\n  },\n  small: {\n    value: '0.75rem'\n  },\n  medium: {\n    value: '1rem'\n  },\n  large: {\n    value: '1.5rem'\n  },\n  xl: {\n    value: '2.0rem'\n  },\n  xxl: {\n    value: '3.0rem'\n  },\n  xxxl: {\n    value: '4.5rem'\n  },\n  relative: {\n    //creating a second set of sizes using em which will be sized relative to a parent instead of the root\n    xxxs: {\n      value: '0.25em'\n    },\n    xxs: {\n      value: '0.375em'\n    },\n    xs: {\n      value: '0.5em'\n    },\n    small: {\n      value: '0.75em'\n    },\n    medium: {\n      value: '1em'\n    },\n    large: {\n      value: '1.5em'\n    },\n    xl: {\n      value: '2.0em'\n    },\n    xxl: {\n      value: '3.0em'\n    },\n    xxxl: {\n      value: '4.5em'\n    },\n    full: {\n      value: '100%'\n    }\n  }\n};\n// I want to be able to pass in a Theme object that has extra tokens\n// and it returns that same object type WITH the extra tokens\n\nconst time = {\n  short: {\n    value: '100ms'\n  },\n  medium: {\n    value: '250ms'\n  },\n  long: {\n    value: '500ms'\n  }\n};\nconst transforms = {\n  // TODO: make this more generic and cross-platform\n  slideX: {\n    small: {\n      value: 'translateX(0.5em)'\n    },\n    medium: {\n      value: 'translateX(1em)'\n    },\n    large: {\n      value: 'translateX(2em)'\n    }\n  }\n};\nconst tokens = {\n  components,\n  borderWidths,\n  colors,\n  fonts,\n  fontSizes,\n  fontWeights,\n  lineHeights,\n  opacities,\n  outlineOffsets,\n  outlineWidths,\n  radii,\n  shadows,\n  space,\n  time,\n  transforms\n};\nconst reactNativeTokens = {\n  colors,\n  borderWidths,\n  fontSizes: {\n    xxs: fontSizes.xxs,\n    xs: fontSizes.xs,\n    small: fontSizes.small,\n    medium: fontSizes.medium,\n    large: fontSizes.large,\n    xl: fontSizes.xl,\n    xxl: fontSizes.xxl,\n    xxxl: fontSizes.xxxl\n  },\n  fontWeights,\n  opacities,\n  // React Native doesn't need the relative space values\n  space: {\n    // use `space.xxxs` to output a value of `2` and avoid odd space numbers\n    xxs: space.xxxs,\n    xs: space.xs,\n    small: space.small,\n    medium: space.medium,\n    large: space.large,\n    xl: space.xl,\n    xxl: space.xxl,\n    xxxl: space.xxxl\n  },\n  radii,\n  time\n};\n\n// Breakpoint unit is in pixels\nconst breakpoints = {\n  values: {\n    base: 0,\n    small: 480,\n    medium: 768,\n    large: 992,\n    xl: 1280,\n    xxl: 1536\n  },\n  defaultBreakpoint: 'base'\n};\nconst defaultTheme = {\n  tokens,\n  breakpoints,\n  name: 'default-theme'\n};\nconst CSS_VARIABLE_PREFIX = 'amplify';\n// Important: these properties should not be altered in\n// order to maintain the expected order of the CSS `box-shadow` property\nconst SHADOW_PROPERTIES = ['offsetX', 'offsetY', 'blurRadius', 'spreadRadius', 'color'];\nfunction referenceValue(value) {\n  if (!value) return '';\n  if (usesReference__default[\"default\"](value)) {\n    const path = value.replace(/\\{|\\}/g, '').replace('.value', '').split('.');\n    return `var(--${cssNameTransform({\n      path\n    })})`;\n  }\n  return value;\n}\nfunction cssValue(token) {\n  const value = token.value;\n  if (isString(value)) {\n    return referenceValue(value);\n  }\n  if (isShadowTokenObject(value)) {\n    return SHADOW_PROPERTIES.map(property => {\n      return referenceValue(\n      // lookup property against `token` first for custom non-nested value, then lookup\n      // property against `value` for design token value\n      isShadowTokenObject(token) ? token[property] : value[property]);\n    }).join(' ');\n  }\n  return value;\n}\nfunction cssNameTransform(_ref95) {\n  let _ref95$path = _ref95.path,\n    path = _ref95$path === void 0 ? [] : _ref95$path;\n  return `${kebabCase__default[\"default\"]([CSS_VARIABLE_PREFIX, ...path].join(' '))}`;\n}\n/**\n * Helper function to test if something is a design token or not.\n * Used in the React component style props.\n *\n * @param value - thing to test if it is a design token or not\n * @returns boolean\n */\nfunction isDesignToken(value) {\n  return isObject(value) && has(value, 'value');\n}\nfunction isShadowTokenObject(value) {\n  return isObject(value) && has(value, 'offsetX');\n}\n/**\n * Recursive function that will walk down the token object\n * and perform the setupToken function on each token.\n * Similar to what Style Dictionary does.\n */\nfunction setupTokens(_ref96) {\n  let tokens = _ref96.tokens,\n    _ref96$path = _ref96.path,\n    path = _ref96$path === void 0 ? [] : _ref96$path,\n    setupToken = _ref96.setupToken;\n  if (has(tokens, 'value')) {\n    return setupToken({\n      token: tokens,\n      path\n    });\n  }\n  const output = {};\n  for (const name in tokens) {\n    if (has(tokens, name)) {\n      const value = tokens[name];\n      const nextTokens = isObject(value) ? value : {\n        value\n      };\n      output[name] = setupTokens({\n        tokens: nextTokens,\n        path: path.concat(name),\n        setupToken\n      });\n    }\n  }\n  return output;\n}\n\n// Internal Style Dictionary methods\n/**\n * This will take a design token and add some data to it for it\n * to be used in JS/CSS. It will create its CSS var name and update\n * the value to use a CSS var if it is a reference. It will also\n * add a `.toString()` method to make it easier to use in JS.\n *\n * We should see if there is a way to share this logic with style dictionary...\n */\nconst setupToken = _ref97 => {\n  let token = _ref97.token,\n    path = _ref97.path;\n  const name = `--${cssNameTransform({\n    path\n  })}`;\n  const original = token.value;\n  const value = cssValue(token);\n  return {\n    name,\n    original,\n    path,\n    value,\n    toString: () => `var(${name})`\n  };\n};\n/**\n * Takes a set of keys and a color name and returns an object of design tokens,\n * used for applying a primary color at the theme level to our tokens.\n *\n * createColorPalette({keys: ['10','20',...], value: 'red'})\n * returns {\n *   10: { value: '{colors.red.10.value}' },\n *   20: { value: '{colors.red.20.value}' },\n *   ...\n * }\n */\nfunction createColorPalette(_ref98) {\n  let keys = _ref98.keys,\n    value = _ref98.value;\n  return keys.reduce((acc, key) => {\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [key]: {\n        value: `{colors.${value}.${key}.value}`\n      }\n    });\n  }, {});\n}\n/**\n * This will be used like `const myTheme = createTheme({})`\n * `myTheme` can then be passed to a Provider or the generated CSS\n * can be passed to a stylesheet at build-time or run-time.\n * const myTheme = createTheme({})\n * const myOtherTheme = createTheme({}, myTheme);\n */\nfunction createTheme(theme) {\n  let DefaultTheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultTheme;\n  // merge theme and DefaultTheme to get a complete theme\n  // deepExtend is an internal Style Dictionary method\n  // that performs a deep merge on n objects. We could change\n  // this to another 3p deep merge solution too.\n  const mergedTheme = deepExtend__default[\"default\"]([{}, DefaultTheme, theme]);\n  const primaryColor = mergedTheme.primaryColor,\n    secondaryColor = mergedTheme.secondaryColor;\n  // apply primaryColor and secondaryColor if present\n  if (isString(primaryColor)) {\n    mergedTheme.tokens.colors.primary = createColorPalette({\n      keys: Object.keys(mergedTheme.tokens.colors[primaryColor]),\n      value: primaryColor\n    });\n  }\n  if (isString(secondaryColor)) {\n    mergedTheme.tokens.colors.secondary = createColorPalette({\n      keys: Object.keys(mergedTheme.tokens.colors[secondaryColor]),\n      value: secondaryColor\n    });\n  }\n  // Setting up the tokens. This is similar to what Style Dictionary\n  // does. At the end of this, each token should have:\n  // - CSS variable name of itself\n  // - its value (reference to another CSS variable or raw value)\n  const tokens = setupTokens({\n    tokens: mergedTheme.tokens,\n    setupToken\n  }); // Setting the type here because setupTokens is recursive\n  const breakpoints = mergedTheme.breakpoints,\n    name = mergedTheme.name;\n  // flattenProperties is another internal Style Dictionary function\n  // that creates an array of all tokens.\n  let cssText = `[data-amplify-theme=\"${name}\"] {\\n` + flattenProperties__default[\"default\"](tokens).map(token => `${token.name}: ${token.value};`).join('\\n') + `\\n}\\n`;\n  let overrides = [];\n  /**\n   * For each override, we setup the tokens and then generate the CSS.\n   * This allows us to have one single CSS string for all possible overrides\n   * and avoid re-renders in React, but also support other frameworks as well.\n   */\n  if (mergedTheme.overrides) {\n    overrides = mergedTheme.overrides.map(override => {\n      const tokens = setupTokens({\n        tokens: override.tokens,\n        setupToken\n      });\n      const customProperties = flattenProperties__default[\"default\"](tokens).map(token => `${token.name}: ${token.value};`).join('\\n');\n      // Overrides can have a selector, media query, breakpoint, or color mode\n      // for creating the selector\n      if ('selector' in override) {\n        cssText += `\\n${override.selector} {\\n${customProperties}\\n}\\n`;\n      }\n      if ('mediaQuery' in override) {\n        cssText += `\\n@media (${override.mediaQuery}) {\n  [data-amplify-theme=\"${name}\"] {\n    ${customProperties}\n  }\n}\\n`;\n      }\n      if ('breakpoint' in override) {\n        const breakpoint = mergedTheme.breakpoints.values[override.breakpoint];\n        cssText += `\\n@media (min-width: ${breakpoint}px) {\n  [data-amplify-theme=\"${name}\"] {\n    ${customProperties}\n  }\n}\\n`;\n      }\n      if ('colorMode' in override) {\n        cssText += `\\n@media (prefers-color-scheme: ${override.colorMode}) {\n          [data-amplify-theme=\"${name}\"][data-amplify-color-mode=\"system\"] {\n            ${customProperties}\n            color-scheme: ${override.colorMode};\n          }\n        }\\n`;\n        cssText += `\\n[data-amplify-theme=\"${name}\"][data-amplify-color-mode=\"${override.colorMode}\"] {\n          ${customProperties}\n          color-scheme: ${override.colorMode};\n        }\\n`;\n      }\n      return _objectSpread(_objectSpread({}, override), {}, {\n        tokens\n      });\n    });\n  }\n  return {\n    tokens,\n    breakpoints,\n    name,\n    cssText,\n    // keep overrides separate from base theme\n    // this allows web platforms to use plain CSS scoped to a\n    // selector and only override the CSS vars needed. This\n    // means we could generate CSS at build-time in a postcss\n    // plugin, or do it at runtime and inject the CSS into a\n    // style tag.\n    // This also allows RN to dynamically switch themes in a\n    // provider.\n    overrides\n  };\n}\nconst darkModeTokens = {\n  colors: {\n    red: {\n      10: tokens.colors.red[100],\n      20: tokens.colors.red[90],\n      40: tokens.colors.red[80],\n      // 60 doesn't change\n      80: tokens.colors.red[40],\n      90: tokens.colors.red[20],\n      100: tokens.colors.red[10]\n    },\n    orange: {\n      10: tokens.colors.orange[100],\n      20: tokens.colors.orange[90],\n      40: tokens.colors.orange[80],\n      // 60 doesn't change\n      80: tokens.colors.orange[40],\n      90: tokens.colors.orange[20],\n      100: tokens.colors.orange[10]\n    },\n    yellow: {\n      10: tokens.colors.yellow[100],\n      20: tokens.colors.yellow[90],\n      40: tokens.colors.yellow[80],\n      // 60 doesn't change\n      80: tokens.colors.yellow[40],\n      90: tokens.colors.yellow[20],\n      100: tokens.colors.yellow[10]\n    },\n    green: {\n      10: tokens.colors.green[100],\n      20: tokens.colors.green[90],\n      40: tokens.colors.green[80],\n      // 60 doesn't change\n      80: tokens.colors.green[40],\n      90: tokens.colors.green[20],\n      100: tokens.colors.green[10]\n    },\n    teal: {\n      10: tokens.colors.teal[100],\n      20: tokens.colors.teal[90],\n      40: tokens.colors.teal[80],\n      // 60 doesn't change\n      80: tokens.colors.teal[40],\n      90: tokens.colors.teal[20],\n      100: tokens.colors.teal[10]\n    },\n    blue: {\n      10: tokens.colors.blue[100],\n      20: tokens.colors.blue[90],\n      40: tokens.colors.blue[80],\n      // 60 doesn't change\n      80: tokens.colors.blue[40],\n      90: tokens.colors.blue[20],\n      100: tokens.colors.blue[10]\n    },\n    purple: {\n      10: tokens.colors.purple[100],\n      20: tokens.colors.purple[90],\n      40: tokens.colors.purple[80],\n      // 60 doesn't change\n      80: tokens.colors.purple[40],\n      90: tokens.colors.purple[20],\n      100: tokens.colors.purple[10]\n    },\n    pink: {\n      10: tokens.colors.pink[100],\n      20: tokens.colors.pink[90],\n      40: tokens.colors.pink[80],\n      // 60 doesn't change\n      80: tokens.colors.pink[40],\n      90: tokens.colors.pink[20],\n      100: tokens.colors.pink[10]\n    },\n    neutral: {\n      10: tokens.colors.neutral[100],\n      20: tokens.colors.neutral[90],\n      40: tokens.colors.neutral[80],\n      // 60 doesn't change\n      80: tokens.colors.neutral[40],\n      90: tokens.colors.neutral[20],\n      100: tokens.colors.neutral[10]\n    },\n    font: {\n      primary: '{colors.white}',\n      secondary: '{colors.neutral.100}',\n      tertiary: '{colors.neutral.90}',\n      inverse: '{colors.neutral.10}'\n    },\n    background: {\n      primary: '{colors.neutral.10}',\n      secondary: '{colors.neutral.20}',\n      tertiary: '{colors.neutral.40}'\n    },\n    border: {\n      primary: '{colors.neutral.60}',\n      secondary: '{colors.neutral.40}',\n      tertiary: '{colors.neutral.20}'\n    },\n    overlay: {\n      5: 'hsla(0, 0%, 100%, 0.05)',\n      10: 'hsla(0, 0%, 100%, 0.1)',\n      20: 'hsla(0, 0%, 100%, 0.2)',\n      30: 'hsla(0, 0%, 100%, 0.3)',\n      40: 'hsla(0, 0%, 100%, 0.4)',\n      50: 'hsla(0, 0%, 100%, 0.5)',\n      60: 'hsla(0, 0%, 100%, 0.6)',\n      70: 'hsla(0, 0%, 100%, 0.7)',\n      80: 'hsla(0, 0%, 100%, 0.8)',\n      90: 'hsla(0, 0%, 100%, 0.9)'\n    }\n  }\n};\n/**\n * A basic dark mode that just flips the base color\n * palette.\n */\nconst defaultDarkModeOverride = {\n  colorMode: 'dark',\n  tokens: darkModeTokens\n};\nconst reactNativeDarkTokens = _objectSpread({}, darkModeTokens);\nexports.ALLOWED_SPECIAL_CHARACTERS = ALLOWED_SPECIAL_CHARACTERS;\nexports.ComponentClassName = ComponentClassName;\nexports.DEFAULT_COUNTRY_CODE = DEFAULT_COUNTRY_CODE;\nexports.DefaultTexts = DefaultTexts;\nexports.LoginMechanismArray = LoginMechanismArray;\nexports.NAVIGABLE_ROUTE_EVENT = NAVIGABLE_ROUTE_EVENT;\nexports.applyTranslation = applyTranslation;\nexports.areEmptyArrays = areEmptyArrays;\nexports.areEmptyObjects = areEmptyObjects;\nexports.authFieldsWithDefaults = authFieldsWithDefaults;\nexports.authenticatorTextUtil = authenticatorTextUtil;\nexports.capitalize = capitalize;\nexports.censorAllButFirstAndLast = censorAllButFirstAndLast;\nexports.censorContactMethod = censorContactMethod;\nexports.censorEmail = censorEmail;\nexports.censorPhoneNumber = censorPhoneNumber;\nexports.changePassword = changePassword;\nexports.classNameModifier = classNameModifier;\nexports.classNameModifierByFlag = classNameModifierByFlag;\nexports.classNames = classNames;\nexports.countryDialCodes = countryDialCodes;\nexports.createAuthenticatorMachine = createAuthenticatorMachine;\nexports.createTheme = createTheme;\nexports.cssNameTransform = cssNameTransform;\nexports.defaultAuthHubHandler = defaultAuthHubHandler;\nexports.defaultDarkModeOverride = defaultDarkModeOverride;\nexports.defaultFormFieldOptions = defaultFormFieldOptions;\nexports.defaultFormFieldsGetters = defaultFormFieldsGetters;\nexports.defaultTheme = defaultTheme;\nexports.deleteUser = deleteUser;\nexports.emailRegex = emailRegex;\nexports.getActorContext = getActorContext$1;\nexports.getActorState = getActorState;\nexports.getAliasDefaultFormField = getAliasDefaultFormField;\nexports.getCustomFormFields = getCustomFormFields;\nexports.getDefaultConfirmPasswordValidators = getDefaultConfirmPasswordValidators;\nexports.getDefaultFormFields = getDefaultFormFields;\nexports.getDefaultPasswordValidators = getDefaultPasswordValidators;\nexports.getErrors = getErrors;\nexports.getFormDataFromEvent = getFormDataFromEvent;\nexports.getFormFields = getFormFields;\nexports.getLogger = getLogger;\nexports.getNextServiceContextFacade = getNextServiceContextFacade;\nexports.getNextServiceFacade = getNextServiceFacade;\nexports.getPrimaryAlias = getPrimaryAlias;\nexports.getSendEventAliases = getSendEventAliases;\nexports.getServiceContextFacade = getServiceContextFacade;\nexports.getServiceFacade = getServiceFacade;\nexports.getSortedFormFields = getSortedFormFields;\nexports.getTotpCodeURL = getTotpCodeURL;\nexports.groupLog = groupLog;\nexports.has = has;\nexports.hasSpecialChars = hasSpecialChars;\nexports.hasTranslation = hasTranslation;\nexports.isAuthFieldWithDefaults = isAuthFieldWithDefaults;\nexports.isAuthFieldsWithDefaults = isAuthFieldsWithDefaults;\nexports.isDesignToken = isDesignToken;\nexports.isEmpty = isEmpty;\nexports.isEmptyObject = isEmptyObject;\nexports.isFunction = isFunction;\nexports.isMap = isMap;\nexports.isNil = isNil;\nexports.isObject = isObject;\nexports.isSet = isSet;\nexports.isString = isString;\nexports.isTypedFunction = isTypedFunction;\nexports.isUndefined = isUndefined;\nexports.isUnverifiedContactMethodType = isUnverifiedContactMethodType;\nexports.isValidEmail = isValidEmail;\nexports.listenToAuthHub = listenToAuthHub;\nexports.noop = noop;\nexports.reactNativeDarkTokens = reactNativeDarkTokens;\nexports.reactNativeTokens = reactNativeTokens;\nexports.removeOrderKeys = removeOrderKeys;\nexports.runFieldValidators = runFieldValidators;\nexports.sanitizeNamespaceImport = sanitizeNamespaceImport;\nexports.setFormOrder = setFormOrder;\nexports.setUserAgent = setUserAgent;\nexports.setupTokens = setupTokens;\nexports.signUpFieldsWithDefault = signUpFieldsWithDefault;\nexports.signUpFieldsWithoutDefault = signUpFieldsWithoutDefault;\nexports.sortFormFields = sortFormFields;\nexports.templateJoin = templateJoin;\nexports.translate = translate;\nexports.translations = translations;\nexports.trimValues = trimValues;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}