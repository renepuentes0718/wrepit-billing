{"ast":null,"code":"const _excluded = [\"children\"],\n  _excluded2 = [\"scope\", \"children\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport { createContext as $3bkAK$createContext, useMemo as $3bkAK$useMemo, createElement as $3bkAK$createElement, useContext as $3bkAK$useContext } from \"react\";\nfunction $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n  const Context = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n  function Provider(props) {\n    const children = props.children,\n      context = _objectWithoutProperties(props, _excluded); // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = $3bkAK$useMemo(() => context, Object.values(context));\n    return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n      value: value\n    }, children);\n  }\n  function useContext(consumerName) {\n    const context = $3bkAK$useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext];\n}\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\nfunction $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName) {\n  let createContextScopeDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let defaultContexts = [];\n  /* -----------------------------------------------------------------------------------------------\n  * createContext\n  * ---------------------------------------------------------------------------------------------*/\n  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n    const BaseContext = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n    function Provider(props) {\n      const scope = props.scope,\n        children = props.children,\n        context = _objectWithoutProperties(props, _excluded2);\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext; // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = $3bkAK$useMemo(() => context, Object.values(context));\n      return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n        value: value\n      }, children);\n    }\n    function useContext(consumerName, scope) {\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;\n      const context = $3bkAK$useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext];\n  }\n  /* -----------------------------------------------------------------------------------------------\n  * createScope\n  * ---------------------------------------------------------------------------------------------*/\n  const createScope = () => {\n    const scopeContexts = defaultContexts.map(defaultContext => {\n      return /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    });\n    return function useScope(scope) {\n      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;\n      return $3bkAK$useMemo(() => ({\n        [`__scope${scopeName}`]: _objectSpread(_objectSpread({}, scope), {}, {\n          [scopeName]: contexts\n        })\n      }), [scope, contexts]);\n    };\n  };\n  createScope.scopeName = scopeName;\n  return [$c512c27ab02ef895$export$fd42f52fd3ae1109, $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)];\n}\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\nfunction $c512c27ab02ef895$var$composeContextScopes() {\n  for (var _len = arguments.length, scopes = new Array(_len), _key = 0; _key < _len; _key++) {\n    scopes[_key] = arguments[_key];\n  }\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n  const createScope1 = () => {\n    const scopeHooks = scopes.map(createScope => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName\n    }));\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes1 = scopeHooks.reduce((nextScopes, _ref) => {\n        let useScope = _ref.useScope,\n          scopeName = _ref.scopeName;\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return _objectSpread(_objectSpread({}, nextScopes), currentScope);\n      }, {});\n      return $3bkAK$useMemo(() => ({\n        [`__scope${baseScope.scopeName}`]: nextScopes1\n      }), [nextScopes1]);\n    };\n  };\n  createScope1.scopeName = baseScope.scopeName;\n  return createScope1;\n}\nexport { $c512c27ab02ef895$export$fd42f52fd3ae1109 as createContext, $c512c27ab02ef895$export$50c7b4e9d9f19c1 as createContextScope };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}