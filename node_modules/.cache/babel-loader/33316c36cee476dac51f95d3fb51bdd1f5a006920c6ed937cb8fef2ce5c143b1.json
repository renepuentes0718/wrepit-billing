{"ast":null,"code":"const _excluded = [\"checked\", \"className\", \"defaultChecked\", \"hasError\", \"isDisabled\", \"isIndeterminate\", \"label\", \"labelHidden\", \"labelPosition\", \"onBlur\", \"onFocus\", \"onChange\", \"testId\", \"inputStyles\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport * as React from 'react';\nimport { ComponentClassName, classNames, classNameModifierByFlag, isFunction } from '@aws-amplify/ui';\nimport { Flex } from '../Flex/Flex.mjs';\nimport '../Icon/Icon.mjs';\nimport '../Icon/context/IconsContext.mjs';\nimport { useIcons } from '../Icon/context/useIcons.mjs';\nimport { View } from '../View/View.mjs';\nimport { IconCheck } from '../Icon/icons/IconCheck.mjs';\nimport { IconIndeterminate } from '../Icon/icons/IconIndeterminate.mjs';\nimport { Input } from '../Input/Input.mjs';\nimport { Text } from '../Text/Text.mjs';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.mjs';\nimport { getTestId } from '../utils/getTestId.mjs';\nimport { useStableId } from '../utils/useStableId.mjs';\nimport { splitPrimitiveProps } from '../utils/splitPrimitiveProps.mjs';\nimport { useFieldset } from '../Fieldset/useFieldset.mjs';\nimport { primitiveWithForwardRef } from '../utils/primitiveWithForwardRef.mjs';\nconst CheckboxPrimitive = (_ref, ref) => {\n  let controlledChecked = _ref.checked,\n    className = _ref.className,\n    defaultChecked = _ref.defaultChecked,\n    hasError = _ref.hasError,\n    isDisabled = _ref.isDisabled,\n    isIndeterminate = _ref.isIndeterminate,\n    label = _ref.label,\n    labelHidden = _ref.labelHidden,\n    labelPosition = _ref.labelPosition,\n    _onBlur = _ref.onBlur,\n    _onFocus = _ref.onFocus,\n    _onChange = _ref.onChange,\n    testId = _ref.testId,\n    inputStyles = _ref.inputStyles,\n    _rest = _objectWithoutProperties(_ref, _excluded);\n  const _splitPrimitiveProps = splitPrimitiveProps(_rest),\n    styleProps = _splitPrimitiveProps.styleProps,\n    rest = _splitPrimitiveProps.rest;\n  const _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focused = _React$useState2[0],\n    setFocused = _React$useState2[1];\n  const icons = useIcons('checkbox');\n  const _useFieldset = useFieldset(),\n    isFieldsetDisabled = _useFieldset.isFieldsetDisabled;\n  const shouldBeDisabled = isFieldsetDisabled ? isFieldsetDisabled : isDisabled;\n  const isControlled = controlledChecked !== undefined;\n  const _React$useState3 = React.useState(() =>\n    // if controlled, initialize to `controlledChecked` else `defaultChecked`\n    isControlled ? controlledChecked : defaultChecked),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    localChecked = _React$useState4[0],\n    setLocalChecked = _React$useState4[1];\n  const checked = isControlled ? controlledChecked : localChecked;\n  const onChange = e => {\n    if (isFunction(_onChange)) {\n      _onChange(e);\n    }\n    // in controlled mode, `controlledChecked` determines checked state\n    if (!isControlled) {\n      setLocalChecked(e.target.checked);\n    }\n  };\n  const onFocus = e => {\n    if (isFunction(_onFocus)) {\n      _onFocus(e);\n    }\n    setFocused(true);\n  };\n  const onBlur = e => {\n    if (isFunction(_onBlur)) {\n      _onBlur(e);\n    }\n    setFocused(false);\n  };\n  const dataId = useStableId();\n  React.useEffect(() => {\n    const input = document.querySelector(`[data-id=\"${dataId}\"]`);\n    if (input && typeof isIndeterminate === 'boolean') {\n      // HTMLInputElement does not have an `indeterminate` attribute\n      input.indeterminate = isIndeterminate;\n    }\n  }, [dataId, isIndeterminate]);\n  const buttonTestId = getTestId(testId, ComponentClassName.CheckboxButton);\n  const iconTestId = getTestId(testId, ComponentClassName.CheckboxIcon);\n  const labelTestId = getTestId(testId, ComponentClassName.CheckboxLabel);\n  const flexClasses = classNames(ComponentClassName.CheckboxButton, classNameModifierByFlag(ComponentClassName.CheckboxButton, 'disabled', shouldBeDisabled), classNameModifierByFlag(ComponentClassName.CheckboxButton, 'error', hasError), classNameModifierByFlag(ComponentClassName.CheckboxButton, 'focused', focused));\n  const iconClasses = classNames(ComponentClassName.CheckboxIcon, classNameModifierByFlag(ComponentClassName.CheckboxIcon, 'checked', checked), classNameModifierByFlag(ComponentClassName.CheckboxIcon, 'disabled', shouldBeDisabled), classNameModifierByFlag(ComponentClassName.CheckboxIcon, 'indeterminate', isIndeterminate));\n  const iconProps = {\n    className: classNames(iconClasses),\n    'data-checked': localChecked,\n    'data-disabled': shouldBeDisabled,\n    'data-testid': iconTestId\n  };\n  const checkedIcon = icons?.checked ? ( /*#__PURE__*/React.createElement(View, {\n    as: \"span\",\n    className: classNames(iconClasses)\n  }, icons.checked)) : ( /*#__PURE__*/React.createElement(IconCheck, _objectSpread({}, iconProps)));\n  const indeterminateIcon = icons?.indeterminate ? ( /*#__PURE__*/React.createElement(View, {\n    as: \"span\",\n    className: classNames(iconClasses)\n  }, icons.indeterminate)) : ( /*#__PURE__*/React.createElement(IconIndeterminate, _objectSpread({}, iconProps)));\n  return /*#__PURE__*/React.createElement(Flex, _objectSpread({\n    as: \"label\",\n    className: classNames(ComponentClassName.Checkbox, classNameModifierByFlag(ComponentClassName.Checkbox, 'disabled', shouldBeDisabled), labelPosition ? `amplify-label-${labelPosition}` : null, className),\n    testId: testId\n  }, styleProps), /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(Input, _objectSpread({\n    checked: controlledChecked,\n    className: ComponentClassName.CheckboxInput,\n    \"data-id\": dataId,\n    defaultChecked: defaultChecked,\n    isDisabled: shouldBeDisabled,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    ref: ref,\n    type: \"checkbox\"\n  }, rest))), label && ( /*#__PURE__*/React.createElement(Text, {\n    as: \"span\",\n    className: classNames(ComponentClassName.CheckboxLabel, classNameModifierByFlag(ComponentClassName.CheckboxLabel, `disabled`, shouldBeDisabled), {\n      [ComponentClassName.VisuallyHidden]: labelHidden\n    }),\n    \"data-disabled\": shouldBeDisabled,\n    testId: labelTestId\n  }, label)), /*#__PURE__*/React.createElement(Flex, _objectSpread({\n    \"aria-hidden\": \"true\",\n    as: \"span\",\n    className: flexClasses,\n    \"data-checked\": checked,\n    \"data-disabled\": shouldBeDisabled,\n    \"data-focus\": focused,\n    \"data-error\": hasError,\n    testId: buttonTestId\n  }, inputStyles), isIndeterminate ? indeterminateIcon : checkedIcon));\n};\nconst Checkbox = primitiveWithForwardRef(CheckboxPrimitive);\nCheckbox.displayName = 'Checkbox';\nexport { Checkbox };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}