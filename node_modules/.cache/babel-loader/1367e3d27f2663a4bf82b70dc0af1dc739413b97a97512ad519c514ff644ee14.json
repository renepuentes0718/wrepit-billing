{"ast":null,"code":"const _excluded = [\"onComplete\", \"onUpdate\", \"motionValue\"],\n  _excluded2 = [\"motionValue\", \"onUpdate\", \"onComplete\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { memo } from '../../utils/memo.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { animateStyle } from './waapi/index.mjs';\nimport { isWaapiSupportedEasing } from './waapi/easing.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\"\n// TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved\n// or until we implement support for linear() easing.\n// \"background-color\"\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\nfunction requiresPregeneratedKeyframes(options) {\n  return options.type === \"spring\" || options.name === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\n}\nfunction pregenerateKeyframes(keyframes, options) {\n  /**\n   * Create a main-thread animation to pregenerate keyframes.\n   * We sample this at regular intervals to generate keyframes that we then\n   * linearly interpolate between.\n   */\n  const sampleAnimation = new MainThreadAnimation(_objectSpread(_objectSpread({}, options), {}, {\n    keyframes,\n    repeat: 0,\n    delay: 0,\n    isGenerator: true\n  }));\n  let state = {\n    done: false,\n    value: keyframes[0]\n  };\n  const pregeneratedKeyframes = [];\n  /**\n   * Bail after 20 seconds of pre-generated keyframes as it's likely\n   * we're heading for an infinite loop.\n   */\n  let t = 0;\n  while (!state.done && t < maxDuration) {\n    state = sampleAnimation.sample(t);\n    pregeneratedKeyframes.push(state.value);\n    t += sampleDelta;\n  }\n  return {\n    times: undefined,\n    keyframes: pregeneratedKeyframes,\n    duration: t - sampleDelta,\n    ease: \"linear\"\n  };\n}\nclass AcceleratedAnimation extends BaseAnimation {\n  constructor(options) {\n    super(options);\n    const _this$options = this.options,\n      name = _this$options.name,\n      motionValue = _this$options.motionValue,\n      keyframes = _this$options.keyframes;\n    this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue);\n    this.resolver.scheduleResolve();\n  }\n  initPlayback(keyframes, finalKeyframe) {\n    var _a;\n    let _this$options2 = this.options,\n      _this$options2$durati = _this$options2.duration,\n      duration = _this$options2$durati === void 0 ? 300 : _this$options2$durati,\n      times = _this$options2.times,\n      ease = _this$options2.ease,\n      type = _this$options2.type,\n      motionValue = _this$options2.motionValue,\n      name = _this$options2.name;\n    /**\n     * If element has since been unmounted, return false to indicate\n     * the animation failed to initialised.\n     */\n    if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\n      return false;\n    }\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(this.options)) {\n      const _this$options3 = this.options,\n        onComplete = _this$options3.onComplete,\n        onUpdate = _this$options3.onUpdate,\n        motionValue = _this$options3.motionValue,\n        options = _objectWithoutProperties(_this$options3, _excluded);\n      const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n      keyframes = pregeneratedAnimation.keyframes;\n      // If this is a very short animation, ensure we have\n      // at least two keyframes to animate between as older browsers\n      // can't animate between a single keyframe.\n      if (keyframes.length === 1) {\n        keyframes[1] = keyframes[0];\n      }\n      duration = pregeneratedAnimation.duration;\n      times = pregeneratedAnimation.times;\n      ease = pregeneratedAnimation.ease;\n      type = \"keyframes\";\n    }\n    const animation = animateStyle(motionValue.owner.current, name, keyframes, _objectSpread(_objectSpread({}, this.options), {}, {\n      duration,\n      times,\n      ease\n    }));\n    // Override the browser calculated startTime with one synchronised to other JS\n    // and WAAPI animations starting this event loop.\n    animation.startTime = time.now();\n    if (this.pendingTimeline) {\n      animation.timeline = this.pendingTimeline;\n      this.pendingTimeline = undefined;\n    } else {\n      /**\n       * Prefer the `onfinish` prop as it's more widely supported than\n       * the `finished` promise.\n       *\n       * Here, we synchronously set the provided MotionValue to the end\n       * keyframe. If we didn't, when the WAAPI animation is finished it would\n       * be removed from the element which would then revert to its old styles.\n       */\n      animation.onfinish = () => {\n        const onComplete = this.options.onComplete;\n        motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n        onComplete && onComplete();\n        this.cancel();\n        this.resolveFinishedPromise();\n      };\n    }\n    return {\n      animation,\n      duration,\n      times,\n      type,\n      ease,\n      keyframes: keyframes\n    };\n  }\n  get duration() {\n    const resolved = this.resolved;\n    if (!resolved) return 0;\n    const duration = resolved.duration;\n    return millisecondsToSeconds(duration);\n  }\n  get time() {\n    const resolved = this.resolved;\n    if (!resolved) return 0;\n    const animation = resolved.animation;\n    return millisecondsToSeconds(animation.currentTime || 0);\n  }\n  set time(newTime) {\n    const resolved = this.resolved;\n    if (!resolved) return;\n    const animation = resolved.animation;\n    animation.currentTime = secondsToMilliseconds(newTime);\n  }\n  get speed() {\n    const resolved = this.resolved;\n    if (!resolved) return 1;\n    const animation = resolved.animation;\n    return animation.playbackRate;\n  }\n  set speed(newSpeed) {\n    const resolved = this.resolved;\n    if (!resolved) return;\n    const animation = resolved.animation;\n    animation.playbackRate = newSpeed;\n  }\n  get state() {\n    const resolved = this.resolved;\n    if (!resolved) return \"idle\";\n    const animation = resolved.animation;\n    return animation.playState;\n  }\n  /**\n   * Replace the default DocumentTimeline with another AnimationTimeline.\n   * Currently used for scroll animations.\n   */\n  attachTimeline(timeline) {\n    if (!this._resolved) {\n      this.pendingTimeline = timeline;\n    } else {\n      const resolved = this.resolved;\n      if (!resolved) return noop;\n      const animation = resolved.animation;\n      animation.timeline = timeline;\n      animation.onfinish = null;\n    }\n    return noop;\n  }\n  play() {\n    if (this.isStopped) return;\n    const resolved = this.resolved;\n    if (!resolved) return;\n    const animation = resolved.animation;\n    if (animation.playState === \"finished\") {\n      this.updateFinishedPromise();\n    }\n    animation.play();\n  }\n  pause() {\n    const resolved = this.resolved;\n    if (!resolved) return;\n    const animation = resolved.animation;\n    animation.pause();\n  }\n  stop() {\n    this.resolver.cancel();\n    this.isStopped = true;\n    if (this.state === \"idle\") return;\n    const resolved = this.resolved;\n    if (!resolved) return;\n    const animation = resolved.animation,\n      keyframes = resolved.keyframes,\n      duration = resolved.duration,\n      type = resolved.type,\n      ease = resolved.ease,\n      times = resolved.times;\n    if (animation.playState === \"idle\" || animation.playState === \"finished\") {\n      return;\n    }\n    /**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */\n    if (this.time) {\n      const _this$options4 = this.options,\n        motionValue = _this$options4.motionValue,\n        onUpdate = _this$options4.onUpdate,\n        onComplete = _this$options4.onComplete,\n        options = _objectWithoutProperties(_this$options4, _excluded2);\n      const sampleAnimation = new MainThreadAnimation(_objectSpread(_objectSpread({}, options), {}, {\n        keyframes,\n        duration,\n        type,\n        ease,\n        times,\n        isGenerator: true\n      }));\n      const sampleTime = secondsToMilliseconds(this.time);\n      motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n    }\n    this.cancel();\n  }\n  complete() {\n    const resolved = this.resolved;\n    if (!resolved) return;\n    resolved.animation.finish();\n  }\n  cancel() {\n    const resolved = this.resolved;\n    if (!resolved) return;\n    resolved.animation.cancel();\n  }\n  static supports(options) {\n    const motionValue = options.motionValue,\n      name = options.name,\n      repeatDelay = options.repeatDelay,\n      repeatType = options.repeatType,\n      damping = options.damping,\n      type = options.type;\n    return supportsWaapi() && name && acceleratedValues.has(name) && motionValue && motionValue.owner && motionValue.owner.current instanceof HTMLElement &&\n    /**\n     * If we're outputting values to onUpdate then we can't use WAAPI as there's\n     * no way to read the value from WAAPI every frame.\n     */\n    !motionValue.owner.getProps().onUpdate && !repeatDelay && repeatType !== \"mirror\" && damping !== 0 && type !== \"inertia\";\n  }\n}\nexport { AcceleratedAnimation };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}