{"ast":null,"code":"import * as React from 'react';\nimport { DropZoneContext } from './DropZoneProvider.mjs';\n\n/**\n * These are syntactic sugar components that make it easy to compose children\n * in DropZone without having to expose the DropZoneContext.\n */\n/**\n * This component renders when the user is dragging ONLY accepted files on the DropZone.\n */\nconst Accepted = _ref => {\n  let children = _ref.children;\n  const dragState = React.useContext(DropZoneContext);\n  if (!dragState) {\n    throw new Error('`DropZone.Accept` must be used inside a DropZone');\n  }\n  return dragState === 'accept' ? /*#__PURE__*/React.createElement(React.Fragment, null, children) : null;\n};\n/**\n * This component renders when the user is dragging ANY rejected files on the DropZone.\n */\nconst Rejected = _ref2 => {\n  let children = _ref2.children;\n  const dragState = React.useContext(DropZoneContext);\n  if (!dragState) {\n    throw new Error('`DropZone.Rejected` must be used inside a DropZone');\n  }\n  return dragState === 'reject' ? /*#__PURE__*/React.createElement(React.Fragment, null, children) : null;\n};\n/**\n * This component renders by default when the user is not dragging.\n */\nconst Default = _ref3 => {\n  let children = _ref3.children;\n  const dragState = React.useContext(DropZoneContext);\n  if (!dragState) {\n    throw new Error('`DropZone.Default` must be used inside a DropZone');\n  }\n  return dragState === 'inactive' ? /*#__PURE__*/React.createElement(React.Fragment, null, children) : null;\n};\nexport { Accepted, Default, Rejected };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}