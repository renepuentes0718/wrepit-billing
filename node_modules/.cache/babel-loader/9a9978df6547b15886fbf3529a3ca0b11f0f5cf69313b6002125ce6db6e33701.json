{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { useCompoundItem } from '../useCompound';\nfunction tabPanelValueGenerator(otherTabPanelValues) {\n  return otherTabPanelValues.size;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTabPanel API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab-panel)\n */\nfunction useTabPanel(parameters) {\n  const valueParam = parameters.value,\n    idParam = parameters.id,\n    externalRef = parameters.rootRef;\n  const context = useTabsContext();\n  if (context === null) {\n    throw new Error('No TabContext provided');\n  }\n  const selectedTabValue = context.value,\n    getTabId = context.getTabId;\n  const id = useId(idParam);\n  const ref = React.useRef(null);\n  const handleRef = useForkRef(ref, externalRef);\n  const metadata = React.useMemo(() => ({\n    id,\n    ref\n  }), [id]);\n  const _useCompoundItem = useCompoundItem(valueParam != null ? valueParam : tabPanelValueGenerator, metadata),\n    value = _useCompoundItem.id;\n  const hidden = value !== selectedTabValue;\n  const correspondingTabId = value !== undefined ? getTabId(value) : undefined;\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({\n      'aria-labelledby': correspondingTabId != null ? correspondingTabId : undefined,\n      hidden,\n      id: id != null ? id : undefined\n    }, externalProps, {\n      ref: handleRef\n    });\n  };\n  return {\n    hidden,\n    getRootProps,\n    rootRef: handleRef\n  };\n}\nexport { useTabPanel };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}