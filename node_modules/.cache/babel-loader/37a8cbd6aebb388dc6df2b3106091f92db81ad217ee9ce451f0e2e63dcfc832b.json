{"ast":null,"code":"import * as React from 'react';\nimport { useRange, ELLIPSIS } from './useRange.mjs';\nimport { PaginationItem } from './PaginationItem.mjs';\nimport { ComponentText } from '../shared/constants.mjs';\n\n/**\n * This hook will be used to get the pagination items to be rendered in the pagination primitive\n * @param currentPage current page number\n * @param totalPages total number of pages\n * @param siblingCount the number of siblings on each side of\n * @param onNext callback function triggered when the next-page button is pressed\n * @param onPrevious callback function triggered when the prev-page button is pressed\n * @param onChange callback function triggered every time the page changes\n * @returns an array of pagination items\n */\nconst usePaginationItems = _ref => {\n  let currentPage = _ref.currentPage,\n    totalPages = _ref.totalPages,\n    hasMorePages = _ref.hasMorePages,\n    siblingCount = _ref.siblingCount,\n    _ref$currentPageLabel = _ref.currentPageLabel,\n    currentPageLabel = _ref$currentPageLabel === void 0 ? ComponentText.PaginationItem.currentPageLabel : _ref$currentPageLabel,\n    _ref$pageLabel = _ref.pageLabel,\n    pageLabel = _ref$pageLabel === void 0 ? ComponentText.PaginationItem.pageLabel : _ref$pageLabel,\n    _ref$previousLabel = _ref.previousLabel,\n    previousLabel = _ref$previousLabel === void 0 ? ComponentText.PaginationItem.previousLabel : _ref$previousLabel,\n    _ref$nextLabel = _ref.nextLabel,\n    nextLabel = _ref$nextLabel === void 0 ? ComponentText.PaginationItem.nextLabel : _ref$nextLabel,\n    onNext = _ref.onNext,\n    onPrevious = _ref.onPrevious,\n    onChange = _ref.onChange;\n  const previousItem = /*#__PURE__*/React.createElement(PaginationItem, {\n    type: \"previous\",\n    key: \"previous\",\n    currentPage: currentPage,\n    onClick: onPrevious,\n    isDisabled: currentPage <= 1,\n    ariaLabel: previousLabel\n  });\n  const nextItem = /*#__PURE__*/React.createElement(PaginationItem, {\n    type: \"next\",\n    key: \"next\",\n    currentPage: currentPage,\n    onClick: onNext,\n    isDisabled: currentPage >= totalPages && !hasMorePages,\n    ariaLabel: nextLabel\n  });\n  // To get the range of page numbers to be rendered in the pagination primitive\n  const range = useRange(currentPage, totalPages, siblingCount);\n  const pageItems = React.useMemo(() => range.map((item, idx) => {\n    if (item === ELLIPSIS) {\n      return /*#__PURE__*/React.createElement(PaginationItem, {\n        type: \"ellipsis\",\n        key: idx === 1 ? 'start-ellipsis' : 'end-ellipsis'\n      });\n    }\n    return (\n      /*#__PURE__*/\n      // Note: Do NOT use index for `key` and instead use page number\n      // otherwise, react cannot update the component correctly with its diff mechanism\n      React.createElement(PaginationItem, {\n        key: item,\n        type: \"page\",\n        page: item,\n        currentPage: currentPage,\n        currentPageLabel: currentPageLabel,\n        onClick: () => onChange?.(item, currentPage),\n        /**\n         * @todo We should consider how we would support interpolation in our string translations.\n         * This works for \"Go to page 31\" or \"translatedText {s}\" as the supplied string\n         * But for Arabic or Japanese or some other languages the supplied string might look like: \"{s} translatedText\".\n         */\n        ariaLabel: `${pageLabel} ${item}`\n      })\n    );\n  }), [range, currentPage, currentPageLabel, pageLabel, onChange]);\n  return [previousItem, ...pageItems, nextItem];\n};\nexport { usePaginationItems };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}