{"ast":null,"code":"// import React, { useEffect, useState } from 'react'\n// import { gql, useMutation } from '@apollo/client'\n// import { Formik } from 'formik'\n// import EyeOutlined from '@ant-design/icons/EyeOutlined'\n// import EyeInvisibleOutlined from '@ant-design/icons/EyeInvisibleOutlined'\n// import {\n//   Button,\n//   FormControl,\n//   FormHelperText,\n//   Grid,\n//   InputAdornment,\n//   IconButton,\n//   InputLabel,\n//   OutlinedInput,\n//   Stack,\n//   Typography,\n//   Box,\n// } from '@mui/material'\n// import { strengthColor, strengthIndicator } from '../utils/passwordStrength'\n// import { SignUpSchema } from '../schema'\n// import Banner from '../shared/Banner'\n// import Omniauth from '../shared/OmniAuth'\n// import { User } from '../interface/index'\n\n// const REGISTER_USER = gql`\n//   mutation RegisterUser(\n//     $email: String!,\n//     $password: String!,\n//     $phone: String!,\n//     $firstName: String!,\n//     $lastName: String!,\n//   ) {\n//     registerUser(\n//       input: {\n//         email: $email,\n//         password: $password,\n//         phone: $phone,\n//         lastName: $lastName,\n//         firstName: $firstName,\n//       }\n//     ){\n//       id\n//     }\n//   }\n// `;\n\n// export default function UserForm({ initialValues, showAuth, }): JSX.Element {\n\n//   const [level, setLevel] = useState({ color: '', label: '' })\n//   const [showPassword, setShowPassword] = useState(false)\n//   const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n//   const [message, setMessage] = useState('')\n//   const [severity, setSeverity] = useState(null)\n\n//   const [register, { loading }] = useMutation(REGISTER_USER, {\n//     onCompleted: (data) => {\n//       if (!!data) {\n//         setSeverity('success')\n//         setMessage('Account was created successfully, a confirmation link was sent to your email')\n//       }\n//     },\n//     onError: () => {\n//       setSeverity('error')\n//       setMessage('Sorry, account creation was unsuccessful')\n//     }\n//   })\n\n//   const handleClickShowPassword = () => {\n//     setShowPassword(!showPassword)\n//   }\n\n//   const handleClickShowConfirmPassword = () => {\n//     setShowConfirmPassword(!showConfirmPassword)\n//   }\n\n//   const changePassword = (value: string): void => {\n//     const temp = strengthIndicator(value)\n//     setLevel(strengthColor(temp))\n//   }\n\n//   const handleSubmit = (event: User): void => {\n//     register({\n//       variables: {\n//         firstName: event.firstName,\n//         lastName: event.lastName,\n//         email: event.email,\n//         phone: event.phone,\n//         password: event.password,\n//       }\n//     })\n//   }\n\n//   return (\n//     <Formik\n//       onSubmit={handleSubmit}\n//       initialValues={initialValues}\n//       validationSchema={SignUpSchema}\n//     >\n//       {({ errors, handleBlur, handleChange, handleSubmit, touched, values }) => (\n//         <>\n//           {message && <Banner severity={severity} message={message} />}\n//           <form noValidate onSubmit={handleSubmit}>\n//             <Grid container spacing={3}>\n//               <Grid item xs={12} md={6}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='firstname'>First Name*</InputLabel>\n//                   <OutlinedInput\n//                     id='firstName'\n//                     type='firstName'\n//                     value={values.firstName}\n//                     name='firstName'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     fullWidth\n//                     error={Boolean(touched.firstName && errors.firstName)}\n//                     placeholder='First Name'\n//                   />\n//                 </Stack>\n//                 {touched.firstName && typeof errors.firstName === 'string' && (\n//                   <FormHelperText error id='helper-text-firstname-signup'>{errors.firstName}</FormHelperText>\n//                 )}\n//                 <h1>{ }</h1>\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='lastName'>Last Name*</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.lastName && errors.lastName)}\n//                     id='lastName'\n//                     type='lastName'\n//                     value={values.lastName}\n//                     name='lastName'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     placeholder='Last Name'\n//                   />\n//                 </Stack>\n//                 {touched.lastName && typeof errors.lastName === 'string' && (\n//                   <FormHelperText error id='helper-text-lastname-signup'>\n//                     {errors.lastName}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='email'>Email Address*</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.email && errors.email)}\n//                     id='email'\n//                     type='email'\n//                     value={values.email}\n//                     name='email'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     placeholder='Email'\n//                   />\n//                 </Stack>\n//                 {touched.email && typeof errors.email === 'string' && (\n//                   <FormHelperText error id='helper-text-email-signup'>\n//                     {errors.email}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='email'>Phone</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.phone && errors.phone)}\n//                     id='phone'\n//                     type='phone'\n//                     value={values.phone}\n//                     name='phone'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     placeholder='Phone Number'\n//                   />\n//                 </Stack>\n//                 {touched.phone && typeof errors.phone === 'string' && (\n//                   <FormHelperText error id='helper-text-phone-signup'>\n//                     {errors.phone}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='password'>Password*</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.password && errors.password)}\n//                     id='password'\n//                     type={showPassword ? 'text' : 'password'}\n//                     value={values.password}\n//                     name='password'\n//                     onBlur={handleBlur}\n//                     onChange={(e) => {\n//                       handleChange(e)\n//                       changePassword(e.target.value)\n//                     }}\n//                     endAdornment={\n//                       <InputAdornment position='end'>\n//                         <IconButton\n//                           aria-label='toggle password visibility'\n//                           onClick={handleClickShowPassword}\n//                           edge='end'\n//                           color='secondary'\n//                         >\n//                           {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n//                         </IconButton>\n//                       </InputAdornment>\n//                     }\n//                     placeholder='Enter password'\n//                   />\n//                 </Stack>\n//                 {values.password && (\n//                   <FormControl fullWidth sx={{ mt: 2 }}>\n//                     <Grid container spacing={2} alignItems='center'>\n//                       <Grid item>\n//                         <Box sx={{ bgcolor: level?.color, width: 200, height: 8, borderRadius: '7px' }} />\n//                       </Grid>\n//                       <Grid item>\n//                         <Typography variant='subtitle1' fontSize='0.75rem'>\n//                           {level?.label}\n//                         </Typography>\n//                       </Grid>\n//                     </Grid>\n//                   </FormControl>\n\n//                 )}\n//                 {!values.password && touched.password && typeof errors.password === 'string' && (\n//                   <FormHelperText error id='helper-text-password-signup'>\n//                     {errors.password}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='password-confirmation'>Comfirm Password</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.passwordConfirmation && errors.passwordConfirmation)}\n//                     id='passwordConfirmation'\n//                     type={showConfirmPassword ? 'text' : 'password'}\n//                     value={values.passwordConfirmation}\n//                     name='passwordConfirmation'\n//                     onBlur={handleBlur}\n//                     onChange={(e) => { handleChange(e) }}\n//                     endAdornment={\n//                       <InputAdornment position='end'>\n//                         <IconButton\n//                           aria-label='toggle password visibility'\n//                           onClick={handleClickShowConfirmPassword}\n//                           edge='end'\n//                           color='secondary'\n//                         >\n//                           {showConfirmPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n//                         </IconButton>\n//                       </InputAdornment>\n//                     }\n//                     placeholder='Enter password confirmation'\n//                   />\n//                 </Stack>\n//                 {touched.passwordConfirmation && typeof errors.passwordConfirmation === 'string' && (\n//                   <FormHelperText error id='helper-text-password-signup'>\n//                     {errors.passwordConfirmation}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Button\n//                   disableElevation\n//                   fullWidth disabled={loading}\n//                   size='large'\n//                   type='submit'\n//                   variant='contained'\n//                   sx={{\n//                     color: '#5bbff1'\n//                   }}\n//                 >\n//                   Create Account\n//                 </Button>\n//               </Grid>\n//               {showAuth && (\n//                 <Grid item xs={12}>\n//                   <Omniauth title=\"Sign up with\" />\n//                 </Grid>\n//               )}\n//             </Grid>\n//           </form>\n//         </>\n//       )}\n//     </Formik>\n//   )\n// }","map":{"version":3,"names":[],"sources":["/Users/admin/Desktop/project-ges/app/javascript/components/forms/UserForm.tsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\n// import { gql, useMutation } from '@apollo/client'\n// import { Formik } from 'formik'\n// import EyeOutlined from '@ant-design/icons/EyeOutlined'\n// import EyeInvisibleOutlined from '@ant-design/icons/EyeInvisibleOutlined'\n// import {\n//   Button,\n//   FormControl,\n//   FormHelperText,\n//   Grid,\n//   InputAdornment,\n//   IconButton,\n//   InputLabel,\n//   OutlinedInput,\n//   Stack,\n//   Typography,\n//   Box,\n// } from '@mui/material'\n// import { strengthColor, strengthIndicator } from '../utils/passwordStrength'\n// import { SignUpSchema } from '../schema'\n// import Banner from '../shared/Banner'\n// import Omniauth from '../shared/OmniAuth'\n// import { User } from '../interface/index'\n\n\n// const REGISTER_USER = gql`\n//   mutation RegisterUser(\n//     $email: String!,\n//     $password: String!,\n//     $phone: String!,\n//     $firstName: String!,\n//     $lastName: String!,\n//   ) {\n//     registerUser(\n//       input: {\n//         email: $email,\n//         password: $password,\n//         phone: $phone,\n//         lastName: $lastName,\n//         firstName: $firstName,\n//       }\n//     ){\n//       id\n//     }\n//   }\n// `;\n\n// export default function UserForm({ initialValues, showAuth, }): JSX.Element {\n\n//   const [level, setLevel] = useState({ color: '', label: '' })\n//   const [showPassword, setShowPassword] = useState(false)\n//   const [showConfirmPassword, setShowConfirmPassword] = useState(false)\n//   const [message, setMessage] = useState('')\n//   const [severity, setSeverity] = useState(null)\n\n//   const [register, { loading }] = useMutation(REGISTER_USER, {\n//     onCompleted: (data) => {\n//       if (!!data) {\n//         setSeverity('success')\n//         setMessage('Account was created successfully, a confirmation link was sent to your email')\n//       }\n//     },\n//     onError: () => {\n//       setSeverity('error')\n//       setMessage('Sorry, account creation was unsuccessful')\n//     }\n//   })\n\n\n//   const handleClickShowPassword = () => {\n//     setShowPassword(!showPassword)\n//   }\n\n//   const handleClickShowConfirmPassword = () => {\n//     setShowConfirmPassword(!showConfirmPassword)\n//   }\n\n//   const changePassword = (value: string): void => {\n//     const temp = strengthIndicator(value)\n//     setLevel(strengthColor(temp))\n//   }\n\n//   const handleSubmit = (event: User): void => {\n//     register({\n//       variables: {\n//         firstName: event.firstName,\n//         lastName: event.lastName,\n//         email: event.email,\n//         phone: event.phone,\n//         password: event.password,\n//       }\n//     })\n//   }\n\n//   return (\n//     <Formik\n//       onSubmit={handleSubmit}\n//       initialValues={initialValues}\n//       validationSchema={SignUpSchema}\n//     >\n//       {({ errors, handleBlur, handleChange, handleSubmit, touched, values }) => (\n//         <>\n//           {message && <Banner severity={severity} message={message} />}\n//           <form noValidate onSubmit={handleSubmit}>\n//             <Grid container spacing={3}>\n//               <Grid item xs={12} md={6}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='firstname'>First Name*</InputLabel>\n//                   <OutlinedInput\n//                     id='firstName'\n//                     type='firstName'\n//                     value={values.firstName}\n//                     name='firstName'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     fullWidth\n//                     error={Boolean(touched.firstName && errors.firstName)}\n//                     placeholder='First Name'\n//                   />\n//                 </Stack>\n//                 {touched.firstName && typeof errors.firstName === 'string' && (\n//                   <FormHelperText error id='helper-text-firstname-signup'>{errors.firstName}</FormHelperText>\n//                 )}\n//                 <h1>{ }</h1>\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='lastName'>Last Name*</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.lastName && errors.lastName)}\n//                     id='lastName'\n//                     type='lastName'\n//                     value={values.lastName}\n//                     name='lastName'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     placeholder='Last Name'\n//                   />\n//                 </Stack>\n//                 {touched.lastName && typeof errors.lastName === 'string' && (\n//                   <FormHelperText error id='helper-text-lastname-signup'>\n//                     {errors.lastName}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='email'>Email Address*</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.email && errors.email)}\n//                     id='email'\n//                     type='email'\n//                     value={values.email}\n//                     name='email'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     placeholder='Email'\n//                   />\n//                 </Stack>\n//                 {touched.email && typeof errors.email === 'string' && (\n//                   <FormHelperText error id='helper-text-email-signup'>\n//                     {errors.email}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12} md={6}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='email'>Phone</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.phone && errors.phone)}\n//                     id='phone'\n//                     type='phone'\n//                     value={values.phone}\n//                     name='phone'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     placeholder='Phone Number'\n//                   />\n//                 </Stack>\n//                 {touched.phone && typeof errors.phone === 'string' && (\n//                   <FormHelperText error id='helper-text-phone-signup'>\n//                     {errors.phone}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='password'>Password*</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.password && errors.password)}\n//                     id='password'\n//                     type={showPassword ? 'text' : 'password'}\n//                     value={values.password}\n//                     name='password'\n//                     onBlur={handleBlur}\n//                     onChange={(e) => {\n//                       handleChange(e)\n//                       changePassword(e.target.value)\n//                     }}\n//                     endAdornment={\n//                       <InputAdornment position='end'>\n//                         <IconButton\n//                           aria-label='toggle password visibility'\n//                           onClick={handleClickShowPassword}\n//                           edge='end'\n//                           color='secondary'\n//                         >\n//                           {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n//                         </IconButton>\n//                       </InputAdornment>\n//                     }\n//                     placeholder='Enter password'\n//                   />\n//                 </Stack>\n//                 {values.password && (\n//                   <FormControl fullWidth sx={{ mt: 2 }}>\n//                     <Grid container spacing={2} alignItems='center'>\n//                       <Grid item>\n//                         <Box sx={{ bgcolor: level?.color, width: 200, height: 8, borderRadius: '7px' }} />\n//                       </Grid>\n//                       <Grid item>\n//                         <Typography variant='subtitle1' fontSize='0.75rem'>\n//                           {level?.label}\n//                         </Typography>\n//                       </Grid>\n//                     </Grid>\n//                   </FormControl>\n\n//                 )}\n//                 {!values.password && touched.password && typeof errors.password === 'string' && (\n//                   <FormHelperText error id='helper-text-password-signup'>\n//                     {errors.password}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='password-confirmation'>Comfirm Password</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.passwordConfirmation && errors.passwordConfirmation)}\n//                     id='passwordConfirmation'\n//                     type={showConfirmPassword ? 'text' : 'password'}\n//                     value={values.passwordConfirmation}\n//                     name='passwordConfirmation'\n//                     onBlur={handleBlur}\n//                     onChange={(e) => { handleChange(e) }}\n//                     endAdornment={\n//                       <InputAdornment position='end'>\n//                         <IconButton\n//                           aria-label='toggle password visibility'\n//                           onClick={handleClickShowConfirmPassword}\n//                           edge='end'\n//                           color='secondary'\n//                         >\n//                           {showConfirmPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n//                         </IconButton>\n//                       </InputAdornment>\n//                     }\n//                     placeholder='Enter password confirmation'\n//                   />\n//                 </Stack>\n//                 {touched.passwordConfirmation && typeof errors.passwordConfirmation === 'string' && (\n//                   <FormHelperText error id='helper-text-password-signup'>\n//                     {errors.passwordConfirmation}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Button\n//                   disableElevation\n//                   fullWidth disabled={loading}\n//                   size='large'\n//                   type='submit'\n//                   variant='contained'\n//                   sx={{\n//                     color: '#5bbff1'\n//                   }}\n//                 >\n//                   Create Account\n//                 </Button>\n//               </Grid>\n//               {showAuth && (\n//                 <Grid item xs={12}>\n//                   <Omniauth title=\"Sign up with\" />\n//                 </Grid>\n//               )}\n//             </Grid>\n//           </form>\n//         </>\n//       )}\n//     </Formik>\n//   )\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}