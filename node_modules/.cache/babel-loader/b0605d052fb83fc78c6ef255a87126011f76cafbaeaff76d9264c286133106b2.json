{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport { useState } from 'react';\nimport { isFunction } from '@aws-amplify/ui';\nimport { filterAllowedFiles } from './filterAllowedFiles.mjs';\nfunction useDropZone(_ref) {\n  let onDropComplete = _ref.onDropComplete,\n    _onDragEnter = _ref.onDragEnter,\n    _onDragLeave = _ref.onDragLeave,\n    _onDragOver = _ref.onDragOver,\n    _onDragStart = _ref.onDragStart,\n    _onDrop = _ref.onDrop,\n    _ref$acceptedFileType = _ref.acceptedFileTypes,\n    acceptedFileTypes = _ref$acceptedFileType === void 0 ? [] : _ref$acceptedFileType;\n  const _useState = useState('inactive'),\n    _useState2 = _slicedToArray(_useState, 2),\n    dragState = _useState2[0],\n    setDragState = _useState2[1];\n  const onDragStart = event => {\n    event.dataTransfer.clearData();\n    if (isFunction(_onDragStart)) {\n      _onDragStart(event);\n    }\n  };\n  const onDragEnter = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    if (isFunction(_onDragEnter)) {\n      _onDragEnter(event);\n    }\n  };\n  const onDragLeave = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setDragState('inactive');\n    if (isFunction(_onDragLeave)) {\n      _onDragLeave(event);\n    }\n  };\n  const onDragOver = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    event.dataTransfer.dropEffect = 'copy';\n    if (isFunction(_onDragOver)) {\n      _onDragOver(event);\n    }\n    const files = Array.from(event.dataTransfer.items).map(_ref2 => {\n      let kind = _ref2.kind,\n        type = _ref2.type;\n      return {\n        kind,\n        type\n      };\n    });\n    const _filterAllowedFiles = filterAllowedFiles(files, acceptedFileTypes),\n      rejectedFiles = _filterAllowedFiles.rejectedFiles;\n    setDragState(rejectedFiles.length > 0 ? 'reject' : 'accept');\n  };\n  const onDrop = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    setDragState('inactive');\n    const files = Array.from(event.dataTransfer.files);\n    const _filterAllowedFiles2 = filterAllowedFiles(files, acceptedFileTypes),\n      acceptedFiles = _filterAllowedFiles2.acceptedFiles,\n      rejectedFiles = _filterAllowedFiles2.rejectedFiles;\n    if (isFunction(_onDrop)) {\n      _onDrop(event);\n    }\n    if (isFunction(onDropComplete)) {\n      onDropComplete({\n        acceptedFiles,\n        rejectedFiles\n      });\n    }\n  };\n  return {\n    onDragStart,\n    onDragEnter,\n    onDragLeave,\n    onDragOver,\n    onDrop,\n    dragState\n  };\n}\nexport { useDropZone };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}