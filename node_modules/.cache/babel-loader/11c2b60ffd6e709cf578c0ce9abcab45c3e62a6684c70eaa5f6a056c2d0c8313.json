{"ast":null,"code":"const _excluded = [\"className\", \"as\", \"fill\", \"pathData\", \"viewBox\", \"children\", \"paths\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport * as React from 'react';\nimport { classNames, ComponentClassName } from '@aws-amplify/ui';\nimport { View } from '../View/View.mjs';\nimport { primitiveWithForwardRef } from '../utils/primitiveWithForwardRef.mjs';\nconst defaultViewBox = {\n  minX: 0,\n  minY: 0,\n  width: 24,\n  height: 24\n};\nconst IconPrimitive = (_ref, ref) => {\n  let className = _ref.className,\n    _ref$as = _ref.as,\n    as = _ref$as === void 0 ? 'svg' : _ref$as,\n    _ref$fill = _ref.fill,\n    fill = _ref$fill === void 0 ? 'currentColor' : _ref$fill,\n    pathData = _ref.pathData,\n    _ref$viewBox = _ref.viewBox,\n    viewBox = _ref$viewBox === void 0 ? defaultViewBox : _ref$viewBox,\n    children = _ref.children,\n    paths = _ref.paths,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const minX = viewBox.minX ? viewBox.minX : defaultViewBox.minX;\n  const minY = viewBox.minY ? viewBox.minY : defaultViewBox.minY;\n  const width = viewBox.width ? viewBox.width : defaultViewBox.width;\n  const height = viewBox.height ? viewBox.height : defaultViewBox.height;\n  // An icon can be drawn in 3 ways:\n  // 1. Pass it children which should be valid SVG elements\n  // 2. Pass an array of path-like objects to `paths` prop\n  // 3. Supply `pathData` for a simple icons\n  let _children;\n  if (children) {\n    _children = children;\n  }\n  if (paths) {\n    _children = paths.map((path, index) => /*#__PURE__*/React.createElement(\"path\", _objectSpread(_objectSpread({}, path), {}, {\n      key: index\n    })));\n  }\n  if (pathData) {\n    _children = /*#__PURE__*/React.createElement(\"path\", {\n      d: pathData,\n      fill: fill\n    });\n  }\n  return /*#__PURE__*/React.createElement(View, _objectSpread({\n    as: as,\n    className: classNames(ComponentClassName.Icon, className),\n    ref: ref,\n    viewBox: `${minX} ${minY} ${width} ${height}`\n  }, rest), _children);\n};\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/components/icon)\n */\nconst Icon = primitiveWithForwardRef(IconPrimitive);\nIcon.displayName = 'Icon';\nexport { Icon };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}