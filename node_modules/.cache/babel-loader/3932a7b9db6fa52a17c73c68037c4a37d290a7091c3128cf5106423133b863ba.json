{"ast":null,"code":"import { strHasLength } from '../shared/utils.mjs';\n\n/**\n * Slice a collection based on page index (starting at 1)\n */\nconst getItemsAtPage = (items, page, itemsPerPage) => {\n  if (page < 1 || itemsPerPage < 1) {\n    return [];\n  }\n  const startIndex = (page - 1) * itemsPerPage;\n  return items.slice(startIndex, startIndex + itemsPerPage);\n};\n/**\n * Recursively find a keyword within an object (case insensitive)\n */\nconst itemHasText = (item, text) => {\n  if (strHasLength(item)) {\n    return item.toLowerCase().includes(text.toLowerCase());\n  }\n  if (typeof item === 'object' && item !== null) {\n    return Object.values(item).some(subItem => itemHasText(subItem, text));\n  }\n  return false;\n};\n/**\n * Computes the amount of available pages\n */\nconst getPageCount = (totalItems, itemsPerPage) => Math.ceil(totalItems / itemsPerPage);\nexport { getItemsAtPage, getPageCount, itemHasText };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}