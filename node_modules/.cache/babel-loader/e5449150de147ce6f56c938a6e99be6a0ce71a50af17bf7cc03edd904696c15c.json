{"ast":null,"code":"import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\nclass AnimationFeature extends Feature {\n  /**\n   * We dynamically generate the AnimationState manager as it contains a reference\n   * to the underlying animation library. We only want to load that if we load this,\n   * so people can optionally code split it out using the `m` component.\n   */\n  constructor(node) {\n    super(node);\n    node.animationState || (node.animationState = createAnimationState(node));\n  }\n  updateAnimationControlsSubscription() {\n    const _this$node$getProps = this.node.getProps(),\n      animate = _this$node$getProps.animate;\n    this.unmount();\n    if (isAnimationControls(animate)) {\n      this.unmount = animate.subscribe(this.node);\n    }\n  }\n  /**\n   * Subscribe any provided AnimationControls to the component's VisualElement\n   */\n  mount() {\n    this.updateAnimationControlsSubscription();\n  }\n  update() {\n    const _this$node$getProps2 = this.node.getProps(),\n      animate = _this$node$getProps2.animate;\n    const _ref = this.node.prevProps || {},\n      prevAnimate = _ref.animate;\n    if (animate !== prevAnimate) {\n      this.updateAnimationControlsSubscription();\n    }\n  }\n  unmount() {}\n}\nexport { AnimationFeature };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}