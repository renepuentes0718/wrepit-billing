{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../useCompound';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOption API](https://mui.com/base-ui/react-select/hooks-api/#use-option)\n */\nexport function useOption(params) {\n  const value = params.value,\n    label = params.label,\n    disabled = params.disabled,\n    optionRefParam = params.rootRef,\n    idParam = params.id;\n  const _useListItem = useListItem({\n      item: value\n    }),\n    getListItemProps = _useListItem.getRootProps,\n    highlighted = _useListItem.highlighted,\n    selected = _useListItem.selected;\n  const _useButton = useButton({\n      disabled,\n      focusableWhenDisabled: true\n    }),\n    getButtonProps = _useButton.getRootProps,\n    buttonRefHandler = _useButton.rootRef;\n  const id = useId(idParam);\n  const optionRef = React.useRef(null);\n  const selectOption = React.useMemo(() => ({\n    disabled,\n    label,\n    value,\n    ref: optionRef,\n    id\n  }), [disabled, label, value, id]);\n  const _useCompoundItem = useCompoundItem(value, selectOption),\n    index = _useCompoundItem.index;\n  const handleRef = useForkRef(optionRefParam, optionRef, buttonRefHandler);\n  const createHandleKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ([' ', 'Enter'].includes(event.key)) {\n      event.defaultMuiPrevented = true; // prevent listbox onKeyDown\n    }\n  };\n  const getOwnHandlers = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      onKeyDown: createHandleKeyDown(otherHandlers)\n    };\n  };\n  return {\n    getRootProps: function () {\n      let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const externalEventHandlers = extractEventHandlers(externalProps);\n      const getCombinedRootProps = combineHooksSlotProps(getListItemProps, combineHooksSlotProps(getButtonProps, getOwnHandlers));\n      return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {\n        id,\n        ref: handleRef,\n        role: 'option',\n        'aria-selected': selected\n      });\n    },\n    highlighted,\n    index,\n    selected,\n    rootRef: handleRef\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}