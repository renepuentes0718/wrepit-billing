{"ast":null,"code":"import * as React from \"rehackt\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useReadQuery(queryRef) {\n  var unwrapped = unwrapQueryRef(queryRef);\n  return wrapHook(\"useReadQuery\", _useReadQuery, unwrapped ? unwrapped[\"observable\"]\n  // in the case of a \"transported\" queryRef object, we need to use the\n  // client that's available to us at the current position in the React tree\n  // that ApolloClient will then have the job to recreate a real queryRef from\n  // the transported object\n  // This is just a context read - it's fine to do this conditionally.\n  // This hook wrapper also shouldn't be optimized by React Compiler.\n  // eslint-disable-next-line react-compiler/react-compiler\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  : useApolloClient())(queryRef);\n}\nfunction _useReadQuery(queryRef) {\n  assertWrappedQueryRef(queryRef);\n  var internalQueryRef = React.useMemo(function () {\n    return unwrapQueryRef(queryRef);\n  }, [queryRef]);\n  var getPromise = React.useCallback(function () {\n    return getWrappedPromise(queryRef);\n  }, [queryRef]);\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n  React.useEffect(function () {\n    return internalQueryRef.retain();\n  }, [internalQueryRef]);\n  var promise = useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    return internalQueryRef.listen(function (promise) {\n      updateWrappedQueryRef(queryRef, promise);\n      forceUpdate();\n    });\n  }, [internalQueryRef, queryRef]), getPromise, getPromise);\n  var result = __use(promise);\n  return React.useMemo(function () {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result)\n    };\n  }, [result]);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}