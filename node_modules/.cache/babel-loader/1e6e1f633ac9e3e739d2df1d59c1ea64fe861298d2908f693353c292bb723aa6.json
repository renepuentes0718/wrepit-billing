{"ast":null,"code":"function filterAllowedFiles(files, acceptedFileTypes) {\n  // Allow any files if acceptedFileTypes is undefined, empty array, or contains '*'\n  if (!acceptedFileTypes || acceptedFileTypes.length === 0 || acceptedFileTypes.includes('*')) {\n    return {\n      acceptedFiles: files,\n      rejectedFiles: []\n    };\n  }\n  const acceptedFiles = [];\n  const rejectedFiles = [];\n  function filterFile(file) {\n    const _file$type = file.type,\n      type = _file$type === void 0 ? '' : _file$type,\n      _file$name = file.name,\n      name = _file$name === void 0 ? '' : _file$name;\n    const mimeType = type.toLowerCase();\n    const baseMimeType = mimeType.split('/')[0];\n    return acceptedFileTypes.some(type => {\n      const validType = type.trim().toLowerCase();\n      // if the accepted file type is a file extension\n      // it will start with '.', check against the file name\n      if (validType.charAt(0) === '.') {\n        return name.toLowerCase().endsWith(validType);\n      }\n      // This is something like a image/* mime type\n      if (validType.endsWith('/*')) {\n        return baseMimeType === validType.split('/')[0];\n      }\n      return mimeType === validType;\n    });\n  }\n  files.forEach(file => {\n    (filterFile(file) ? acceptedFiles : rejectedFiles).push(file);\n  });\n  return {\n    acceptedFiles,\n    rejectedFiles\n  };\n}\nexport { filterAllowedFiles };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}