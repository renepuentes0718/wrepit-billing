{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport * as React from 'react';\nimport { isFunction } from '@aws-amplify/ui';\nimport { ESCAPE_KEY, ENTER_KEY } from '../shared/constants.mjs';\nimport { useComposeRefsCallback } from '../../hooks/useComposeRefsCallback.mjs';\nconst DEFAULT_KEYS = new Set([ESCAPE_KEY, ENTER_KEY]);\nconst useSearchField = _ref => {\n  let _ref$defaultValue = _ref.defaultValue,\n    defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,\n    value = _ref.value,\n    onChange = _ref.onChange,\n    onClear = _ref.onClear,\n    onSubmit = _ref.onSubmit,\n    externalRef = _ref.externalRef;\n  const isControlled = value !== undefined;\n  const _React$useState = React.useState(defaultValue),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    internalValue = _React$useState2[0],\n    setInternalValue = _React$useState2[1];\n  const composedValue = isControlled ? value : internalValue;\n  const internalRef = React.useRef(null);\n  const composedRefs = useComposeRefsCallback({\n    externalRef,\n    internalRef\n  });\n  const onClearHandler = React.useCallback(() => {\n    if (!isControlled) {\n      setInternalValue('');\n    }\n    internalRef?.current?.focus();\n    if (isFunction(onClear)) {\n      onClear();\n    }\n  }, [isControlled, setInternalValue, onClear]);\n  const onSubmitHandler = React.useCallback(value => {\n    if (isFunction(onSubmit)) {\n      onSubmit(value);\n    }\n  }, [onSubmit]);\n  const onKeyDown = React.useCallback(event => {\n    const key = event.key;\n    if (!DEFAULT_KEYS.has(key)) {\n      return;\n    }\n    event.preventDefault();\n    if (key === ESCAPE_KEY) {\n      onClearHandler();\n    } else if (key === ENTER_KEY) {\n      onSubmitHandler(composedValue);\n    }\n  }, [composedValue, onClearHandler, onSubmitHandler]);\n  const handleOnChange = React.useCallback(event => {\n    if (!isControlled) {\n      setInternalValue(event.target.value);\n    }\n    if (isFunction(onChange)) {\n      onChange(event);\n    }\n  }, [isControlled, onChange, setInternalValue]);\n  const onClick = React.useCallback(() => {\n    onSubmitHandler(composedValue);\n  }, [onSubmitHandler, composedValue]);\n  return {\n    composedValue,\n    onClearHandler,\n    onKeyDown,\n    onClick,\n    handleOnChange,\n    composedRefs\n  };\n};\nexport { useSearchField };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}