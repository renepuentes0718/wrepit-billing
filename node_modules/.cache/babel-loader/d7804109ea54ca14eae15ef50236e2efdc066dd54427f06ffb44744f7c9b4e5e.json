{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { Amplify, CookieStorage, defaultStorage } from '@aws-amplify/core';\nimport { parseAmplifyConfig } from '@aws-amplify/core/internals/utils';\nimport { cognitoUserPoolsTokenProvider, cognitoCredentialsProvider } from '@aws-amplify/auth/cognito';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst DefaultAmplify = {\n  /**\n   * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.\n   *\n   * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the\n   * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.\n   * @param libraryOptions The {@link LibraryOptions} additional options for the library.\n   *\n   * @example\n   * import config from './amplifyconfiguration.json';\n   *\n   * Amplify.configure(config);\n   */\n  configure(resourceConfig, libraryOptions) {\n    const resolvedResourceConfig = parseAmplifyConfig(resourceConfig);\n    // If no Auth config is provided, no special handling will be required, configure as is.\n    // Otherwise, we can assume an Auth config is provided from here on.\n    if (!resolvedResourceConfig.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If Auth options are provided, always just configure as is.\n    // Otherwise, we can assume no Auth libraryOptions were provided from here on.\n    if (libraryOptions?.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If no Auth libraryOptions were previously configured, then always add default providers.\n    if (!Amplify.libraryOptions.Auth) {\n      cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);\n      cognitoUserPoolsTokenProvider.setKeyValueStorage(\n      // TODO: allow configure with a public interface\n      libraryOptions?.ssr ? new CookieStorage({\n        sameSite: 'lax'\n      }) : defaultStorage);\n      Amplify.configure(resolvedResourceConfig, _objectSpread(_objectSpread({}, libraryOptions), {}, {\n        Auth: {\n          tokenProvider: cognitoUserPoolsTokenProvider,\n          credentialsProvider: cognitoCredentialsProvider\n        }\n      }));\n      return;\n    }\n    // At this point, Auth libraryOptions would have been previously configured and no overriding\n    // Auth options were given, so we should preserve the currently configured Auth libraryOptions.\n    if (libraryOptions) {\n      // If ssr is provided through libraryOptions, we should respect the intentional reconfiguration.\n      if (libraryOptions.ssr !== undefined) {\n        cognitoUserPoolsTokenProvider.setKeyValueStorage(\n        // TODO: allow configure with a public interface\n        libraryOptions.ssr ? new CookieStorage({\n          sameSite: 'lax'\n        }) : defaultStorage);\n      }\n      Amplify.configure(resolvedResourceConfig, _objectSpread({\n        Auth: Amplify.libraryOptions.Auth\n      }, libraryOptions));\n      return;\n    }\n    // Finally, if there were no libraryOptions given at all, we should simply not touch the currently\n    // configured libraryOptions.\n    Amplify.configure(resolvedResourceConfig);\n  },\n  /**\n   * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling\n   * `Amplify.configure`.\n   *\n   * @returns An {@link ResourcesConfig} object.\n   */\n  getConfig() {\n    return Amplify.getConfig();\n  }\n};\nexport { DefaultAmplify };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}