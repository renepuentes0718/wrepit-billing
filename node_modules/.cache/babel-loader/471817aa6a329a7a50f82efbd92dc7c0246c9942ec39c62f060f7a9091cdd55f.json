{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { useTabsContext } from '../Tabs';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\nimport { useCompoundItem } from '../useCompound';\nimport { useListItem } from '../useList';\nimport { useButton } from '../useButton';\nimport { combineHooksSlotProps } from '../utils/combineHooksSlotProps';\nfunction tabValueGenerator(otherTabValues) {\n  return otherTabValues.size;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab)\n */\nfunction useTab(parameters) {\n  const valueParam = parameters.value,\n    externalRef = parameters.rootRef,\n    _parameters$disabled = parameters.disabled,\n    disabled = _parameters$disabled === void 0 ? false : _parameters$disabled,\n    idParam = parameters.id;\n  const tabRef = React.useRef(null);\n  const id = useId(idParam);\n  const _useTabsContext = useTabsContext(),\n    selectedValue = _useTabsContext.value,\n    selectionFollowsFocus = _useTabsContext.selectionFollowsFocus,\n    getTabPanelId = _useTabsContext.getTabPanelId;\n  const tabMetadata = React.useMemo(() => ({\n    disabled,\n    ref: tabRef,\n    id\n  }), [disabled, tabRef, id]);\n  const _useCompoundItem = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata),\n    value = _useCompoundItem.id,\n    index = _useCompoundItem.index,\n    totalTabsCount = _useCompoundItem.totalItemCount;\n  const _useListItem = useListItem({\n      item: value\n    }),\n    getTabProps = _useListItem.getRootProps,\n    highlighted = _useListItem.highlighted,\n    selected = _useListItem.selected;\n  const _useButton = useButton({\n      disabled,\n      focusableWhenDisabled: !selectionFollowsFocus,\n      type: 'button'\n    }),\n    getButtonProps = _useButton.getRootProps,\n    buttonRefHandler = _useButton.rootRef,\n    active = _useButton.active,\n    focusVisible = _useButton.focusVisible,\n    setFocusVisible = _useButton.setFocusVisible;\n  const handleRef = useForkRef(tabRef, externalRef, buttonRefHandler);\n  const tabPanelId = value !== undefined ? getTabPanelId(value) : undefined;\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const getCombinedRootProps = combineHooksSlotProps(getTabProps, getButtonProps);\n    return _extends({}, externalProps, getCombinedRootProps(externalEventHandlers), {\n      role: 'tab',\n      'aria-controls': tabPanelId,\n      'aria-selected': selected,\n      id,\n      ref: handleRef\n    });\n  };\n  return {\n    getRootProps,\n    active,\n    focusVisible,\n    highlighted,\n    index,\n    rootRef: handleRef,\n    // the `selected` state isn't set on the server (it relies on effects to be calculated),\n    // so we fall back to checking the `value` prop with the selectedValue from the TabsContext\n    selected: selected || value === selectedValue,\n    setFocusVisible,\n    totalTabsCount\n  };\n}\nexport { useTab };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}