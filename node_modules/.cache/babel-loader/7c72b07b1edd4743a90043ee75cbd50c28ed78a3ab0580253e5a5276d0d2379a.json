{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const _theme$colorSchemes = theme.colorSchemes,\n    colorSchemes = _theme$colorSchemes === void 0 ? {} : _theme$colorSchemes,\n    _theme$defaultColorSc = theme.defaultColorScheme,\n    defaultColorScheme = _theme$defaultColorSc === void 0 ? 'light' : _theme$defaultColorSc,\n    otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n  const _cssVarsParser = cssVarsParser(otherTheme, parserConfig),\n    rootVars = _cssVarsParser.vars,\n    rootCss = _cssVarsParser.css,\n    rootVarsWithDefaults = _cssVarsParser.varsWithDefaults;\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const light = colorSchemes[defaultColorScheme],\n    otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const _cssVarsParser2 = cssVarsParser(scheme, parserConfig),\n      vars = _cssVarsParser2.vars,\n      css = _cssVarsParser2.css,\n      varsWithDefaults = _cssVarsParser2.varsWithDefaults;\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    const _cssVarsParser3 = cssVarsParser(light, parserConfig),\n      css = _cssVarsParser3.css,\n      vars = _cssVarsParser3.vars,\n      varsWithDefaults = _cssVarsParser3.varsWithDefaults;\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    var _parserConfig$getSele2;\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n      const css = _extends({}, rootCss);\n      return {\n        css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css)) || ':root'\n      };\n    }\n    const css = _extends({}, colorSchemesMap[colorScheme].css);\n    return {\n      css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}