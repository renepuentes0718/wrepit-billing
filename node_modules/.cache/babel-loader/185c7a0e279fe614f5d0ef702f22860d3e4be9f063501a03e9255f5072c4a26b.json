{"ast":null,"code":"const _excluded = [\"className\", \"dialCodeList\", \"isReadOnly\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport * as React from 'react';\nimport { classNames, ComponentClassName, countryDialCodes } from '@aws-amplify/ui';\nimport { SelectField } from '../SelectField/SelectField.mjs';\nimport { primitiveWithForwardRef } from '../utils/primitiveWithForwardRef.mjs';\nconst DialCodeSelectPrimitive = (_ref, ref) => {\n  let className = _ref.className,\n    dialCodeList = _ref.dialCodeList,\n    isReadOnly = _ref.isReadOnly,\n    props = _objectWithoutProperties(_ref, _excluded);\n  const dialList = dialCodeList ?? countryDialCodes;\n  const dialCodeOptions = React.useMemo(() => dialList.map(dialCode => (\n  /*#__PURE__*/\n  // Regarding the `disabled` attribute, see comment in SelectField below\n  React.createElement(\"option\", {\n    key: dialCode,\n    value: dialCode,\n    disabled: isReadOnly\n  }, dialCode))), [dialList, isReadOnly]);\n  return /*#__PURE__*/React.createElement(SelectField\n  /*\n      Since <select> elements do not support the `readonly` html attribute, it is suggested to use the `disabled` html attribute\n      so that a screen reader will announce something to the user about the interactivity of the options list ( https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)\n    */, _objectSpread({\n    \"aria-disabled\": isReadOnly,\n    autoComplete: \"tel-country-code\",\n    className: classNames(ComponentClassName.CountryCodeSelect, ComponentClassName.DialCodeSelect, className),\n    labelHidden: true,\n    ref: ref\n  }, props), dialCodeOptions);\n};\nconst DialCodeSelect = primitiveWithForwardRef(DialCodeSelectPrimitive);\nDialCodeSelect.displayName = 'DialCodeSelect';\nexport { DialCodeSelect };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}