{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useTabsContext } from '../Tabs';\nimport { TabsListActionTypes } from './useTabsList.types';\nimport { useCompoundParent } from '../useCompound';\nimport { useList } from '../useList';\nimport { tabsListReducer } from './tabsListReducer';\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTabsList API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tabs-list)\n */\nfunction useTabsList(parameters) {\n  var _selectedValues$;\n  const externalRef = parameters.rootRef;\n  const _useTabsContext = useTabsContext(),\n    _useTabsContext$direc = _useTabsContext.direction,\n    direction = _useTabsContext$direc === void 0 ? 'ltr' : _useTabsContext$direc,\n    onSelected = _useTabsContext.onSelected,\n    _useTabsContext$orien = _useTabsContext.orientation,\n    orientation = _useTabsContext$orien === void 0 ? 'horizontal' : _useTabsContext$orien,\n    value = _useTabsContext.value,\n    registerTabIdLookup = _useTabsContext.registerTabIdLookup,\n    selectionFollowsFocus = _useTabsContext.selectionFollowsFocus;\n  const _useCompoundParent = useCompoundParent(),\n    subitems = _useCompoundParent.subitems,\n    compoundComponentContextValue = _useCompoundParent.contextValue;\n  const tabIdLookup = React.useCallback(tabValue => {\n    var _subitems$get;\n    return (_subitems$get = subitems.get(tabValue)) == null ? void 0 : _subitems$get.id;\n  }, [subitems]);\n  registerTabIdLookup(tabIdLookup);\n  const subitemKeys = React.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getTabElement = React.useCallback(tabValue => {\n    var _subitems$get$ref$cur, _subitems$get2;\n    if (tabValue == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get2 = subitems.get(tabValue)) == null ? void 0 : _subitems$get2.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const isRtl = direction === 'rtl';\n  let listOrientation;\n  if (orientation === 'vertical') {\n    listOrientation = 'vertical';\n  } else {\n    listOrientation = isRtl ? 'horizontal-rtl' : 'horizontal-ltr';\n  }\n  const handleChange = React.useCallback((event, newValue) => {\n    var _newValue$;\n    onSelected(event, (_newValue$ = newValue[0]) != null ? _newValue$ : null);\n  }, [onSelected]);\n  const controlledProps = React.useMemo(() => {\n    if (value === undefined) {\n      return {};\n    }\n    return value != null ? {\n      selectedValues: [value]\n    } : {\n      selectedValues: []\n    };\n  }, [value]);\n  const isItemDisabled = React.useCallback(item => {\n    var _subitems$get$disable, _subitems$get3;\n    return (_subitems$get$disable = (_subitems$get3 = subitems.get(item)) == null ? void 0 : _subitems$get3.disabled) != null ? _subitems$get$disable : false;\n  }, [subitems]);\n  const _useList = useList({\n      controlledProps,\n      disabledItemsFocusable: !selectionFollowsFocus,\n      focusManagement: 'DOM',\n      getItemDomElement: getTabElement,\n      isItemDisabled,\n      items: subitemKeys,\n      rootRef: externalRef,\n      onChange: handleChange,\n      orientation: listOrientation,\n      reducerActionContext: React.useMemo(() => ({\n        selectionFollowsFocus: selectionFollowsFocus || false\n      }), [selectionFollowsFocus]),\n      selectionMode: 'single',\n      stateReducer: tabsListReducer\n    }),\n    listContextValue = _useList.contextValue,\n    dispatch = _useList.dispatch,\n    getListboxRootProps = _useList.getRootProps,\n    _useList$state = _useList.state,\n    highlightedValue = _useList$state.highlightedValue,\n    selectedValues = _useList$state.selectedValues,\n    mergedRootRef = _useList.rootRef;\n  React.useEffect(() => {\n    if (value === undefined) {\n      return;\n    }\n\n    // when a value changes externally, the highlighted value should be synced to it\n    if (value != null) {\n      dispatch({\n        type: TabsListActionTypes.valueChange,\n        value\n      });\n    }\n  }, [dispatch, value]);\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, externalProps, getListboxRootProps(externalProps), {\n      'aria-orientation': orientation === 'vertical' ? 'vertical' : undefined,\n      role: 'tablist'\n    });\n  };\n  const contextValue = React.useMemo(() => _extends({}, compoundComponentContextValue, listContextValue), [compoundComponentContextValue, listContextValue]);\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    highlightedValue,\n    isRtl,\n    orientation,\n    rootRef: mergedRootRef,\n    selectedValue: (_selectedValues$ = selectedValues[0]) != null ? _selectedValues$ : null\n  };\n}\nexport { useTabsList };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}