{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// import React, { StrictMode } from 'react'\n// import { createRoot } from 'react-dom/client'\n// import { RouterProvider } from 'react-router-dom'\n// import { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\"\n// import router from '../components/routes/Index'\n\n// document.addEventListener('DOMContentLoaded', () => {\n//   const rootElement = document.getElementById('root')\n//   const root = createRoot(rootElement)\n\n//   // const link = createHttpLink({\n//   //   uri: 'http://localhost:5000/graphql',\n//   //   headers: {\n//   //     'Content-Type': 'application/json',\n//   //     'X-CSRF-Token': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n//   //   },\n//   // })\n\n//   // const client = new ApolloClient({\n//   //   cache: new InMemoryCache(),\n//   //   link,\n//   // })\n\n//   import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client'\n// import { createUploadLink } from 'apollo-upload-client'\n\n// const client = new ApolloClient({\n//   link: createUploadLink({ uri: 'http://localhost:3000/graphql' }),\n//   cache: new InMemoryCache(),\n// });\n\n//   root.render(\n//     <ApolloProvider client={client}>\n//       <StrictMode>\n//         <RouterProvider router={router} />\n//       </StrictMode>\n//     </ApolloProvider>\n//   )\n// })\n\nimport { createUploadLink } from 'apollo-upload-client';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\n// Function to get CSRF token from meta tag\nvar getCsrfToken = function getCsrfToken() {\n  return document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n};\n\n// Create an upload link\nvar uploadLink = createUploadLink({\n  uri: 'http://localhost:5000/graphql'\n});\n\n// Create a middleware link to set the headers\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  // Get the csrf token\n  var csrfToken = getCsrfToken();\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      'X-CSRF-Token': csrfToken\n    })\n  };\n});\n\n// Combine the links\nvar client = new ApolloClient({\n  link: authLink.concat(uploadLink),\n  cache: new InMemoryCache()\n});","map":{"version":3,"names":["createUploadLink","ApolloClient","InMemoryCache","setContext","getCsrfToken","document","querySelector","getAttribute","uploadLink","uri","authLink","_","_ref","headers","csrfToken","_objectSpread","client","link","concat","cache"],"sources":["/Users/admin/Desktop/project-ges/app/javascript/packs/wrepit.tsx"],"sourcesContent":["// import React, { StrictMode } from 'react'\n// import { createRoot } from 'react-dom/client'\n// import { RouterProvider } from 'react-router-dom'\n// import { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\"\n// import router from '../components/routes/Index'\n\n// document.addEventListener('DOMContentLoaded', () => {\n//   const rootElement = document.getElementById('root')\n//   const root = createRoot(rootElement)\n\n//   // const link = createHttpLink({\n//   //   uri: 'http://localhost:5000/graphql',\n//   //   headers: {\n//   //     'Content-Type': 'application/json',\n//   //     'X-CSRF-Token': document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n//   //   },\n//   // })\n\n//   // const client = new ApolloClient({\n//   //   cache: new InMemoryCache(),\n//   //   link,\n//   // })\n\n//   import { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client'\n// import { createUploadLink } from 'apollo-upload-client'\n\n// const client = new ApolloClient({\n//   link: createUploadLink({ uri: 'http://localhost:3000/graphql' }),\n//   cache: new InMemoryCache(),\n// });\n\n\n//   root.render(\n//     <ApolloProvider client={client}>\n//       <StrictMode>\n//         <RouterProvider router={router} />\n//       </StrictMode>\n//     </ApolloProvider>\n//   )\n// })\n\nimport { createUploadLink } from 'apollo-upload-client'\nimport { ApolloClient, InMemoryCache } from '@apollo/client'\nimport { setContext } from '@apollo/client/link/context'\n\n// Function to get CSRF token from meta tag\nconst getCsrfToken = () => {\n  return document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n}\n\n// Create an upload link\nconst uploadLink = createUploadLink({\n  uri: 'http://localhost:5000/graphql',\n})\n\n// Create a middleware link to set the headers\nconst authLink = setContext((_, { headers }) => {\n  // Get the csrf token\n  const csrfToken = getCsrfToken()\n  return {\n    headers: {\n      ...headers,\n      'X-CSRF-Token': csrfToken,\n    }\n  }\n})\n\n// Combine the links\nconst client = new ApolloClient({\n  link: authLink.concat(uploadLink),\n  cache: new InMemoryCache(),\n})\n\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,YAAY,EAAEC,aAAa,QAAQ,gBAAgB;AAC5D,SAASC,UAAU,QAAQ,6BAA6B;;AAExD;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACzB,OAAOC,QAAQ,CAACC,aAAa,CAAC,yBAAyB,CAAC,CAACC,YAAY,CAAC,SAAS,CAAC;AAClF,CAAC;;AAED;AACA,IAAMC,UAAU,GAAGR,gBAAgB,CAAC;EAClCS,GAAG,EAAE;AACP,CAAC,CAAC;;AAEF;AACA,IAAMC,QAAQ,GAAGP,UAAU,CAAC,UAACQ,CAAC,EAAAC,IAAA,EAAkB;EAAA,IAAdC,OAAO,GAAAD,IAAA,CAAPC,OAAO;EACvC;EACA,IAAMC,SAAS,GAAGV,YAAY,CAAC,CAAC;EAChC,OAAO;IACLS,OAAO,EAAAE,aAAA,CAAAA,aAAA,KACFF,OAAO;MACV,cAAc,EAAEC;IAAS;EAE7B,CAAC;AACH,CAAC,CAAC;;AAEF;AACA,IAAME,MAAM,GAAG,IAAIf,YAAY,CAAC;EAC9BgB,IAAI,EAAEP,QAAQ,CAACQ,MAAM,CAACV,UAAU,CAAC;EACjCW,KAAK,EAAE,IAAIjB,aAAa,CAAC;AAC3B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}