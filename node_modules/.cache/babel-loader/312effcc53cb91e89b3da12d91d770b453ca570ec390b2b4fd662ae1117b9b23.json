{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { defaultTheme } from '@aws-amplify/ui';\nimport { objectKeys } from '../utils.mjs';\nconst getClosestValueByBreakpoint = _ref => {\n  let breakpoint = _ref.breakpoint,\n    breakpoints = _ref.breakpoints,\n    values = _ref.values;\n  const value = values[breakpoint];\n  // Check if breakpoint exists in values\n  if (value !== undefined) {\n    return value;\n  }\n  // Otherwise use a lower breakpoint value\n  const breakpointsDesc = objectKeys(breakpoints).sort((a, b) => breakpoints[b] - breakpoints[a]);\n  const lowerBreakpoints = breakpointsDesc.slice(breakpointsDesc.indexOf(breakpoint));\n  for (const breakpoint of lowerBreakpoints) {\n    // Check if breakpoint exists in values\n    const value = values[breakpoint];\n    if (value !== undefined) {\n      return value;\n    }\n  }\n  return null;\n};\n/**\n * This takes an object and will return an object that only has the\n * breakpoint keys\n * @param obj\n * @returns\n */\nconst valueObjToBreakpoints = obj => {\n  return objectKeys(obj).reduce((acc, key) => key in defaultTheme.breakpoints.values ? _objectSpread(_objectSpread({}, acc), {}, {\n    [key]: obj[key]\n  }) : acc, {});\n};\nconst getValueAtCurrentBreakpoint = _ref2 => {\n  let breakpoint = _ref2.breakpoint,\n    breakpoints = _ref2.breakpoints,\n    values = _ref2.values;\n  let breakpointCompatValues = {};\n  const breakpointsAscending = objectKeys(breakpoints).sort((a, b) => breakpoints[a] - breakpoints[b]);\n  if (Array.isArray(values)) {\n    values.forEach((value, index) => {\n      breakpointCompatValues[breakpointsAscending[index]] = value;\n    });\n  } else if (typeof values === 'object') {\n    breakpointCompatValues = valueObjToBreakpoints(values);\n  }\n  return getClosestValueByBreakpoint({\n    breakpoint,\n    breakpoints,\n    values: breakpointCompatValues\n  });\n};\nexport { getValueAtCurrentBreakpoint };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}