{"ast":null,"code":"const _excluded = [\"className\", \"emptyColor\", \"emptyIcon\", \"fillColor\", \"icon\", \"maxValue\", \"size\", \"value\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport * as React from 'react';\nimport { classNameModifier, ComponentClassName, classNames } from '@aws-amplify/ui';\nimport { Flex } from '../Flex/Flex.mjs';\nimport '../Icon/Icon.mjs';\nimport '../Icon/context/IconsContext.mjs';\nimport { useIcons } from '../Icon/context/useIcons.mjs';\nimport '../View/View.mjs';\nimport { IconStar } from '../Icon/icons/IconStar.mjs';\nimport { isIconFilled, isIconEmpty, isIconMixed } from './utils.mjs';\nimport { RatingIcon } from './RatingIcon.mjs';\nimport { RatingMixedIcon } from './RatingMixedIcon.mjs';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.mjs';\nimport { primitiveWithForwardRef } from '../utils/primitiveWithForwardRef.mjs';\nconst RATING_DEFAULT_MAX_VALUE = 5;\nconst RATING_DEFAULT_VALUE = 0;\nconst RatingPrimitive = (_ref, ref) => {\n  let className = _ref.className,\n    emptyColor = _ref.emptyColor,\n    emptyIcon = _ref.emptyIcon,\n    fillColor = _ref.fillColor,\n    icon = _ref.icon,\n    _ref$maxValue = _ref.maxValue,\n    maxValue = _ref$maxValue === void 0 ? RATING_DEFAULT_MAX_VALUE : _ref$maxValue,\n    size = _ref.size,\n    _ref$value = _ref.value,\n    value = _ref$value === void 0 ? RATING_DEFAULT_VALUE : _ref$value,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const icons = useIcons('rating');\n  const filledIcon = icon ?? icons?.filled ?? /*#__PURE__*/React.createElement(IconStar, null);\n  const _emptyIcon = emptyIcon ?? icon ?? icons?.empty ?? /*#__PURE__*/React.createElement(IconStar, null);\n  const items = new Array(Math.ceil(maxValue)).fill(1).map((_, index) => {\n    const currentIconIndex = index + 1;\n    if (isIconFilled(currentIconIndex, value)) return /*#__PURE__*/React.createElement(RatingIcon, {\n      key: index.toString(),\n      icon: filledIcon,\n      fill: fillColor,\n      className: classNameModifier(ComponentClassName.RatingIcon, 'filled')\n    });\n    if (isIconEmpty(currentIconIndex, value)) return /*#__PURE__*/React.createElement(RatingIcon, {\n      key: index.toString(),\n      icon: _emptyIcon,\n      fill: emptyColor,\n      className: classNameModifier(ComponentClassName.RatingIcon, 'empty')\n    });\n    if (isIconMixed(currentIconIndex, value)) return /*#__PURE__*/React.createElement(RatingMixedIcon, {\n      key: index.toString(),\n      fillIcon: filledIcon,\n      emptyIcon: _emptyIcon,\n      value: value,\n      fillColor: fillColor,\n      emptyColor: emptyColor\n    });\n  });\n  return /*#__PURE__*/React.createElement(Flex, _objectSpread({\n    className: classNames(ComponentClassName.Rating, classNameModifier(ComponentClassName.Rating, size), className),\n    ref: ref\n  }, rest), items, /*#__PURE__*/React.createElement(VisuallyHidden, null, value, \" out of \", maxValue, \" rating\"));\n};\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/components/rating)\n */\nconst Rating = primitiveWithForwardRef(RatingPrimitive);\nRating.displayName = 'Rating';\nexport { Rating };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}