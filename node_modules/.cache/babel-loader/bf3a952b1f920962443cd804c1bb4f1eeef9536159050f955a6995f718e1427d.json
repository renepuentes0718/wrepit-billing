{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport React__default from 'react';\nimport isEqual from 'lodash/isEqual.js';\nimport { useSetUserAgent } from '@aws-amplify/ui-react-core';\nimport { getLogger, getDefaultPasswordValidators, runFieldValidators, getDefaultConfirmPasswordValidators, changePassword } from '@aws-amplify/ui';\nimport { useAuth } from '../../../hooks/useAuth.mjs';\nimport 'aws-amplify/storage';\nimport '../../ThemeProvider/ThemeContext.mjs';\nimport '../../../primitives/Alert/AlertIcon.mjs';\nimport { View } from '../../../primitives/View/View.mjs';\nimport '../../../primitives/Icon/context/IconsContext.mjs';\nimport '../../../primitives/Field/FieldClearButton.mjs';\nimport '../../../primitives/Field/FieldDescription.mjs';\nimport '../../../primitives/Field/FieldErrorMessage.mjs';\nimport '../../../primitives/Field/Field.mjs';\nimport '../../../primitives/Alert/Alert.mjs';\nimport '../../../primitives/Autocomplete/Autocomplete.mjs';\nimport '../../../primitives/Badge/Badge.mjs';\nimport '../../../primitives/Breadcrumbs/Breadcrumbs.mjs';\nimport '../../../primitives/Button/Button.mjs';\nimport '../../../primitives/ButtonGroup/ButtonGroup.mjs';\nimport '../../../primitives/Card/Card.mjs';\nimport '../../../primitives/CheckboxField/CheckboxField.mjs';\nimport '../../../primitives/Collection/Collection.mjs';\nimport '../../../primitives/Divider/Divider.mjs';\nimport '../../../primitives/DropZone/DropZone.mjs';\nimport '../../../primitives/Accordion/Accordion.mjs';\nimport '../../../primitives/FieldGroupIcon/FieldGroupIcon.mjs';\nimport '../../../primitives/FieldGroupIcon/FieldGroupIconButton.mjs';\nimport '../../../primitives/Fieldset/Fieldset.mjs';\nimport '../../../primitives/Fieldset/useFieldset.mjs';\nimport { Flex } from '../../../primitives/Flex/Flex.mjs';\nimport '../../../primitives/Grid/Grid.mjs';\nimport '../../../primitives/Heading/Heading.mjs';\nimport '../../../primitives/HighlightMatch/HighlightMatch.mjs';\nimport '../../../primitives/Icon/Icon.mjs';\nimport '../../../primitives/Image/Image.mjs';\nimport '../../../primitives/Input/Input.mjs';\nimport '../../../primitives/Label/Label.mjs';\nimport '../../../primitives/Link/Link.mjs';\nimport '../../../primitives/Loader/Loader.mjs';\nimport '../../../primitives/Menu/Menu.mjs';\nimport '../../../primitives/Menu/MenuButton.mjs';\nimport '../../../primitives/Menu/MenuItem.mjs';\nimport '../../../primitives/Message/Message.mjs';\nimport '../../../primitives/Pagination/Pagination.mjs';\nimport '../../../primitives/PasswordField/PasswordField.mjs';\nimport '../../../primitives/PhoneNumberField/PhoneNumberField.mjs';\nimport '../../../primitives/Placeholder/Placeholder.mjs';\nimport '../../../primitives/Radio/Radio.mjs';\nimport '../../../primitives/RadioGroupField/RadioGroupField.mjs';\nimport '../../../primitives/Rating/Rating.mjs';\nimport '../../../primitives/ScrollView/ScrollView.mjs';\nimport '../../../primitives/SearchField/SearchField.mjs';\nimport '../../../primitives/SelectField/SelectField.mjs';\nimport '../../../primitives/SliderField/SliderField.mjs';\nimport '../../../primitives/StepperField/StepperField.mjs';\nimport '../../../primitives/SwitchField/SwitchField.mjs';\nimport '../../../primitives/Table/Table.mjs';\nimport '../../../primitives/Table/TableBody.mjs';\nimport '../../../primitives/Table/TableCell.mjs';\nimport '../../../primitives/Table/TableFoot.mjs';\nimport '../../../primitives/Table/TableHead.mjs';\nimport '../../../primitives/Table/TableRow.mjs';\nimport '../../../primitives/Tabs/Tabs.mjs';\nimport '../../../primitives/Text/Text.mjs';\nimport '../../../primitives/TextAreaField/TextAreaField.mjs';\nimport '../../../primitives/TextField/TextField.mjs';\nimport '../../../primitives/ToggleButton/ToggleButton.mjs';\nimport '../../../primitives/ToggleButtonGroup/ToggleButtonGroup.mjs';\nimport '../../../primitives/VisuallyHidden/VisuallyHidden.mjs';\nimport { ComponentClassName } from '../constants.mjs';\nimport DEFAULTS from './defaults.mjs';\nimport { defaultChangePasswordDisplayText } from '../utils/displayText.mjs';\nimport { VERSION } from '../../../version.mjs';\nconst logger = getLogger('AccountSettings');\nconst getIsDisabled = (formValues, validationError) => {\n  const currentPassword = formValues.currentPassword,\n    newPassword = formValues.newPassword,\n    confirmPassword = formValues.confirmPassword;\n  const hasEmptyField = !currentPassword || !newPassword || !confirmPassword;\n  if (hasEmptyField) {\n    return true;\n  }\n  const arePasswordsInvalid = validationError.newPassword?.length > 0 || validationError.confirmPassword?.length > 0;\n  return arePasswordsInvalid;\n};\nfunction ChangePassword(_ref) {\n  let components = _ref.components,\n    overrideDisplayText = _ref.displayText,\n    onError = _ref.onError,\n    onSuccess = _ref.onSuccess,\n    validators = _ref.validators;\n  const _React__default$useSt = React__default.useState(null),\n    _React__default$useSt2 = _slicedToArray(_React__default$useSt, 2),\n    errorMessage = _React__default$useSt2[0],\n    setErrorMessage = _React__default$useSt2[1];\n  const _React__default$useSt3 = React__default.useState({}),\n    _React__default$useSt4 = _slicedToArray(_React__default$useSt3, 2),\n    formValues = _React__default$useSt4[0],\n    setFormValues = _React__default$useSt4[1];\n  const _React__default$useSt5 = React__default.useState({}),\n    _React__default$useSt6 = _slicedToArray(_React__default$useSt5, 2),\n    validationError = _React__default$useSt6[0],\n    setValidationError = _React__default$useSt6[1];\n  const blurredFields = React__default.useRef([]);\n  const _useAuth = useAuth(),\n    user = _useAuth.user,\n    isLoading = _useAuth.isLoading;\n  const isDisabled = getIsDisabled(formValues, validationError);\n  const passwordValidators = React__default.useMemo(() => {\n    return validators ?? getDefaultPasswordValidators();\n  }, [validators]);\n  useSetUserAgent({\n    componentName: 'ChangePassword',\n    packageName: 'react',\n    version: VERSION\n  });\n  /*\n   * Note that formValues and other states are passed in as props so that\n   * it does not depend on whether or not those states have been updated yet\n   */\n  const validateNewPassword = React__default.useCallback(_ref2 => {\n    let formValues = _ref2.formValues,\n      eventType = _ref2.eventType;\n    const newPassword = formValues.newPassword;\n    const hasBlurred = blurredFields.current.includes('newPassword');\n    return runFieldValidators({\n      value: newPassword,\n      validators: passwordValidators,\n      eventType,\n      hasBlurred\n    });\n  }, [passwordValidators]);\n  const validateConfirmPassword = React__default.useCallback(_ref3 => {\n    let formValues = _ref3.formValues,\n      eventType = _ref3.eventType;\n    const newPassword = formValues.newPassword,\n      confirmPassword = formValues.confirmPassword;\n    const hasBlurred = blurredFields.current.includes('confirmPassword');\n    const confirmPasswordValidators = getDefaultConfirmPasswordValidators(newPassword);\n    return runFieldValidators({\n      value: confirmPassword,\n      validators: confirmPasswordValidators,\n      eventType,\n      hasBlurred\n    });\n  }, []);\n  const runValidation = React__default.useCallback(param => {\n    const passwordErrors = validateNewPassword(param);\n    const confirmPasswordErrors = validateConfirmPassword(param);\n    const newValidationError = {\n      newPassword: passwordErrors,\n      confirmPassword: confirmPasswordErrors\n    };\n    // only re-render if errors have changed\n    if (!isEqual(validationError, newValidationError)) {\n      setValidationError(newValidationError);\n    }\n  }, [validateConfirmPassword, validateNewPassword, validationError]);\n  /* Translations */\n  const displayText = _objectSpread(_objectSpread({}, defaultChangePasswordDisplayText), overrideDisplayText);\n  const confirmPasswordFieldLabel = displayText.confirmPasswordFieldLabel,\n    currentPasswordFieldLabel = displayText.currentPasswordFieldLabel,\n    newPasswordFieldLabel = displayText.newPasswordFieldLabel,\n    updatePasswordButtonText = displayText.updatePasswordButtonText;\n  /* Subcomponents */\n  const _React__default$useMe = React__default.useMemo(() => _objectSpread(_objectSpread({}, DEFAULTS), components ?? {}), [components]),\n    CurrentPasswordField = _React__default$useMe.CurrentPasswordField,\n    NewPasswordField = _React__default$useMe.NewPasswordField,\n    ConfirmPasswordField = _React__default$useMe.ConfirmPasswordField,\n    SubmitButton = _React__default$useMe.SubmitButton,\n    ErrorMessage = _React__default$useMe.ErrorMessage;\n  /* Event Handlers */\n  const handleChange = event => {\n    event.preventDefault();\n    const _event$target = event.target,\n      name = _event$target.name,\n      value = _event$target.value;\n    const newFormValues = _objectSpread(_objectSpread({}, formValues), {}, {\n      [name]: value\n    });\n    runValidation({\n      formValues: newFormValues,\n      eventType: 'change'\n    });\n    setFormValues(newFormValues);\n  };\n  const handleBlur = event => {\n    event.preventDefault();\n    const name = event.target.name;\n    // only update state and run validation if this is the first time blurring the field\n    if (!blurredFields.current.includes(name)) {\n      const newBlurredFields = [...blurredFields.current, name];\n      blurredFields.current = newBlurredFields;\n      runValidation({\n        formValues,\n        eventType: 'blur'\n      });\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!user) {\n      return;\n    }\n    const currentPassword = formValues.currentPassword,\n      newPassword = formValues.newPassword;\n    if (errorMessage) {\n      setErrorMessage(null);\n    }\n    changePassword({\n      currentPassword,\n      newPassword\n    }).then(() => {\n      // notify success to the parent\n      onSuccess?.();\n    }).catch(e => {\n      const error = e;\n      if (error.message) setErrorMessage(error.message);\n      onError?.(error); // notify error to the parent\n    });\n  };\n  // Return null if Auth.getgetCurrentUser is still in progress\n  if (isLoading) {\n    return null;\n  }\n  // Return null if user isn't authenticated in the first place\n  if (!user) {\n    logger.warn('<ChangePassword /> requires user to be authenticated.');\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(View, {\n    as: \"form\",\n    className: ComponentClassName.ChangePassword,\n    onSubmit: handleSubmit\n  }, /*#__PURE__*/React__default.createElement(Flex, {\n    direction: \"column\"\n  }, /*#__PURE__*/React__default.createElement(CurrentPasswordField, {\n    autoComplete: \"current-password\",\n    isRequired: true,\n    label: currentPasswordFieldLabel,\n    name: \"currentPassword\",\n    onBlur: handleBlur,\n    onChange: handleChange\n  }), /*#__PURE__*/React__default.createElement(NewPasswordField, {\n    autoComplete: \"new-password\",\n    fieldValidationErrors: validationError?.newPassword,\n    isRequired: true,\n    label: newPasswordFieldLabel,\n    name: \"newPassword\",\n    onBlur: handleBlur,\n    onChange: handleChange\n  }), /*#__PURE__*/React__default.createElement(ConfirmPasswordField, {\n    autoComplete: \"new-password\",\n    fieldValidationErrors: validationError?.confirmPassword,\n    isRequired: true,\n    label: confirmPasswordFieldLabel,\n    name: \"confirmPassword\",\n    onBlur: handleBlur,\n    onChange: handleChange\n  }), /*#__PURE__*/React__default.createElement(SubmitButton, {\n    isDisabled: isDisabled,\n    type: \"submit\"\n  }, updatePasswordButtonText), errorMessage ? /*#__PURE__*/React__default.createElement(ErrorMessage, null, errorMessage) : null));\n}\nChangePassword.CurrentPasswordField = DEFAULTS.CurrentPasswordField;\nChangePassword.NewPasswordField = DEFAULTS.NewPasswordField;\nChangePassword.ConfirmPasswordField = DEFAULTS.ConfirmPasswordField;\nChangePassword.SubmitButton = DEFAULTS.SubmitButton;\nChangePassword.ErrorMessage = DEFAULTS.ErrorMessage;\nexport { ChangePassword as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}