{"ast":null,"code":"const _excluded = [\"autoComplete\", \"checked\", \"className\", \"defaultChecked\", \"defaultValue\", \"id\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"size\", \"type\", \"hasError\", \"value\", \"variation\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport * as React from 'react';\nimport { classNames, ComponentClassName, classNameModifier, classNameModifierByFlag } from '@aws-amplify/ui';\nimport { View } from '../View/View.mjs';\nimport { useFieldset } from '../Fieldset/useFieldset.mjs';\nimport { primitiveWithForwardRef } from '../utils/primitiveWithForwardRef.mjs';\nconst InputPrimitive = (_ref, ref) => {\n  let autoComplete = _ref.autoComplete,\n    checked = _ref.checked,\n    className = _ref.className,\n    defaultChecked = _ref.defaultChecked,\n    defaultValue = _ref.defaultValue,\n    id = _ref.id,\n    isDisabled = _ref.isDisabled,\n    isReadOnly = _ref.isReadOnly,\n    isRequired = _ref.isRequired,\n    size = _ref.size,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'text' : _ref$type,\n    _ref$hasError = _ref.hasError,\n    hasError = _ref$hasError === void 0 ? false : _ref$hasError,\n    value = _ref.value,\n    variation = _ref.variation,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const componentClasses = classNames(ComponentClassName.Input, ComponentClassName.FieldGroupControl, classNameModifier(ComponentClassName.Input, variation), classNameModifierByFlag(ComponentClassName.Input, 'error', hasError), classNameModifier(ComponentClassName.Input, size), className);\n  const _useFieldset = useFieldset(),\n    isFieldsetDisabled = _useFieldset.isFieldsetDisabled;\n  return /*#__PURE__*/React.createElement(View, _objectSpread({\n    \"aria-invalid\": hasError,\n    as: \"input\",\n    autoComplete: autoComplete,\n    checked: checked,\n    className: componentClasses,\n    defaultChecked: defaultChecked,\n    defaultValue: defaultValue,\n    isDisabled: isFieldsetDisabled ? isFieldsetDisabled : isDisabled,\n    id: id,\n    readOnly: isReadOnly,\n    ref: ref,\n    required: isRequired,\n    type: type,\n    value: value\n  }, rest));\n};\nconst Input = primitiveWithForwardRef(InputPrimitive);\nInput.displayName = 'Input';\nexport { Input };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}