{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport * as React from 'react';\nimport { getMediaQueries } from './getMediaQueries.mjs';\n\n// Inspiration for getMediaQueries and useBreakpoint\nconst useIsomorphicEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;\nconst useBreakpoint = _ref => {\n  let breakpoints = _ref.breakpoints,\n    defaultBreakpoint = _ref.defaultBreakpoint;\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const matchMedia = supportMatchMedia ? window.matchMedia : null;\n  const mediaQueries = React.useMemo(() => getMediaQueries({\n    breakpoints\n  }), [breakpoints]);\n  const _React$useState = React.useState(defaultBreakpoint),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    breakpoint = _React$useState2[0],\n    setBreakpoint = _React$useState2[1];\n  const updateBreakpoint = React.useCallback((matches, breakpoint) => {\n    if (matches) {\n      setBreakpoint(breakpoint);\n    }\n  }, [setBreakpoint]);\n  useIsomorphicEffect(() => {\n    if (!matchMedia) return;\n    const unsubscribeList = mediaQueries.map(_ref2 => {\n      let query = _ref2.query,\n        breakpoint = _ref2.breakpoint;\n      const queryList = matchMedia(query);\n      updateBreakpoint(queryList.matches, breakpoint);\n      const handleMediaChange = event => {\n        if (event.matches) {\n          setBreakpoint(breakpoint);\n        }\n      };\n      queryList.addEventListener('change', handleMediaChange);\n      return () => queryList.removeEventListener('change', handleMediaChange);\n    });\n    return () => {\n      unsubscribeList.forEach(unsubscribe => unsubscribe());\n    };\n  }, [breakpoints, setBreakpoint, matchMedia, mediaQueries]);\n  /** Print a nice debug value for React Devtools */\n  React.useDebugValue(breakpoint, breakpoint => breakpoint);\n  return breakpoint;\n};\nexport { useBreakpoint };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}