{"ast":null,"code":"const _excluded = [\"className\", \"defaultChecked\", \"id\", \"isChecked\", \"isDisabled\", \"isLabelHidden\", \"label\", \"labelPosition\", \"name\", \"onChange\", \"size\", \"thumbColor\", \"trackCheckedColor\", \"trackColor\", \"value\", \"hasError\", \"errorMessage\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport * as React from 'react';\nimport { classNames, ComponentClassName, classNameModifierByFlag, classNameModifier } from '@aws-amplify/ui';\nimport { Flex } from '../Flex/Flex.mjs';\nimport '../Field/FieldClearButton.mjs';\nimport '../Field/FieldDescription.mjs';\nimport { FieldErrorMessage } from '../Field/FieldErrorMessage.mjs';\nimport '../Field/Field.mjs';\nimport { Input } from '../Input/Input.mjs';\nimport { Label } from '../Label/Label.mjs';\nimport { useStableId } from '../utils/useStableId.mjs';\nimport { useSwitch } from './useSwitch.mjs';\nimport { View } from '../View/View.mjs';\nimport { VisuallyHidden } from '../VisuallyHidden/VisuallyHidden.mjs';\nimport { useFieldset } from '../Fieldset/useFieldset.mjs';\nimport { primitiveWithForwardRef } from '../utils/primitiveWithForwardRef.mjs';\nconst SwitchFieldPrimitive = (_ref, ref) => {\n  let className = _ref.className,\n    defaultChecked = _ref.defaultChecked,\n    id = _ref.id,\n    isChecked = _ref.isChecked,\n    isDisabled = _ref.isDisabled,\n    isLabelHidden = _ref.isLabelHidden,\n    label = _ref.label,\n    labelPosition = _ref.labelPosition,\n    name = _ref.name,\n    onChange = _ref.onChange,\n    size = _ref.size,\n    thumbColor = _ref.thumbColor,\n    trackCheckedColor = _ref.trackCheckedColor,\n    trackColor = _ref.trackColor,\n    value = _ref.value,\n    hasError = _ref.hasError,\n    errorMessage = _ref.errorMessage,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const _useSwitch = useSwitch({\n      onChange,\n      isChecked,\n      defaultChecked,\n      isDisabled\n    }),\n    isOn = _useSwitch.isOn,\n    changeHandler = _useSwitch.changeHandler,\n    isFocused = _useSwitch.isFocused,\n    setIsFocused = _useSwitch.setIsFocused;\n  const _useFieldset = useFieldset(),\n    isFieldsetDisabled = _useFieldset.isFieldsetDisabled;\n  const shouldBeDisabled = isFieldsetDisabled ? isFieldsetDisabled : isDisabled;\n  const fieldId = useStableId(id);\n  const wrapperClasses = classNames(ComponentClassName.SwitchTrack, classNameModifierByFlag(ComponentClassName.SwitchTrack, 'checked', isOn), classNameModifierByFlag(ComponentClassName.SwitchTrack, 'disabled', shouldBeDisabled), classNameModifierByFlag(ComponentClassName.SwitchTrack, 'focused', isFocused), classNameModifierByFlag(ComponentClassName.SwitchTrack, 'error', hasError));\n  const componentClasses = classNames(ComponentClassName.SwitchThumb, classNameModifierByFlag(ComponentClassName.SwitchThumb, 'checked', isOn), classNameModifierByFlag(ComponentClassName.SwitchThumb, 'disabled', shouldBeDisabled));\n  return /*#__PURE__*/React.createElement(Flex, _objectSpread({\n    className: classNames(ComponentClassName.SwitchField, classNameModifier(ComponentClassName.SwitchField, size), labelPosition ? `amplify-label-${labelPosition}` : null, className),\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(VisuallyHidden, null, /*#__PURE__*/React.createElement(Input, {\n    role: \"switch\",\n    type: \"checkbox\",\n    id: fieldId,\n    onChange: changeHandler,\n    disabled: isDisabled,\n    name: name,\n    checked: isOn,\n    value: value,\n    onFocus: () => {\n      setIsFocused(true);\n    },\n    onBlur: () => {\n      setIsFocused(false);\n    }\n  })), /*#__PURE__*/React.createElement(Label, {\n    htmlFor: fieldId,\n    className: classNames(ComponentClassName.SwitchWrapper, classNameModifier(ComponentClassName.SwitchWrapper, labelPosition))\n  }, isLabelHidden ? ( /*#__PURE__*/React.createElement(VisuallyHidden, {\n    as: \"span\",\n    className: ComponentClassName.SwitchLabel\n  }, label)) : ( /*#__PURE__*/React.createElement(View, {\n    as: \"span\",\n    className: ComponentClassName.SwitchLabel\n  }, label)), /*#__PURE__*/React.createElement(View, {\n    as: \"span\",\n    className: wrapperClasses,\n    backgroundColor: isOn ? trackCheckedColor : trackColor\n  }, /*#__PURE__*/React.createElement(View, {\n    as: \"span\",\n    className: componentClasses,\n    \"data-checked\": isOn,\n    \"data-disabled\": shouldBeDisabled,\n    backgroundColor: thumbColor\n  }))), /*#__PURE__*/React.createElement(FieldErrorMessage, {\n    hasError: hasError,\n    errorMessage: errorMessage\n  }));\n};\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/components/switchfield)\n */\nconst SwitchField = primitiveWithForwardRef(SwitchFieldPrimitive);\nSwitchField.displayName = 'SwitchField';\nexport { SwitchField };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}