{"ast":null,"code":"// import React, { useState } from 'react'\n// import { Link as RouterLink, redirect } from 'react-router-dom'\n// import { Formik } from 'formik'\n// import EyeOutlined from '@ant-design/icons/EyeOutlined'\n// import EyeInvisibleOutlined from '@ant-design/icons/EyeInvisibleOutlined'\n// import {\n//   Button,\n//   Checkbox,\n//   FormControlLabel,\n//   FormHelperText,\n//   Grid,\n//   InputAdornment,\n//   IconButton,\n//   InputLabel,\n//   OutlinedInput,\n//   Stack,\n//   Typography,\n// } from '@mui/material'\n// import Omniauth from '../shared/OmniAuth'\n// import { LoginSchema } from '../schema'\n// import { gql, useMutation } from '@apollo/client'\n// import Banner from '../shared/Banner'\n\n// const initialValues = {\n//   email: '',\n//   password: ''\n// }\n\n// interface SignInProps {\n//   email: string\n//   password: string\n// }\n\n// // const SIGNIN_USER = gql`\n// //   mutation SigninUser(\n// //     $email: String!,\n// //     $password: String!,\n// //   ) {\n// //     signinUser(\n// //       input: {\n// //         email: $email,\n// //         password: $password,\n// //       }\n// //     ){\n// //       id\n// //     }\n// //   }\n// // `;\n\n// export default function LoginForm(): JSX.Element {\n//   const [checked, setChecked] = useState(false)\n//   const [showPassword, setShowPassword] = useState(false)\n//   const [message, setMessage] = useState('')\n//   const [severity, setSeverity] = useState(null)\n//   // const [login, { loading }] = useMutation(SIGNIN_USER, {\n//   //   onCompleted: () => {\n//   //     console.log('success')\n//   //     window.location.replace('/home')\n//   //   },\n//   //   onError: () => {\n//   //     setTimeout(() => {\n//   //       setSeverity('error')\n//   //       setMessage('Sorry, account creation was unsuccessful')\n//   //     }, 20000);\n//   //   }\n//   // })\n\n//   const handleClickShowPassword = () => {\n//     setShowPassword(!showPassword)\n//   }\n\n//   const handleMouseDownPassword = (event) => {\n//     event.preventDefault()\n//   }\n\n//   const handleSubmit = (event: SignInProps) => {\n//     try {\n//       login({\n//         variables: {\n//           email: event.email,\n//           password: event.password,\n//         }\n//       })\n//     } catch (error) {\n//     }\n//   }\n\n//   return (\n//     <Formik\n//       onSubmit={handleSubmit}\n//       initialValues={initialValues}\n//       validationSchema={LoginSchema}\n//     >\n//       {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n//         <>{message && <Banner severity={severity} message={message} />}\n//           <form noValidate onSubmit={handleSubmit}>\n//             <Grid container spacing={3}>\n//               <Grid item xs={12}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='email'>Email Address</InputLabel>\n//                   <OutlinedInput\n//                     id='email'\n//                     type='email'\n//                     value={values.email}\n//                     name='email'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     placeholder='Enter email'\n//                     fullWidth\n//                     error={Boolean(touched.email && errors.email)}\n//                   />\n//                 </Stack>\n//                 {touched.email && typeof errors.email === 'string' && (\n//                   <FormHelperText error id='standard-weight-helper-text-email'>\n//                     {errors.email}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='password'>Password</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.password && errors.password)}\n//                     id='password'\n//                     type={showPassword ? 'text' : 'password'}\n//                     value={values.password}\n//                     name='password'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     endAdornment={\n//                       <InputAdornment position='end'>\n//                         <IconButton\n//                           aria-label='toggle password visibility'\n//                           onClick={handleClickShowPassword}\n//                           onMouseDown={handleMouseDownPassword}\n//                           edge='end'\n//                           color='secondary'\n//                         >\n//                           {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n//                         </IconButton>\n//                       </InputAdornment>\n//                     }\n//                     placeholder='Enter password'\n//                   />\n//                 </Stack>\n//                 {touched.password && typeof errors.password === 'string' && (\n//                   <FormHelperText error id='standard-weight-helper-text-password'>\n//                     {errors.password}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n\n//               <Grid item xs={12} sx={{ mt: -1 }}>\n//                 <Stack direction='row' justifyContent='space-between' alignItems='center' spacing={2}>\n//                   <FormControlLabel\n//                     control={\n//                       <Checkbox\n//                         checked={checked}\n//                         onChange={(event) => setChecked(event.target.checked)}\n//                         name='checked'\n//                         color='primary'\n//                         size='small'\n//                       />\n//                     }\n//                     label={<Typography>Keep me sign in</Typography>}\n//                   />\n//                   <Typography component={RouterLink} to='/forgot_password' variant='body2' sx={{ textDecoration: 'none' }} color='primary'>\n//                     Forgot Password?\n//                   </Typography>\n//                 </Stack>\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Button\n//                   disableElevation\n//                   disabled={loading}\n//                   fullWidth\n//                   size='large'\n//                   type='submit'\n//                   variant='contained'\n//                   sx={{\n//                     color: '#5bbff1'\n//                   }}\n//                 >\n//                   Login\n//                 </Button>\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Omniauth title=\"Login with\" />\n//               </Grid>\n//             </Grid>\n//           </form>\n//         </>\n//       )}\n//     </Formik>\n//   )\n// }","map":{"version":3,"names":[],"sources":["/Users/admin/Desktop/project-ges/app/javascript/components/forms/LoginForm.tsx"],"sourcesContent":["// import React, { useState } from 'react'\n// import { Link as RouterLink, redirect } from 'react-router-dom'\n// import { Formik } from 'formik'\n// import EyeOutlined from '@ant-design/icons/EyeOutlined'\n// import EyeInvisibleOutlined from '@ant-design/icons/EyeInvisibleOutlined'\n// import {\n//   Button,\n//   Checkbox,\n//   FormControlLabel,\n//   FormHelperText,\n//   Grid,\n//   InputAdornment,\n//   IconButton,\n//   InputLabel,\n//   OutlinedInput,\n//   Stack,\n//   Typography,\n// } from '@mui/material'\n// import Omniauth from '../shared/OmniAuth'\n// import { LoginSchema } from '../schema'\n// import { gql, useMutation } from '@apollo/client'\n// import Banner from '../shared/Banner'\n\n\n// const initialValues = {\n//   email: '',\n//   password: ''\n// }\n\n// interface SignInProps {\n//   email: string\n//   password: string\n// }\n\n// // const SIGNIN_USER = gql`\n// //   mutation SigninUser(\n// //     $email: String!,\n// //     $password: String!,\n// //   ) {\n// //     signinUser(\n// //       input: {\n// //         email: $email,\n// //         password: $password,\n// //       }\n// //     ){\n// //       id\n// //     }\n// //   }\n// // `;\n\n\n// export default function LoginForm(): JSX.Element {\n//   const [checked, setChecked] = useState(false)\n//   const [showPassword, setShowPassword] = useState(false)\n//   const [message, setMessage] = useState('')\n//   const [severity, setSeverity] = useState(null)\n//   // const [login, { loading }] = useMutation(SIGNIN_USER, {\n//   //   onCompleted: () => {\n//   //     console.log('success')\n//   //     window.location.replace('/home')\n//   //   },\n//   //   onError: () => {\n//   //     setTimeout(() => {\n//   //       setSeverity('error')\n//   //       setMessage('Sorry, account creation was unsuccessful')\n//   //     }, 20000);\n//   //   }\n//   // })\n\n\n//   const handleClickShowPassword = () => {\n//     setShowPassword(!showPassword)\n//   }\n\n//   const handleMouseDownPassword = (event) => {\n//     event.preventDefault()\n//   }\n\n//   const handleSubmit = (event: SignInProps) => {\n//     try {\n//       login({\n//         variables: {\n//           email: event.email,\n//           password: event.password,\n//         }\n//       })\n//     } catch (error) {\n//     }\n//   }\n\n//   return (\n//     <Formik\n//       onSubmit={handleSubmit}\n//       initialValues={initialValues}\n//       validationSchema={LoginSchema}\n//     >\n//       {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n//         <>{message && <Banner severity={severity} message={message} />}\n//           <form noValidate onSubmit={handleSubmit}>\n//             <Grid container spacing={3}>\n//               <Grid item xs={12}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='email'>Email Address</InputLabel>\n//                   <OutlinedInput\n//                     id='email'\n//                     type='email'\n//                     value={values.email}\n//                     name='email'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     placeholder='Enter email'\n//                     fullWidth\n//                     error={Boolean(touched.email && errors.email)}\n//                   />\n//                 </Stack>\n//                 {touched.email && typeof errors.email === 'string' && (\n//                   <FormHelperText error id='standard-weight-helper-text-email'>\n//                     {errors.email}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Stack spacing={1}>\n//                   <InputLabel htmlFor='password'>Password</InputLabel>\n//                   <OutlinedInput\n//                     fullWidth\n//                     error={Boolean(touched.password && errors.password)}\n//                     id='password'\n//                     type={showPassword ? 'text' : 'password'}\n//                     value={values.password}\n//                     name='password'\n//                     onBlur={handleBlur}\n//                     onChange={handleChange}\n//                     endAdornment={\n//                       <InputAdornment position='end'>\n//                         <IconButton\n//                           aria-label='toggle password visibility'\n//                           onClick={handleClickShowPassword}\n//                           onMouseDown={handleMouseDownPassword}\n//                           edge='end'\n//                           color='secondary'\n//                         >\n//                           {showPassword ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n//                         </IconButton>\n//                       </InputAdornment>\n//                     }\n//                     placeholder='Enter password'\n//                   />\n//                 </Stack>\n//                 {touched.password && typeof errors.password === 'string' && (\n//                   <FormHelperText error id='standard-weight-helper-text-password'>\n//                     {errors.password}\n//                   </FormHelperText>\n//                 )}\n//               </Grid>\n\n//               <Grid item xs={12} sx={{ mt: -1 }}>\n//                 <Stack direction='row' justifyContent='space-between' alignItems='center' spacing={2}>\n//                   <FormControlLabel\n//                     control={\n//                       <Checkbox\n//                         checked={checked}\n//                         onChange={(event) => setChecked(event.target.checked)}\n//                         name='checked'\n//                         color='primary'\n//                         size='small'\n//                       />\n//                     }\n//                     label={<Typography>Keep me sign in</Typography>}\n//                   />\n//                   <Typography component={RouterLink} to='/forgot_password' variant='body2' sx={{ textDecoration: 'none' }} color='primary'>\n//                     Forgot Password?\n//                   </Typography>\n//                 </Stack>\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Button\n//                   disableElevation\n//                   disabled={loading}\n//                   fullWidth\n//                   size='large'\n//                   type='submit'\n//                   variant='contained'\n//                   sx={{\n//                     color: '#5bbff1'\n//                   }}\n//                 >\n//                   Login\n//                 </Button>\n//               </Grid>\n//               <Grid item xs={12}>\n//                 <Omniauth title=\"Login with\" />\n//               </Grid>\n//             </Grid>\n//           </form>\n//         </>\n//       )}\n//     </Formik>\n//   )\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}