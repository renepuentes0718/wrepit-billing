{"ast":null,"code":"// import React from 'react'\n// import { motion, useCycle } from 'framer-motion/dist/framer-motion'\n\n// interface Props {\n//   children?: JSX.Element\n//   type?: 'slide' | 'scale' | 'rotate'\n//   direction?: 'up' | 'down' | 'left' | 'right'\n//   offset?: number\n//   // TODO: refactor to the appropriate type\n//   scale?: any\n// }\n\n// export default function AnimateButton({\n//   children,\n//   type = 'scale',\n//   direction = 'right',\n//   offset = 10,\n//   scale = { hover: 1.05, tap: 0.954 }\n// }: Props): JSX.Element {\n\n//   let offset1\n//   let offset2\n//   switch (direction) {\n//     case 'up':\n//     case 'left':\n//       offset1 = offset\n//       offset2 = 0\n//       break\n//     case 'right':\n//     case 'down':\n//     default:\n//       offset1 = 0\n//       offset2 = offset\n//       break\n//   }\n\n//   const [x, cycleX] = useCycle(offset1, offset2)\n//   const [y, cycleY] = useCycle(offset1, offset2)\n\n//   switch (type) {\n//     case 'rotate':\n//       return (\n//         <motion.div\n//           animate={{ rotate: 360 }}\n//           transition={{\n//             repeat: Infinity,\n//             repeatType: 'loop',\n//             duration: 2,\n//             repeatDelay: 0\n//           }}\n//         >\n//           {children}\n//         </motion.div>\n//       )\n//     case 'slide':\n//       if (direction === 'up' || direction === 'down') {\n//         return (\n//           <motion.div animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\n//             {children}\n//           </motion.div>\n//         )\n//       }\n//       return (\n//         <motion.div animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\n//           {children}\n//         </motion.div>\n//       )\n\n//     case 'scale':\n//     default:\n//       if (typeof scale === 'number') {\n//         scale = {\n//           hover: scale,\n//           tap: scale\n//         }\n//       }\n//       return (\n//         <motion.div whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\n//           {children}\n//         </motion.div>\n//       )\n//   }\n// }","map":{"version":3,"names":[],"sources":["/Users/admin/Desktop/project-ges/app/javascript/components/shared/AnimateButton.tsx"],"sourcesContent":["// import React from 'react'\n// import { motion, useCycle } from 'framer-motion/dist/framer-motion'\n\n// interface Props {\n//   children?: JSX.Element\n//   type?: 'slide' | 'scale' | 'rotate'\n//   direction?: 'up' | 'down' | 'left' | 'right'\n//   offset?: number\n//   // TODO: refactor to the appropriate type\n//   scale?: any\n// }\n\n// export default function AnimateButton({\n//   children,\n//   type = 'scale',\n//   direction = 'right',\n//   offset = 10,\n//   scale = { hover: 1.05, tap: 0.954 }\n// }: Props): JSX.Element {\n\n//   let offset1\n//   let offset2\n//   switch (direction) {\n//     case 'up':\n//     case 'left':\n//       offset1 = offset\n//       offset2 = 0\n//       break\n//     case 'right':\n//     case 'down':\n//     default:\n//       offset1 = 0\n//       offset2 = offset\n//       break\n//   }\n\n//   const [x, cycleX] = useCycle(offset1, offset2)\n//   const [y, cycleY] = useCycle(offset1, offset2)\n\n//   switch (type) {\n//     case 'rotate':\n//       return (\n//         <motion.div\n//           animate={{ rotate: 360 }}\n//           transition={{\n//             repeat: Infinity,\n//             repeatType: 'loop',\n//             duration: 2,\n//             repeatDelay: 0\n//           }}\n//         >\n//           {children}\n//         </motion.div>\n//       )\n//     case 'slide':\n//       if (direction === 'up' || direction === 'down') {\n//         return (\n//           <motion.div animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\n//             {children}\n//           </motion.div>\n//         )\n//       }\n//       return (\n//         <motion.div animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\n//           {children}\n//         </motion.div>\n//       )\n\n//     case 'scale':\n//     default:\n//       if (typeof scale === 'number') {\n//         scale = {\n//           hover: scale,\n//           tap: scale\n//         }\n//       }\n//       return (\n//         <motion.div whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\n//           {children}\n//         </motion.div>\n//       )\n//   }\n// }\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}