{"ast":null,"code":"import * as React from 'react';\nimport * as RadixDirection from '@radix-ui/react-direction';\nimport { sanitizeNamespaceImport, createTheme } from '@aws-amplify/ui';\nimport { ThemeContext } from './ThemeContext.mjs';\n\n// Radix packages don't support ESM in Node, in some scenarios(e.g. SSR)\n// We have to use namespace import and sanitize it to ensure the interoperablity between ESM and CJS\nconst _sanitizeNamespaceImp = sanitizeNamespaceImport(RadixDirection),\n  DirectionProvider = _sanitizeNamespaceImp.DirectionProvider;\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/theming)\n */\nfunction ThemeProvider(_ref) {\n  let children = _ref.children,\n    colorMode = _ref.colorMode,\n    _ref$direction = _ref.direction,\n    direction = _ref$direction === void 0 ? 'ltr' : _ref$direction,\n    nonce = _ref.nonce,\n    theme = _ref.theme;\n  const value = React.useMemo(() => ({\n    theme: createTheme(theme),\n    colorMode\n  }), [theme, colorMode]);\n  const _value$theme = value.theme,\n    name = _value$theme.name,\n    cssText = _value$theme.cssText;\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: value\n  }, /*#__PURE__*/React.createElement(DirectionProvider, {\n    dir: direction\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    \"data-amplify-theme\": name,\n    \"data-amplify-color-mode\": colorMode,\n    dir: direction\n  }, children), typeof theme === 'undefined' || /<\\/style/i.test(cssText) ? null : ( /*#__PURE__*/React.createElement(\"style\", {\n    id: `amplify-theme-${name}`,\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: cssText\n    },\n    nonce: nonce\n  }))));\n}\nexport { ThemeProvider };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}