{"ast":null,"code":"const _excluded = [\"className\", \"defaultValue\", \"value\", \"isLoading\", \"menuSlots\", \"options\", \"optionFilter\", \"onBlur\", \"onChange\", \"onClear\", \"onClick\", \"onSelect\", \"onSubmit\", \"renderOption\", \"testId\"],\n  _excluded2 = [\"id\", \"label\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport { isFunction, classNames, ComponentClassName } from '@aws-amplify/ui';\nimport * as React from 'react';\nimport { primitiveWithForwardRef } from '../utils/primitiveWithForwardRef.mjs';\nimport { AutocompleteOption } from './AutocompleteOption.mjs';\nimport { AutocompleteMenu } from './AutocompleteMenu.mjs';\nimport { useAutocomplete } from './useAutocomplete.mjs';\nimport { HighlightMatch } from '../HighlightMatch/HighlightMatch.mjs';\nimport { SearchField } from '../SearchField/SearchField.mjs';\nimport { View } from '../View/View.mjs';\nconst AutocompletePrimitive = (_ref, ref) => {\n  let className = _ref.className,\n    defaultValue = _ref.defaultValue,\n    value = _ref.value,\n    _ref$isLoading = _ref.isLoading,\n    isLoading = _ref$isLoading === void 0 ? false : _ref$isLoading,\n    _ref$menuSlots = _ref.menuSlots,\n    menuSlots = _ref$menuSlots === void 0 ? {} : _ref$menuSlots,\n    options = _ref.options,\n    optionFilter = _ref.optionFilter,\n    onBlur = _ref.onBlur,\n    onChange = _ref.onChange,\n    onClear = _ref.onClear,\n    onClick = _ref.onClick,\n    onSelect = _ref.onSelect,\n    onSubmit = _ref.onSubmit,\n    renderOption = _ref.renderOption,\n    testId = _ref.testId,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const _useAutocomplete = useAutocomplete({\n      defaultValue,\n      value,\n      options,\n      optionFilter,\n      onBlur,\n      onChange,\n      onClear,\n      onClick,\n      onSelect,\n      onSubmit\n    }),\n    activeOptionId = _useAutocomplete.activeOptionId,\n    autocompleteId = _useAutocomplete.autocompleteId,\n    composedValue = _useAutocomplete.composedValue,\n    filteredOptions = _useAutocomplete.filteredOptions,\n    handleOnBlur = _useAutocomplete.handleOnBlur,\n    handleOnClear = _useAutocomplete.handleOnClear,\n    handleOnClick = _useAutocomplete.handleOnClick,\n    handleOnChange = _useAutocomplete.handleOnChange,\n    handleOnKeyDown = _useAutocomplete.handleOnKeyDown,\n    isControlled = _useAutocomplete.isControlled,\n    isCustomFiltering = _useAutocomplete.isCustomFiltering,\n    isMenuOpen = _useAutocomplete.isMenuOpen,\n    listboxId = _useAutocomplete.listboxId,\n    menuId = _useAutocomplete.menuId,\n    optionBaseId = _useAutocomplete.optionBaseId,\n    setActiveOption = _useAutocomplete.setActiveOption,\n    setIsMenuOpen = _useAutocomplete.setIsMenuOpen,\n    setInternalValue = _useAutocomplete.setInternalValue;\n  const comboboxProps = {\n    role: 'combobox',\n    'aria-activedescendant': activeOptionId,\n    'aria-autocomplete': 'list',\n    'aria-controls': isMenuOpen ? menuId : undefined,\n    'aria-expanded': isMenuOpen,\n    'aria-haspopup': 'listbox',\n    'aria-owns': isMenuOpen ? menuId : undefined\n  };\n  const Options = filteredOptions.map((option, idx) => {\n    const id = option.id,\n      label = option.label,\n      rest = _objectWithoutProperties(option, _excluded2);\n    const handleOnClick = () => {\n      setIsMenuOpen(false);\n      setActiveOption(null);\n      if (!isControlled) {\n        setInternalValue(label);\n      }\n      if (isFunction(onSelect)) {\n        onSelect(option);\n      }\n    };\n    // This is required. Mousedown event will fire a blur event by default\n    // and so the menu will close before the click event on an option gets a chance to fire\n    const handleOnMouseDown = event => {\n      event.preventDefault();\n    };\n    const handleOnMouseMove = () => {\n      setActiveOption(option);\n    };\n    const optionId = id ?? `${optionBaseId}-option-${idx}`;\n    const isActive = optionId === activeOptionId;\n    return /*#__PURE__*/React.createElement(AutocompleteOption, _objectSpread({\n      isActive: isActive,\n      id: optionId,\n      key: optionId,\n      onClick: handleOnClick,\n      onMouseDown: handleOnMouseDown,\n      onMouseMove: handleOnMouseMove\n    }, rest), isFunction(renderOption) ? renderOption(option, composedValue) : isCustomFiltering ? label : ( /*#__PURE__*/React.createElement(HighlightMatch, {\n      query: composedValue\n    }, label)));\n  });\n  return /*#__PURE__*/React.createElement(View, {\n    className: classNames(ComponentClassName.Autocomplete, className),\n    id: autocompleteId,\n    testId: testId\n  }, /*#__PURE__*/React.createElement(SearchField, _objectSpread(_objectSpread({\n    hasSearchButton: false,\n    hasSearchIcon: true,\n    onBlur: handleOnBlur,\n    onChange: handleOnChange,\n    onClear: handleOnClear,\n    onClick: handleOnClick,\n    onKeyDown: handleOnKeyDown,\n    ref: ref,\n    value: composedValue\n  }, comboboxProps), rest)), isMenuOpen ? ( /*#__PURE__*/React.createElement(AutocompleteMenu, _objectSpread({\n    id: menuId,\n    isLoading: isLoading,\n    listboxId: listboxId\n  }, menuSlots), Options)) : null);\n};\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/components/autocomplete)\n */\nconst Autocomplete = primitiveWithForwardRef(AutocompletePrimitive);\nAutocomplete.displayName = 'Autocomplete';\nexport { Autocomplete, AutocompletePrimitive };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}