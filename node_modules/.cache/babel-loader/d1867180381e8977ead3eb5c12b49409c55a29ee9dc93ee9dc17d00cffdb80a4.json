{"ast":null,"code":"const _excluded = [\"asChild\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } } return target; }\nimport $4q5Fq$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport { forwardRef as $4q5Fq$forwardRef, useEffect as $4q5Fq$useEffect, createElement as $4q5Fq$createElement } from \"react\";\nimport { flushSync as $4q5Fq$flushSync } from \"react-dom\";\nimport { Slot as $4q5Fq$Slot } from \"@radix-ui/react-slot\";\nconst $8927f6f2acc4f386$var$NODES = ['a', 'button', 'div', 'h2', 'h3', 'img', 'li', 'nav', 'ol', 'p', 'span', 'svg', 'ul']; // Temporary while we await merge of this fix:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/pull/55396\n// prettier-ignore\n/* -------------------------------------------------------------------------------------------------\n * Primitive\n * -----------------------------------------------------------------------------------------------*/\nconst $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node) => {\n  const Node = /*#__PURE__*/$4q5Fq$forwardRef((props, forwardedRef) => {\n    const asChild = props.asChild,\n      primitiveProps = _objectWithoutProperties(props, _excluded);\n    const Comp = asChild ? $4q5Fq$Slot : node;\n    $4q5Fq$useEffect(() => {\n      window[Symbol.for('radix-ui')] = true;\n    }, []);\n    return /*#__PURE__*/$4q5Fq$createElement(Comp, $4q5Fq$babelruntimehelpersesmextends({}, primitiveProps, {\n      ref: forwardedRef\n    }));\n  });\n  Node.displayName = `Primitive.${node}`;\n  return _objectSpread(_objectSpread({}, primitive), {}, {\n    [node]: Node\n  });\n}, {});\n/* -------------------------------------------------------------------------------------------------\n * Utils\n * -----------------------------------------------------------------------------------------------*/ /**\n                                                                                                     * Flush custom event dispatch\n                                                                                                     * https://github.com/radix-ui/primitives/pull/1378\n                                                                                                     *\n                                                                                                     * React batches *all* event handlers since version 18, this introduces certain considerations when using custom event types.\n                                                                                                     *\n                                                                                                     * Internally, React prioritises events in the following order:\n                                                                                                     *  - discrete\n                                                                                                     *  - continuous\n                                                                                                     *  - default\n                                                                                                     *\n                                                                                                     * https://github.com/facebook/react/blob/a8a4742f1c54493df00da648a3f9d26e3db9c8b5/packages/react-dom/src/events/ReactDOMEventListener.js#L294-L350\n                                                                                                     *\n                                                                                                     * `discrete` is an  important distinction as updates within these events are applied immediately.\n                                                                                                     * React however, is not able to infer the priority of custom event types due to how they are detected internally.\n                                                                                                     * Because of this, it's possible for updates from custom events to be unexpectedly batched when\n                                                                                                     * dispatched by another `discrete` event.\n                                                                                                     *\n                                                                                                     * In order to ensure that updates from custom events are applied predictably, we need to manually flush the batch.\n                                                                                                     * This utility should be used when dispatching a custom event from within another `discrete` event, this utility\n                                                                                                     * is not nessesary when dispatching known event types, or if dispatching a custom type inside a non-discrete event.\n                                                                                                     * For example:\n                                                                                                     *\n                                                                                                     * dispatching a known click 👎\n                                                                                                     * target.dispatchEvent(new Event(‘click’))\n                                                                                                     *\n                                                                                                     * dispatching a custom type within a non-discrete event 👎\n                                                                                                     * onScroll={(event) => event.target.dispatchEvent(new CustomEvent(‘customType’))}\n                                                                                                     *\n                                                                                                     * dispatching a custom type within a `discrete` event 👍\n                                                                                                     * onPointerDown={(event) => dispatchDiscreteCustomEvent(event.target, new CustomEvent(‘customType’))}\n                                                                                                     *\n                                                                                                     * Note: though React classifies `focus`, `focusin` and `focusout` events as `discrete`, it's  not recommended to use\n                                                                                                     * this utility with them. This is because it's possible for those handlers to be called implicitly during render\n                                                                                                     * e.g. when focus is within a component as it is unmounted, or when managing focus on mount.\n                                                                                                     */\nfunction $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {\n  if (target) $4q5Fq$flushSync(() => target.dispatchEvent(event));\n}\n/* -----------------------------------------------------------------------------------------------*/\nconst $8927f6f2acc4f386$export$be92b6f5f03c0fe9 = $8927f6f2acc4f386$export$250ffa63cdc0d034;\nexport { $8927f6f2acc4f386$export$250ffa63cdc0d034 as Primitive, $8927f6f2acc4f386$export$be92b6f5f03c0fe9 as Root, $8927f6f2acc4f386$export$6d1a0317bde7de7f as dispatchDiscreteCustomEvent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}