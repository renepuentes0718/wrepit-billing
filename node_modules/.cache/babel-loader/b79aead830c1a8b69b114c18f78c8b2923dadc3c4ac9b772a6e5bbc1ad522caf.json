{"ast":null,"code":"import { isDesignToken, cssNameTransform } from '@aws-amplify/ui';\nexport { classNameModifier, classNameModifierByFlag } from '@aws-amplify/ui';\nimport { isThemeStylePropKey } from '../types/theme.mjs';\nimport { stylePropsToThemeKeys } from './constants.mjs';\nconst strHasLength = str => typeof str === 'string' && str.length > 0;\nconst isEmptyString = value => typeof value === 'string' && value.length === 0;\nconst isNullOrEmptyString = value => value == null || isEmptyString(value);\n/**\n * Create a consecutive integer array from start value to end value.\n * @param start start value\n * @param end end value\n * @returns an integer array with elements from start to end consecutively\n */\nconst getConsecutiveIntArray = (start, end) => {\n  const length = end - start + 1;\n  return Array.from({\n    length\n  }, (_, idx) => idx + start);\n};\n/**\n * TS helper function to make using Object.keys more typesafe\n */\nconst objectKeys = obj => {\n  return Object.keys(obj);\n};\nconst getCSSVariableIfValueIsThemeKey = (propKey, value, tokens) => {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  // For shorthand properties like `padding` which can accept 1, 2, 3, or 4 values\n  // run this function on each value. This would not work on CSS shorthands that\n  // mix types, like border which is a composite of borderWidth, borderStyle, and\n  // borderColor.\n  if (value.includes(' ')) {\n    return value.split(' ').map(val => getCSSVariableIfValueIsThemeKey(propKey, val, tokens)).join(' ');\n  }\n  if (isThemeStylePropKey(propKey)) {\n    const path = value.split('.');\n    const tokenKey = stylePropsToThemeKeys[propKey];\n    let tokenProps = tokens[tokenKey];\n    for (let i = 0; i < path.length; i++) {\n      if (tokenProps) {\n        // overwrite tokenProps with next nested value of tokenProps\n        tokenProps = tokenProps[path[i]];\n        continue;\n      }\n      break;\n    }\n    return isDesignToken(tokenProps) ? `var(--${cssNameTransform({\n      path: [stylePropsToThemeKeys[propKey], ...path]\n    })})` : value;\n  }\n  return value;\n};\nexport { getCSSVariableIfValueIsThemeKey, getConsecutiveIntArray, isEmptyString, isNullOrEmptyString, objectKeys, strHasLength };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}