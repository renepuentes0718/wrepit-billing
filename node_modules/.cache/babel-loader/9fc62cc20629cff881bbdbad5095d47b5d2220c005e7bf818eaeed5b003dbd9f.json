{"ast":null,"code":"import { useCallback } from 'react';\nimport { getFormDataFromEvent } from '../../../../helpers/utils.mjs';\nimport { useAuthenticator } from '@aws-amplify/ui-react-core';\nfunction useFormHandlers() {\n  const _useAuthenticator = useAuthenticator(context => [context.submitForm, context.updateBlur, context.updateForm]),\n    submitForm = _useAuthenticator.submitForm,\n    updateBlur = _useAuthenticator.updateBlur,\n    updateForm = _useAuthenticator.updateForm;\n  const handleBlur = useCallback(_ref => {\n    let name = _ref.target.name;\n    updateBlur({\n      name\n    });\n  }, [updateBlur]);\n  // @TODO: align multiple input type handling with react docs example for 3.0 release\n  // example: https://reactjs.org/docs/forms.html#handling-multiple-inputs\n  const handleChange = useCallback(_ref2 => {\n    let _ref2$target = _ref2.target,\n      checked = _ref2$target.checked,\n      name = _ref2$target.name,\n      type = _ref2$target.type,\n      value = _ref2$target.value;\n    const isUncheckedCheckbox = type === 'checkbox' && !checked;\n    updateForm({\n      name,\n      value: isUncheckedCheckbox ? undefined : value\n    });\n  }, [updateForm]);\n  const handleSubmit = useCallback(event => {\n    event.preventDefault();\n    submitForm(getFormDataFromEvent(event));\n  }, [submitForm]);\n  return {\n    handleBlur,\n    handleChange,\n    handleSubmit\n  };\n}\nexport { useFormHandlers };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}