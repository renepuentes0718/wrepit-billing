{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport * as React from 'react';\nconst usePagination = props => {\n  const _props$currentPage = props.currentPage,\n    initialPage = _props$currentPage === void 0 ? 1 : _props$currentPage,\n    totalPages = props.totalPages,\n    _props$hasMorePages = props.hasMorePages,\n    hasMorePages = _props$hasMorePages === void 0 ? false : _props$hasMorePages,\n    _props$siblingCount = props.siblingCount,\n    siblingCount = _props$siblingCount === void 0 ? 1 : _props$siblingCount;\n  // The current page should not be less than 1\n  const sanitizedInitialPage = Math.max(initialPage, 1);\n  // The total pages should be always greater than current page\n  const sanitizedTotalPages = Math.max(sanitizedInitialPage, totalPages);\n  const _React$useState = React.useState(sanitizedInitialPage),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    currentPage = _React$useState2[0],\n    setCurrentPage = _React$useState2[1];\n  // Reset current page if initialPage or totalPages changes\n  React.useEffect(() => {\n    setCurrentPage(sanitizedInitialPage);\n  }, [sanitizedInitialPage, sanitizedTotalPages]);\n  const onNext = React.useCallback(() => {\n    if (currentPage < sanitizedTotalPages) {\n      setCurrentPage(currentPage + 1);\n    }\n  }, [currentPage, sanitizedTotalPages]);\n  const onPrevious = React.useCallback(() => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  }, [currentPage]);\n  const onChange = React.useCallback(newPageIndex => {\n    if (typeof newPageIndex === 'number') {\n      setCurrentPage(newPageIndex);\n    }\n  }, []);\n  return {\n    currentPage,\n    hasMorePages,\n    onChange,\n    onNext,\n    onPrevious,\n    // The sibling count should not be less than 1\n    siblingCount: Math.max(siblingCount, 1),\n    totalPages: sanitizedTotalPages\n  };\n};\nexport { usePagination };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}